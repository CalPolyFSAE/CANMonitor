
FE2015Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800100  0000328a  0000331e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000328a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  008001e8  008001e8  00003406  2**0
                  ALLOC
  3 .stab         000079d4  00000000  00000000  00003408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007e15  00000000  00000000  0000addc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012bf1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c0  00000000  00000000  00012c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a72  00000000  00000000  00012dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000118  00000000  00000000  0001383a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000559  00000000  00000000  00013952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_1>
       8:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_2>
       c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_3>
      10:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_4>
      14:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_5>
      18:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_6>
      1c:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_7>
      20:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__vector_8>
      24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
      32:	00 00       	nop
      34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
      36:	00 00       	nop
      38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_17>
      48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
      52:	00 00       	nop
      54:	e0 c0       	rjmp	.+448    	; 0x216 <__vector_21>
      56:	00 00       	nop
      58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__vector_32>
      82:	00 00       	nop
      84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
	...

00000094 <__ctors_start>:
      94:	fe 05       	cpc	r31, r14
      96:	d4 18       	sub	r13, r4

00000098 <__ctors_end>:
      98:	e0 18       	sub	r14, r0

0000009a <__dtors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	ea e8       	ldi	r30, 0x8A	; 138
      ae:	f2 e3       	ldi	r31, 0x32	; 50
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a8 3e       	cpi	r26, 0xE8	; 232
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	23 e0       	ldi	r18, 0x03	; 3
      c2:	a8 ee       	ldi	r26, 0xE8	; 232
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a8 35       	cpi	r26, 0x58	; 88
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>

000000d0 <__do_global_ctors>:
      d0:	10 e0       	ldi	r17, 0x00	; 0
      d2:	c8 e9       	ldi	r28, 0x98	; 152
      d4:	d0 e0       	ldi	r29, 0x00	; 0
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	06 c0       	rjmp	.+12     	; 0xe6 <__do_global_ctors+0x16>
      da:	22 97       	sbiw	r28, 0x02	; 2
      dc:	01 09       	sbc	r16, r1
      de:	fe 01       	movw	r30, r28
      e0:	0b bf       	out	0x3b, r16	; 59
      e2:	0e 94 18 19 	call	0x3230	; 0x3230 <__tablejump_elpm__>
      e6:	c4 39       	cpi	r28, 0x94	; 148
      e8:	d1 07       	cpc	r29, r17
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	08 07       	cpc	r16, r24
      ee:	a9 f7       	brne	.-22     	; 0xda <__do_global_ctors+0xa>
      f0:	0e 94 9f 10 	call	0x213e	; 0x213e <main>
      f4:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__do_global_dtors>

000000f8 <__bad_interrupt>:
      f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	00 d0       	rcall	.+0      	; 0x100 <_ZN5PrintC1Ev+0x6>
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	89 81       	ldd	r24, Y+1	; 0x01
     10a:	9a 81       	ldd	r25, Y+2	; 0x02
     10c:	23 ee       	ldi	r18, 0xE3	; 227
     10e:	31 e0       	ldi	r19, 0x01	; 1
     110:	fc 01       	movw	r30, r24
     112:	31 83       	std	Z+1, r19	; 0x01
     114:	20 83       	st	Z, r18
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	9a 81       	ldd	r25, Y+2	; 0x02
     11a:	fc 01       	movw	r30, r24
     11c:	13 82       	std	Z+3, r1	; 0x03
     11e:	12 82       	std	Z+2, r1	; 0x02
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <_ZN6StreamC1Ev+0x6>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	9a 83       	std	Y+2, r25	; 0x02
     136:	89 83       	std	Y+1, r24	; 0x01
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	9a 81       	ldd	r25, Y+2	; 0x02
     13c:	de df       	rcall	.-68     	; 0xfa <_ZN5PrintC1Ev>
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	23 ed       	ldi	r18, 0xD3	; 211
     144:	31 e0       	ldi	r19, 0x01	; 1
     146:	fc 01       	movw	r30, r24
     148:	31 83       	std	Z+1, r19	; 0x01
     14a:	20 83       	st	Z, r18
     14c:	29 81       	ldd	r18, Y+1	; 0x01
     14e:	3a 81       	ldd	r19, Y+2	; 0x02
     150:	88 ee       	ldi	r24, 0xE8	; 232
     152:	93 e0       	ldi	r25, 0x03	; 3
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	84 83       	std	Z+4, r24	; 0x04
     15c:	95 83       	std	Z+5, r25	; 0x05
     15e:	a6 83       	std	Z+6, r26	; 0x06
     160:	b7 83       	std	Z+7, r27	; 0x07
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <_ZN14HardwareSerial4peekEv>:
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *udr,
      uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x);
    void begin(long);
    int available(void);
    int peek(void) { return 0; } // SCL20121009 N.B - placeholder - needs to be implemented
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <_ZN14HardwareSerial4peekEv+0x6>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <_Z10store_charhP11ring_buffer>:
ring_buffer rx_buffer = { { 0 }, 0, 0 };
ring_buffer rx_buffer1 = { { 0 }, 0, 0 };


inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	00 d0       	rcall	.+0      	; 0x18e <_Z10store_charhP11ring_buffer+0x6>
     18e:	00 d0       	rcall	.+0      	; 0x190 <_Z10store_charhP11ring_buffer+0x8>
     190:	1f 92       	push	r1
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	8b 83       	std	Y+3, r24	; 0x03
     198:	7d 83       	std	Y+5, r23	; 0x05
     19a:	6c 83       	std	Y+4, r22	; 0x04
  int i = (rx_buffer->head + 1) % RX_BUFFER_SIZE;
     19c:	8c 81       	ldd	r24, Y+4	; 0x04
     19e:	9d 81       	ldd	r25, Y+5	; 0x05
     1a0:	80 58       	subi	r24, 0x80	; 128
     1a2:	9f 4f       	sbci	r25, 0xFF	; 255
     1a4:	fc 01       	movw	r30, r24
     1a6:	80 81       	ld	r24, Z
     1a8:	91 81       	ldd	r25, Z+1	; 0x01
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	8f 77       	andi	r24, 0x7F	; 127
     1ae:	90 78       	andi	r25, 0x80	; 128
     1b0:	99 23       	and	r25, r25
     1b2:	24 f4       	brge	.+8      	; 0x1bc <_Z10store_charhP11ring_buffer+0x34>
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	80 68       	ori	r24, 0x80	; 128
     1b8:	9f 6f       	ori	r25, 0xFF	; 255
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	9d 81       	ldd	r25, Y+5	; 0x05
     1c4:	8e 57       	subi	r24, 0x7E	; 126
     1c6:	9f 4f       	sbci	r25, 0xFF	; 255
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 81       	ld	r18, Z
     1cc:	31 81       	ldd	r19, Z+1	; 0x01
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	9a 81       	ldd	r25, Y+2	; 0x02
     1d2:	28 17       	cp	r18, r24
     1d4:	39 07       	cpc	r19, r25
     1d6:	b9 f0       	breq	.+46     	; 0x206 <_Z10store_charhP11ring_buffer+0x7e>
    rx_buffer->buffer[rx_buffer->head] = c;
     1d8:	8c 81       	ldd	r24, Y+4	; 0x04
     1da:	9d 81       	ldd	r25, Y+5	; 0x05
     1dc:	80 58       	subi	r24, 0x80	; 128
     1de:	9f 4f       	sbci	r25, 0xFF	; 255
     1e0:	fc 01       	movw	r30, r24
     1e2:	80 81       	ld	r24, Z
     1e4:	91 81       	ldd	r25, Z+1	; 0x01
     1e6:	2c 81       	ldd	r18, Y+4	; 0x04
     1e8:	3d 81       	ldd	r19, Y+5	; 0x05
     1ea:	82 0f       	add	r24, r18
     1ec:	93 1f       	adc	r25, r19
     1ee:	2b 81       	ldd	r18, Y+3	; 0x03
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
    rx_buffer->head = i;
     1f4:	8c 81       	ldd	r24, Y+4	; 0x04
     1f6:	9d 81       	ldd	r25, Y+5	; 0x05
     1f8:	80 58       	subi	r24, 0x80	; 128
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	3a 81       	ldd	r19, Y+2	; 0x02
     200:	fc 01       	movw	r30, r24
     202:	31 83       	std	Z+1, r19	; 0x01
     204:	20 83       	st	Z, r18
  }
}
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <__vector_21>:


SIGNAL(SIG_USART0_RECV)
{
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	00 90 5f 00 	lds	r0, 0x005F
     21e:	0f 92       	push	r0
     220:	11 24       	eor	r1, r1
     222:	00 90 5b 00 	lds	r0, 0x005B
     226:	0f 92       	push	r0
     228:	2f 93       	push	r18
     22a:	3f 93       	push	r19
     22c:	4f 93       	push	r20
     22e:	5f 93       	push	r21
     230:	6f 93       	push	r22
     232:	7f 93       	push	r23
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	af 93       	push	r26
     23a:	bf 93       	push	r27
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	1f 92       	push	r1
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
  unsigned char c = UDR0;
     24a:	86 ec       	ldi	r24, 0xC6	; 198
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	89 83       	std	Y+1, r24	; 0x01
  store_char(c, &rx_buffer);
     254:	68 ee       	ldi	r22, 0xE8	; 232
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	96 df       	rcall	.-212    	; 0x188 <_Z10store_charhP11ring_buffer>
     25c:	0f 90       	pop	r0
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	ff 91       	pop	r31
     264:	ef 91       	pop	r30
     266:	bf 91       	pop	r27
     268:	af 91       	pop	r26
     26a:	9f 91       	pop	r25
     26c:	8f 91       	pop	r24
     26e:	7f 91       	pop	r23
     270:	6f 91       	pop	r22
     272:	5f 91       	pop	r21
     274:	4f 91       	pop	r20
     276:	3f 91       	pop	r19
     278:	2f 91       	pop	r18
     27a:	0f 90       	pop	r0
     27c:	00 92 5b 00 	sts	0x005B, r0
     280:	0f 90       	pop	r0
     282:	00 92 5f 00 	sts	0x005F, r0
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <__vector_32>:

SIGNAL(SIG_USART1_RECV)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	00 90 5f 00 	lds	r0, 0x005F
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	00 90 5b 00 	lds	r0, 0x005B
     29c:	0f 92       	push	r0
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
  unsigned char c = UDR1;
     2c0:	8e ec       	ldi	r24, 0xCE	; 206
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	89 83       	std	Y+1, r24	; 0x01
  store_char(c, &rx_buffer1);
     2ca:	6c e6       	ldi	r22, 0x6C	; 108
     2cc:	72 e0       	ldi	r23, 0x02	; 2
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	5b df       	rcall	.-330    	; 0x188 <_Z10store_charhP11ring_buffer>
     2d2:	0f 90       	pop	r0
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	bf 91       	pop	r27
     2de:	af 91       	pop	r26
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	7f 91       	pop	r23
     2e6:	6f 91       	pop	r22
     2e8:	5f 91       	pop	r21
     2ea:	4f 91       	pop	r20
     2ec:	3f 91       	pop	r19
     2ee:	2f 91       	pop	r18
     2f0:	0f 90       	pop	r0
     2f2:	00 92 5b 00 	sts	0x005B, r0
     2f6:	0f 90       	pop	r0
     2f8:	00 92 5f 00 	sts	0x005F, r0
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
     302:	8f 92       	push	r8
     304:	af 92       	push	r10
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	60 97       	sbiw	r28, 0x10	; 16
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	9a 83       	std	Y+2, r25	; 0x02
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	7c 83       	std	Y+4, r23	; 0x04
     32c:	6b 83       	std	Y+3, r22	; 0x03
     32e:	5e 83       	std	Y+6, r21	; 0x06
     330:	4d 83       	std	Y+5, r20	; 0x05
     332:	38 87       	std	Y+8, r19	; 0x08
     334:	2f 83       	std	Y+7, r18	; 0x07
     336:	1a 87       	std	Y+10, r17	; 0x0a
     338:	09 87       	std	Y+9, r16	; 0x09
     33a:	fc 86       	std	Y+12, r15	; 0x0c
     33c:	eb 86       	std	Y+11, r14	; 0x0b
     33e:	de 86       	std	Y+14, r13	; 0x0e
     340:	cd 86       	std	Y+13, r12	; 0x0d
     342:	af 86       	std	Y+15, r10	; 0x0f
     344:	88 8a       	std	Y+16, r8	; 0x10
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	9a 81       	ldd	r25, Y+2	; 0x02
     34a:	ef de       	rcall	.-546    	; 0x12a <_ZN6StreamC1Ev>
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	23 ec       	ldi	r18, 0xC3	; 195
     352:	31 e0       	ldi	r19, 0x01	; 1
     354:	fc 01       	movw	r30, r24
     356:	31 83       	std	Z+1, r19	; 0x01
     358:	20 83       	st	Z, r18
     35a:	89 81       	ldd	r24, Y+1	; 0x01
{
  _rx_buffer = rx_buffer;
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	2b 81       	ldd	r18, Y+3	; 0x03
     360:	3c 81       	ldd	r19, Y+4	; 0x04
     362:	fc 01       	movw	r30, r24
     364:	35 87       	std	Z+13, r19	; 0x0d
     366:	24 87       	std	Z+12, r18	; 0x0c
     368:	89 81       	ldd	r24, Y+1	; 0x01
  _ubrrh = ubrrh;
     36a:	9a 81       	ldd	r25, Y+2	; 0x02
     36c:	2d 81       	ldd	r18, Y+5	; 0x05
     36e:	3e 81       	ldd	r19, Y+6	; 0x06
     370:	fc 01       	movw	r30, r24
     372:	37 87       	std	Z+15, r19	; 0x0f
     374:	26 87       	std	Z+14, r18	; 0x0e
     376:	89 81       	ldd	r24, Y+1	; 0x01
  _ubrrl = ubrrl;
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	2f 81       	ldd	r18, Y+7	; 0x07
     37c:	38 85       	ldd	r19, Y+8	; 0x08
     37e:	fc 01       	movw	r30, r24
     380:	31 8b       	std	Z+17, r19	; 0x11
     382:	20 8b       	std	Z+16, r18	; 0x10
     384:	89 81       	ldd	r24, Y+1	; 0x01
  _ucsra = ucsra;
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	29 85       	ldd	r18, Y+9	; 0x09
     38a:	3a 85       	ldd	r19, Y+10	; 0x0a
     38c:	fc 01       	movw	r30, r24
     38e:	33 8b       	std	Z+19, r19	; 0x13
     390:	22 8b       	std	Z+18, r18	; 0x12
     392:	89 81       	ldd	r24, Y+1	; 0x01
  _ucsrb = ucsrb;
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	2b 85       	ldd	r18, Y+11	; 0x0b
     398:	3c 85       	ldd	r19, Y+12	; 0x0c
     39a:	fc 01       	movw	r30, r24
     39c:	35 8b       	std	Z+21, r19	; 0x15
     39e:	24 8b       	std	Z+20, r18	; 0x14
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
  _udr = udr;
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	2d 85       	ldd	r18, Y+13	; 0x0d
     3a6:	3e 85       	ldd	r19, Y+14	; 0x0e
     3a8:	fc 01       	movw	r30, r24
     3aa:	37 8b       	std	Z+23, r19	; 0x17
     3ac:	26 8b       	std	Z+22, r18	; 0x16
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
  _rxen = rxen;
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	2f 85       	ldd	r18, Y+15	; 0x0f
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 8f       	std	Z+24, r18	; 0x18
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
  _txen = txen;
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	28 89       	ldd	r18, Y+16	; 0x10
     3be:	fc 01       	movw	r30, r24
     3c0:	21 8f       	std	Z+25, r18	; 0x19
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
  _rxcie = rxcie;
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3c8:	fc 01       	movw	r30, r24
     3ca:	22 8f       	std	Z+26, r18	; 0x1a
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
  _udre = udre;
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	2e 8d       	ldd	r18, Y+30	; 0x1e
     3d2:	fc 01       	movw	r30, r24
     3d4:	23 8f       	std	Z+27, r18	; 0x1b
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
  _u2x = u2x;
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	2f 8d       	ldd	r18, Y+31	; 0x1f
     3dc:	fc 01       	movw	r30, r24
     3de:	24 8f       	std	Z+28, r18	; 0x1c
     3e0:	60 96       	adiw	r28, 0x10	; 16
}
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	af 90       	pop	r10
     3fe:	8f 90       	pop	r8
     400:	08 95       	ret

00000402 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	cb 55       	subi	r28, 0x5B	; 91
     40c:	d1 09       	sbc	r29, r1
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	9f 83       	std	Y+7, r25	; 0x07
     41a:	8e 83       	std	Y+6, r24	; 0x06
     41c:	48 87       	std	Y+8, r20	; 0x08
     41e:	59 87       	std	Y+9, r21	; 0x09
     420:	6a 87       	std	Y+10, r22	; 0x0a
     422:	7b 87       	std	Y+11, r23	; 0x0b
  uint16_t baud_setting;
  bool use_u2x;

  // U2X mode is needed for baud rates higher than (CPU Hz / 16)
  if (baud > F_CPU / 16) {
     424:	88 85       	ldd	r24, Y+8	; 0x08
     426:	99 85       	ldd	r25, Y+9	; 0x09
     428:	aa 85       	ldd	r26, Y+10	; 0x0a
     42a:	bb 85       	ldd	r27, Y+11	; 0x0b
     42c:	81 34       	cpi	r24, 0x41	; 65
     42e:	22 e4       	ldi	r18, 0x42	; 66
     430:	92 07       	cpc	r25, r18
     432:	2f e0       	ldi	r18, 0x0F	; 15
     434:	a2 07       	cpc	r26, r18
     436:	b1 05       	cpc	r27, r1
     438:	18 f0       	brcs	.+6      	; 0x440 <_ZN14HardwareSerial5beginEl+0x3e>
    use_u2x = true;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	8b 83       	std	Y+3, r24	; 0x03
     43e:	c1 c1       	rjmp	.+898    	; 0x7c2 <_ZN14HardwareSerial5beginEl+0x3c0>
  } else {
    // figure out if U2X mode would allow for a better connection
    
    // calculate the percent difference between the baud-rate specified and
    // the real baud rate for both U2X and non-U2X mode (0-255 error percent)
    uint8_t nonu2x_baud_error = abs((int)(255-((F_CPU/(16*(((F_CPU/8/baud-1)/2)+1))*255)/baud)));
     440:	28 85       	ldd	r18, Y+8	; 0x08
     442:	39 85       	ldd	r19, Y+9	; 0x09
     444:	4a 85       	ldd	r20, Y+10	; 0x0a
     446:	5b 85       	ldd	r21, Y+11	; 0x0b
     448:	80 e8       	ldi	r24, 0x80	; 128
     44a:	94 e8       	ldi	r25, 0x84	; 132
     44c:	ae e1       	ldi	r26, 0x1E	; 30
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     458:	da 01       	movw	r26, r20
     45a:	c9 01       	movw	r24, r18
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	a1 09       	sbc	r26, r1
     460:	b1 09       	sbc	r27, r1
     462:	b6 95       	lsr	r27
     464:	a7 95       	ror	r26
     466:	97 95       	ror	r25
     468:	87 95       	ror	r24
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	a1 1d       	adc	r26, r1
     46e:	b1 1d       	adc	r27, r1
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	aa 1f       	adc	r26, r26
     476:	bb 1f       	adc	r27, r27
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	aa 1f       	adc	r26, r26
     47e:	bb 1f       	adc	r27, r27
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	aa 1f       	adc	r26, r26
     486:	bb 1f       	adc	r27, r27
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	aa 1f       	adc	r26, r26
     48e:	bb 1f       	adc	r27, r27
     490:	9c 01       	movw	r18, r24
     492:	ad 01       	movw	r20, r26
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	94 e2       	ldi	r25, 0x24	; 36
     498:	a4 ef       	ldi	r26, 0xF4	; 244
     49a:	b0 e0       	ldi	r27, 0x00	; 0
     49c:	bc 01       	movw	r22, r24
     49e:	cd 01       	movw	r24, r26
     4a0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     4a4:	da 01       	movw	r26, r20
     4a6:	c9 01       	movw	r24, r18
     4a8:	9c 01       	movw	r18, r24
     4aa:	ad 01       	movw	r20, r26
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	dc 01       	movw	r26, r24
     4b2:	0e 94 0e 19 	call	0x321c	; 0x321c <__muluhisi3>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	28 85       	ldd	r18, Y+8	; 0x08
     4bc:	39 85       	ldd	r19, Y+9	; 0x09
     4be:	4a 85       	ldd	r20, Y+10	; 0x0a
     4c0:	5b 85       	ldd	r21, Y+11	; 0x0b
     4c2:	bc 01       	movw	r22, r24
     4c4:	cd 01       	movw	r24, r26
     4c6:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     4ca:	da 01       	movw	r26, r20
     4cc:	c9 01       	movw	r24, r18
     4ce:	2f ef       	ldi	r18, 0xFF	; 255
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	a9 01       	movw	r20, r18
     4d4:	48 1b       	sub	r20, r24
     4d6:	59 0b       	sbc	r21, r25
     4d8:	ca 01       	movw	r24, r20
     4da:	18 16       	cp	r1, r24
     4dc:	19 06       	cpc	r1, r25
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <_ZN14HardwareSerial5beginEl+0xe0>
     4e0:	49 c0       	rjmp	.+146    	; 0x574 <_ZN14HardwareSerial5beginEl+0x172>
     4e2:	28 85       	ldd	r18, Y+8	; 0x08
     4e4:	39 85       	ldd	r19, Y+9	; 0x09
     4e6:	4a 85       	ldd	r20, Y+10	; 0x0a
     4e8:	5b 85       	ldd	r21, Y+11	; 0x0b
     4ea:	80 e8       	ldi	r24, 0x80	; 128
     4ec:	94 e8       	ldi	r25, 0x84	; 132
     4ee:	ae e1       	ldi	r26, 0x1E	; 30
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	bc 01       	movw	r22, r24
     4f4:	cd 01       	movw	r24, r26
     4f6:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     4fa:	da 01       	movw	r26, r20
     4fc:	c9 01       	movw	r24, r18
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	a1 09       	sbc	r26, r1
     502:	b1 09       	sbc	r27, r1
     504:	b6 95       	lsr	r27
     506:	a7 95       	ror	r26
     508:	97 95       	ror	r25
     50a:	87 95       	ror	r24
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	a1 1d       	adc	r26, r1
     510:	b1 1d       	adc	r27, r1
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	aa 1f       	adc	r26, r26
     518:	bb 1f       	adc	r27, r27
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	aa 1f       	adc	r26, r26
     520:	bb 1f       	adc	r27, r27
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	aa 1f       	adc	r26, r26
     528:	bb 1f       	adc	r27, r27
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	aa 1f       	adc	r26, r26
     530:	bb 1f       	adc	r27, r27
     532:	9c 01       	movw	r18, r24
     534:	ad 01       	movw	r20, r26
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	94 e2       	ldi	r25, 0x24	; 36
     53a:	a4 ef       	ldi	r26, 0xF4	; 244
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	bc 01       	movw	r22, r24
     540:	cd 01       	movw	r24, r26
     542:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     546:	da 01       	movw	r26, r20
     548:	c9 01       	movw	r24, r18
     54a:	9c 01       	movw	r18, r24
     54c:	ad 01       	movw	r20, r26
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	dc 01       	movw	r26, r24
     554:	0e 94 0e 19 	call	0x321c	; 0x321c <__muluhisi3>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	28 85       	ldd	r18, Y+8	; 0x08
     55e:	39 85       	ldd	r19, Y+9	; 0x09
     560:	4a 85       	ldd	r20, Y+10	; 0x0a
     562:	5b 85       	ldd	r21, Y+11	; 0x0b
     564:	bc 01       	movw	r22, r24
     566:	cd 01       	movw	r24, r26
     568:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     56c:	da 01       	movw	r26, r20
     56e:	c9 01       	movw	r24, r18
     570:	80 95       	com	r24
     572:	48 c0       	rjmp	.+144    	; 0x604 <_ZN14HardwareSerial5beginEl+0x202>
     574:	28 85       	ldd	r18, Y+8	; 0x08
     576:	39 85       	ldd	r19, Y+9	; 0x09
     578:	4a 85       	ldd	r20, Y+10	; 0x0a
     57a:	5b 85       	ldd	r21, Y+11	; 0x0b
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	94 e8       	ldi	r25, 0x84	; 132
     580:	ae e1       	ldi	r26, 0x1E	; 30
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     58c:	da 01       	movw	r26, r20
     58e:	c9 01       	movw	r24, r18
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	a1 09       	sbc	r26, r1
     594:	b1 09       	sbc	r27, r1
     596:	b6 95       	lsr	r27
     598:	a7 95       	ror	r26
     59a:	97 95       	ror	r25
     59c:	87 95       	ror	r24
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	a1 1d       	adc	r26, r1
     5a2:	b1 1d       	adc	r27, r1
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	aa 1f       	adc	r26, r26
     5aa:	bb 1f       	adc	r27, r27
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	aa 1f       	adc	r26, r26
     5b2:	bb 1f       	adc	r27, r27
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	aa 1f       	adc	r26, r26
     5ba:	bb 1f       	adc	r27, r27
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	aa 1f       	adc	r26, r26
     5c2:	bb 1f       	adc	r27, r27
     5c4:	9c 01       	movw	r18, r24
     5c6:	ad 01       	movw	r20, r26
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	94 e2       	ldi	r25, 0x24	; 36
     5cc:	a4 ef       	ldi	r26, 0xF4	; 244
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	bc 01       	movw	r22, r24
     5d2:	cd 01       	movw	r24, r26
     5d4:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     5d8:	da 01       	movw	r26, r20
     5da:	c9 01       	movw	r24, r18
     5dc:	9c 01       	movw	r18, r24
     5de:	ad 01       	movw	r20, r26
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	dc 01       	movw	r26, r24
     5e6:	0e 94 0e 19 	call	0x321c	; 0x321c <__muluhisi3>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	28 85       	ldd	r18, Y+8	; 0x08
     5f0:	39 85       	ldd	r19, Y+9	; 0x09
     5f2:	4a 85       	ldd	r20, Y+10	; 0x0a
     5f4:	5b 85       	ldd	r21, Y+11	; 0x0b
     5f6:	bc 01       	movw	r22, r24
     5f8:	cd 01       	movw	r24, r26
     5fa:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     5fe:	da 01       	movw	r26, r20
     600:	c9 01       	movw	r24, r18
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t u2x_baud_error = abs((int)(255-((F_CPU/(8*(((F_CPU/4/baud-1)/2)+1))*255)/baud)));
     606:	28 85       	ldd	r18, Y+8	; 0x08
     608:	39 85       	ldd	r19, Y+9	; 0x09
     60a:	4a 85       	ldd	r20, Y+10	; 0x0a
     60c:	5b 85       	ldd	r21, Y+11	; 0x0b
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	99 e0       	ldi	r25, 0x09	; 9
     612:	ad e3       	ldi	r26, 0x3D	; 61
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	bc 01       	movw	r22, r24
     618:	cd 01       	movw	r24, r26
     61a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     61e:	da 01       	movw	r26, r20
     620:	c9 01       	movw	r24, r18
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	a1 09       	sbc	r26, r1
     626:	b1 09       	sbc	r27, r1
     628:	b6 95       	lsr	r27
     62a:	a7 95       	ror	r26
     62c:	97 95       	ror	r25
     62e:	87 95       	ror	r24
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	a1 1d       	adc	r26, r1
     634:	b1 1d       	adc	r27, r1
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	aa 1f       	adc	r26, r26
     63c:	bb 1f       	adc	r27, r27
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	aa 1f       	adc	r26, r26
     644:	bb 1f       	adc	r27, r27
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	aa 1f       	adc	r26, r26
     64c:	bb 1f       	adc	r27, r27
     64e:	9c 01       	movw	r18, r24
     650:	ad 01       	movw	r20, r26
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	94 e2       	ldi	r25, 0x24	; 36
     656:	a4 ef       	ldi	r26, 0xF4	; 244
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	bc 01       	movw	r22, r24
     65c:	cd 01       	movw	r24, r26
     65e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     662:	da 01       	movw	r26, r20
     664:	c9 01       	movw	r24, r18
     666:	9c 01       	movw	r18, r24
     668:	ad 01       	movw	r20, r26
     66a:	8f ef       	ldi	r24, 0xFF	; 255
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	dc 01       	movw	r26, r24
     670:	0e 94 0e 19 	call	0x321c	; 0x321c <__muluhisi3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	28 85       	ldd	r18, Y+8	; 0x08
     67a:	39 85       	ldd	r19, Y+9	; 0x09
     67c:	4a 85       	ldd	r20, Y+10	; 0x0a
     67e:	5b 85       	ldd	r21, Y+11	; 0x0b
     680:	bc 01       	movw	r22, r24
     682:	cd 01       	movw	r24, r26
     684:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     688:	da 01       	movw	r26, r20
     68a:	c9 01       	movw	r24, r18
     68c:	2f ef       	ldi	r18, 0xFF	; 255
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	f9 01       	movw	r30, r18
     692:	e8 1b       	sub	r30, r24
     694:	f9 0b       	sbc	r31, r25
     696:	cf 01       	movw	r24, r30
     698:	18 16       	cp	r1, r24
     69a:	19 06       	cpc	r1, r25
     69c:	0c f0       	brlt	.+2      	; 0x6a0 <_ZN14HardwareSerial5beginEl+0x29e>
     69e:	45 c0       	rjmp	.+138    	; 0x72a <_ZN14HardwareSerial5beginEl+0x328>
     6a0:	28 85       	ldd	r18, Y+8	; 0x08
     6a2:	39 85       	ldd	r19, Y+9	; 0x09
     6a4:	4a 85       	ldd	r20, Y+10	; 0x0a
     6a6:	5b 85       	ldd	r21, Y+11	; 0x0b
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	99 e0       	ldi	r25, 0x09	; 9
     6ac:	ad e3       	ldi	r26, 0x3D	; 61
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     6b8:	da 01       	movw	r26, r20
     6ba:	c9 01       	movw	r24, r18
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	a1 09       	sbc	r26, r1
     6c0:	b1 09       	sbc	r27, r1
     6c2:	b6 95       	lsr	r27
     6c4:	a7 95       	ror	r26
     6c6:	97 95       	ror	r25
     6c8:	87 95       	ror	r24
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	a1 1d       	adc	r26, r1
     6ce:	b1 1d       	adc	r27, r1
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	aa 1f       	adc	r26, r26
     6d6:	bb 1f       	adc	r27, r27
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	aa 1f       	adc	r26, r26
     6de:	bb 1f       	adc	r27, r27
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	aa 1f       	adc	r26, r26
     6e6:	bb 1f       	adc	r27, r27
     6e8:	9c 01       	movw	r18, r24
     6ea:	ad 01       	movw	r20, r26
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	94 e2       	ldi	r25, 0x24	; 36
     6f0:	a4 ef       	ldi	r26, 0xF4	; 244
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	bc 01       	movw	r22, r24
     6f6:	cd 01       	movw	r24, r26
     6f8:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     6fc:	da 01       	movw	r26, r20
     6fe:	c9 01       	movw	r24, r18
     700:	9c 01       	movw	r18, r24
     702:	ad 01       	movw	r20, r26
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	dc 01       	movw	r26, r24
     70a:	0e 94 0e 19 	call	0x321c	; 0x321c <__muluhisi3>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	28 85       	ldd	r18, Y+8	; 0x08
     714:	39 85       	ldd	r19, Y+9	; 0x09
     716:	4a 85       	ldd	r20, Y+10	; 0x0a
     718:	5b 85       	ldd	r21, Y+11	; 0x0b
     71a:	bc 01       	movw	r22, r24
     71c:	cd 01       	movw	r24, r26
     71e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     722:	da 01       	movw	r26, r20
     724:	c9 01       	movw	r24, r18
     726:	80 95       	com	r24
     728:	44 c0       	rjmp	.+136    	; 0x7b2 <_ZN14HardwareSerial5beginEl+0x3b0>
     72a:	28 85       	ldd	r18, Y+8	; 0x08
     72c:	39 85       	ldd	r19, Y+9	; 0x09
     72e:	4a 85       	ldd	r20, Y+10	; 0x0a
     730:	5b 85       	ldd	r21, Y+11	; 0x0b
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	99 e0       	ldi	r25, 0x09	; 9
     736:	ad e3       	ldi	r26, 0x3D	; 61
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	bc 01       	movw	r22, r24
     73c:	cd 01       	movw	r24, r26
     73e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     742:	da 01       	movw	r26, r20
     744:	c9 01       	movw	r24, r18
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	a1 09       	sbc	r26, r1
     74a:	b1 09       	sbc	r27, r1
     74c:	b6 95       	lsr	r27
     74e:	a7 95       	ror	r26
     750:	97 95       	ror	r25
     752:	87 95       	ror	r24
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	a1 1d       	adc	r26, r1
     758:	b1 1d       	adc	r27, r1
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	aa 1f       	adc	r26, r26
     760:	bb 1f       	adc	r27, r27
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	aa 1f       	adc	r26, r26
     768:	bb 1f       	adc	r27, r27
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	aa 1f       	adc	r26, r26
     770:	bb 1f       	adc	r27, r27
     772:	9c 01       	movw	r18, r24
     774:	ad 01       	movw	r20, r26
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	94 e2       	ldi	r25, 0x24	; 36
     77a:	a4 ef       	ldi	r26, 0xF4	; 244
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	bc 01       	movw	r22, r24
     780:	cd 01       	movw	r24, r26
     782:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     786:	da 01       	movw	r26, r20
     788:	c9 01       	movw	r24, r18
     78a:	9c 01       	movw	r18, r24
     78c:	ad 01       	movw	r20, r26
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	dc 01       	movw	r26, r24
     794:	0e 94 0e 19 	call	0x321c	; 0x321c <__muluhisi3>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	28 85       	ldd	r18, Y+8	; 0x08
     79e:	39 85       	ldd	r19, Y+9	; 0x09
     7a0:	4a 85       	ldd	r20, Y+10	; 0x0a
     7a2:	5b 85       	ldd	r21, Y+11	; 0x0b
     7a4:	bc 01       	movw	r22, r24
     7a6:	cd 01       	movw	r24, r26
     7a8:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     7ac:	da 01       	movw	r26, r20
     7ae:	c9 01       	movw	r24, r18
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	8d 83       	std	Y+5, r24	; 0x05
    
    // prefer non-U2X mode because it handles clock skew better
    use_u2x = (nonu2x_baud_error > u2x_baud_error);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	2c 81       	ldd	r18, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	92 17       	cp	r25, r18
     7bc:	08 f0       	brcs	.+2      	; 0x7c0 <_ZN14HardwareSerial5beginEl+0x3be>
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	8b 83       	std	Y+3, r24	; 0x03
  }
  
  if (use_u2x) {
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	88 23       	and	r24, r24
     7c6:	61 f1       	breq	.+88     	; 0x820 <_ZN14HardwareSerial5beginEl+0x41e>
    *_ucsra = 1 << _u2x;
     7c8:	8e 81       	ldd	r24, Y+6	; 0x06
     7ca:	9f 81       	ldd	r25, Y+7	; 0x07
     7cc:	fc 01       	movw	r30, r24
     7ce:	82 89       	ldd	r24, Z+18	; 0x12
     7d0:	93 89       	ldd	r25, Z+19	; 0x13
     7d2:	2e 81       	ldd	r18, Y+6	; 0x06
     7d4:	3f 81       	ldd	r19, Y+7	; 0x07
     7d6:	f9 01       	movw	r30, r18
     7d8:	24 8d       	ldd	r18, Z+28	; 0x1c
     7da:	42 2f       	mov	r20, r18
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	21 e0       	ldi	r18, 0x01	; 1
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <_ZN14HardwareSerial5beginEl+0x3e6>
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	4a 95       	dec	r20
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <_ZN14HardwareSerial5beginEl+0x3e2>
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     7f0:	28 85       	ldd	r18, Y+8	; 0x08
     7f2:	39 85       	ldd	r19, Y+9	; 0x09
     7f4:	4a 85       	ldd	r20, Y+10	; 0x0a
     7f6:	5b 85       	ldd	r21, Y+11	; 0x0b
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	99 e0       	ldi	r25, 0x09	; 9
     7fc:	ad e3       	ldi	r26, 0x3D	; 61
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	bc 01       	movw	r22, r24
     802:	cd 01       	movw	r24, r26
     804:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     808:	da 01       	movw	r26, r20
     80a:	c9 01       	movw	r24, r18
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	a1 09       	sbc	r26, r1
     810:	b1 09       	sbc	r27, r1
     812:	b6 95       	lsr	r27
     814:	a7 95       	ror	r26
     816:	97 95       	ror	r25
     818:	87 95       	ror	r24
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	1e c0       	rjmp	.+60     	; 0x85c <_ZN14HardwareSerial5beginEl+0x45a>
  } else {
    *_ucsra = 0;
     820:	8e 81       	ldd	r24, Y+6	; 0x06
     822:	9f 81       	ldd	r25, Y+7	; 0x07
     824:	fc 01       	movw	r30, r24
     826:	82 89       	ldd	r24, Z+18	; 0x12
     828:	93 89       	ldd	r25, Z+19	; 0x13
     82a:	fc 01       	movw	r30, r24
     82c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     82e:	28 85       	ldd	r18, Y+8	; 0x08
     830:	39 85       	ldd	r19, Y+9	; 0x09
     832:	4a 85       	ldd	r20, Y+10	; 0x0a
     834:	5b 85       	ldd	r21, Y+11	; 0x0b
     836:	80 e8       	ldi	r24, 0x80	; 128
     838:	94 e8       	ldi	r25, 0x84	; 132
     83a:	ae e1       	ldi	r26, 0x1E	; 30
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	bc 01       	movw	r22, r24
     840:	cd 01       	movw	r24, r26
     842:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
     846:	da 01       	movw	r26, r20
     848:	c9 01       	movw	r24, r18
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	a1 09       	sbc	r26, r1
     84e:	b1 09       	sbc	r27, r1
     850:	b6 95       	lsr	r27
     852:	a7 95       	ror	r26
     854:	97 95       	ror	r25
     856:	87 95       	ror	r24
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     85c:	8e 81       	ldd	r24, Y+6	; 0x06
     85e:	9f 81       	ldd	r25, Y+7	; 0x07
     860:	fc 01       	movw	r30, r24
     862:	86 85       	ldd	r24, Z+14	; 0x0e
     864:	97 85       	ldd	r25, Z+15	; 0x0f
     866:	29 81       	ldd	r18, Y+1	; 0x01
     868:	3a 81       	ldd	r19, Y+2	; 0x02
     86a:	23 2f       	mov	r18, r19
     86c:	33 27       	eor	r19, r19
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
  *_ubrrl = baud_setting;
     872:	8e 81       	ldd	r24, Y+6	; 0x06
     874:	9f 81       	ldd	r25, Y+7	; 0x07
     876:	fc 01       	movw	r30, r24
     878:	80 89       	ldd	r24, Z+16	; 0x10
     87a:	91 89       	ldd	r25, Z+17	; 0x11
     87c:	29 81       	ldd	r18, Y+1	; 0x01
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     882:	8e 81       	ldd	r24, Y+6	; 0x06
     884:	9f 81       	ldd	r25, Y+7	; 0x07
     886:	fc 01       	movw	r30, r24
     888:	84 89       	ldd	r24, Z+20	; 0x14
     88a:	95 89       	ldd	r25, Z+21	; 0x15
     88c:	2e 81       	ldd	r18, Y+6	; 0x06
     88e:	3f 81       	ldd	r19, Y+7	; 0x07
     890:	f9 01       	movw	r30, r18
     892:	24 89       	ldd	r18, Z+20	; 0x14
     894:	35 89       	ldd	r19, Z+21	; 0x15
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	62 2f       	mov	r22, r18
     89c:	2e 81       	ldd	r18, Y+6	; 0x06
     89e:	3f 81       	ldd	r19, Y+7	; 0x07
     8a0:	f9 01       	movw	r30, r18
     8a2:	20 8d       	ldd	r18, Z+24	; 0x18
     8a4:	42 2f       	mov	r20, r18
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <_ZN14HardwareSerial5beginEl+0x4b0>
     8ae:	22 0f       	add	r18, r18
     8b0:	33 1f       	adc	r19, r19
     8b2:	4a 95       	dec	r20
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <_ZN14HardwareSerial5beginEl+0x4ac>
     8b6:	26 2b       	or	r18, r22
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
     8bc:	8e 81       	ldd	r24, Y+6	; 0x06
     8be:	9f 81       	ldd	r25, Y+7	; 0x07
     8c0:	fc 01       	movw	r30, r24
     8c2:	84 89       	ldd	r24, Z+20	; 0x14
     8c4:	95 89       	ldd	r25, Z+21	; 0x15
     8c6:	2e 81       	ldd	r18, Y+6	; 0x06
     8c8:	3f 81       	ldd	r19, Y+7	; 0x07
     8ca:	f9 01       	movw	r30, r18
     8cc:	24 89       	ldd	r18, Z+20	; 0x14
     8ce:	35 89       	ldd	r19, Z+21	; 0x15
     8d0:	f9 01       	movw	r30, r18
     8d2:	20 81       	ld	r18, Z
     8d4:	62 2f       	mov	r22, r18
     8d6:	2e 81       	ldd	r18, Y+6	; 0x06
     8d8:	3f 81       	ldd	r19, Y+7	; 0x07
     8da:	f9 01       	movw	r30, r18
     8dc:	21 8d       	ldd	r18, Z+25	; 0x19
     8de:	42 2f       	mov	r20, r18
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <_ZN14HardwareSerial5beginEl+0x4ea>
     8e8:	22 0f       	add	r18, r18
     8ea:	33 1f       	adc	r19, r19
     8ec:	4a 95       	dec	r20
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <_ZN14HardwareSerial5beginEl+0x4e6>
     8f0:	26 2b       	or	r18, r22
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
     8f6:	8e 81       	ldd	r24, Y+6	; 0x06
     8f8:	9f 81       	ldd	r25, Y+7	; 0x07
     8fa:	fc 01       	movw	r30, r24
     8fc:	84 89       	ldd	r24, Z+20	; 0x14
     8fe:	95 89       	ldd	r25, Z+21	; 0x15
     900:	2e 81       	ldd	r18, Y+6	; 0x06
     902:	3f 81       	ldd	r19, Y+7	; 0x07
     904:	f9 01       	movw	r30, r18
     906:	24 89       	ldd	r18, Z+20	; 0x14
     908:	35 89       	ldd	r19, Z+21	; 0x15
     90a:	f9 01       	movw	r30, r18
     90c:	20 81       	ld	r18, Z
     90e:	62 2f       	mov	r22, r18
     910:	2e 81       	ldd	r18, Y+6	; 0x06
     912:	3f 81       	ldd	r19, Y+7	; 0x07
     914:	f9 01       	movw	r30, r18
     916:	22 8d       	ldd	r18, Z+26	; 0x1a
     918:	42 2f       	mov	r20, r18
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	04 2e       	mov	r0, r20
     922:	02 c0       	rjmp	.+4      	; 0x928 <_ZN14HardwareSerial5beginEl+0x526>
     924:	22 0f       	add	r18, r18
     926:	33 1f       	adc	r19, r19
     928:	0a 94       	dec	r0
     92a:	e2 f7       	brpl	.-8      	; 0x924 <_ZN14HardwareSerial5beginEl+0x522>
     92c:	26 2b       	or	r18, r22
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
}
     932:	c5 5a       	subi	r28, 0xA5	; 165
     934:	df 4f       	sbci	r29, 0xFF	; 255
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	00 d0       	rcall	.+0      	; 0x94c <_ZN14HardwareSerial9availableEv+0x6>
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	89 83       	std	Y+1, r24	; 0x01
  return (int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	fc 01       	movw	r30, r24
     95a:	84 85       	ldd	r24, Z+12	; 0x0c
     95c:	95 85       	ldd	r25, Z+13	; 0x0d
     95e:	80 58       	subi	r24, 0x80	; 128
     960:	9f 4f       	sbci	r25, 0xFF	; 255
     962:	fc 01       	movw	r30, r24
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	9c 01       	movw	r18, r24
     96a:	20 58       	subi	r18, 0x80	; 128
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	fc 01       	movw	r30, r24
     974:	84 85       	ldd	r24, Z+12	; 0x0c
     976:	95 85       	ldd	r25, Z+13	; 0x0d
     978:	8e 57       	subi	r24, 0x7E	; 126
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	fc 01       	movw	r30, r24
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	a9 01       	movw	r20, r18
     984:	48 1b       	sub	r20, r24
     986:	59 0b       	sbc	r21, r25
     988:	ca 01       	movw	r24, r20
     98a:	8f 77       	andi	r24, 0x7F	; 127
     98c:	90 78       	andi	r25, 0x80	; 128
     98e:	99 23       	and	r25, r25
     990:	24 f4       	brge	.+8      	; 0x99a <_ZN14HardwareSerial9availableEv+0x54>
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	80 68       	ori	r24, 0x80	; 128
     996:	9f 6f       	ori	r25, 0xFF	; 255
     998:	01 96       	adiw	r24, 0x01	; 1
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <_ZN14HardwareSerial4readEv+0x6>
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	9b 83       	std	Y+3, r25	; 0x03
     9b2:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	9b 81       	ldd	r25, Y+3	; 0x03
     9b8:	fc 01       	movw	r30, r24
     9ba:	84 85       	ldd	r24, Z+12	; 0x0c
     9bc:	95 85       	ldd	r25, Z+13	; 0x0d
     9be:	80 58       	subi	r24, 0x80	; 128
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 81       	ld	r18, Z
     9c6:	31 81       	ldd	r19, Z+1	; 0x01
     9c8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ca:	9b 81       	ldd	r25, Y+3	; 0x03
     9cc:	fc 01       	movw	r30, r24
     9ce:	84 85       	ldd	r24, Z+12	; 0x0c
     9d0:	95 85       	ldd	r25, Z+13	; 0x0d
     9d2:	8e 57       	subi	r24, 0x7E	; 126
     9d4:	9f 4f       	sbci	r25, 0xFF	; 255
     9d6:	fc 01       	movw	r30, r24
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <_ZN14HardwareSerial4readEv+0x44>
    return -1;
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
     9e6:	36 c0       	rjmp	.+108    	; 0xa54 <_ZN14HardwareSerial4readEv+0xb0>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	9b 81       	ldd	r25, Y+3	; 0x03
     9ec:	fc 01       	movw	r30, r24
     9ee:	24 85       	ldd	r18, Z+12	; 0x0c
     9f0:	35 85       	ldd	r19, Z+13	; 0x0d
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	9b 81       	ldd	r25, Y+3	; 0x03
     9f6:	fc 01       	movw	r30, r24
     9f8:	84 85       	ldd	r24, Z+12	; 0x0c
     9fa:	95 85       	ldd	r25, Z+13	; 0x0d
     9fc:	8e 57       	subi	r24, 0x7E	; 126
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
     a00:	fc 01       	movw	r30, r24
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	82 0f       	add	r24, r18
     a08:	93 1f       	adc	r25, r19
     a0a:	fc 01       	movw	r30, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	9b 81       	ldd	r25, Y+3	; 0x03
     a14:	fc 01       	movw	r30, r24
     a16:	44 85       	ldd	r20, Z+12	; 0x0c
     a18:	55 85       	ldd	r21, Z+13	; 0x0d
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	9b 81       	ldd	r25, Y+3	; 0x03
     a1e:	fc 01       	movw	r30, r24
     a20:	84 85       	ldd	r24, Z+12	; 0x0c
     a22:	95 85       	ldd	r25, Z+13	; 0x0d
     a24:	8e 57       	subi	r24, 0x7E	; 126
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	8f 77       	andi	r24, 0x7F	; 127
     a32:	90 78       	andi	r25, 0x80	; 128
     a34:	99 23       	and	r25, r25
     a36:	24 f4       	brge	.+8      	; 0xa40 <_ZN14HardwareSerial4readEv+0x9c>
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	80 68       	ori	r24, 0x80	; 128
     a3c:	9f 6f       	ori	r25, 0xFF	; 255
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	9c 01       	movw	r18, r24
     a42:	ca 01       	movw	r24, r20
     a44:	8e 57       	subi	r24, 0x7E	; 126
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	fc 01       	movw	r30, r24
     a4a:	31 83       	std	Z+1, r19	; 0x01
     a4c:	20 83       	st	Z, r18
    return c;
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <_ZN14HardwareSerial5flushEv+0x6>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	fc 01       	movw	r30, r24
     a74:	84 85       	ldd	r24, Z+12	; 0x0c
     a76:	95 85       	ldd	r25, Z+13	; 0x0d
     a78:	29 81       	ldd	r18, Y+1	; 0x01
     a7a:	3a 81       	ldd	r19, Y+2	; 0x02
     a7c:	f9 01       	movw	r30, r18
     a7e:	24 85       	ldd	r18, Z+12	; 0x0c
     a80:	35 85       	ldd	r19, Z+13	; 0x0d
     a82:	2e 57       	subi	r18, 0x7E	; 126
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	f9 01       	movw	r30, r18
     a88:	20 81       	ld	r18, Z
     a8a:	31 81       	ldd	r19, Z+1	; 0x01
     a8c:	80 58       	subi	r24, 0x80	; 128
     a8e:	9f 4f       	sbci	r25, 0xFF	; 255
     a90:	fc 01       	movw	r30, r24
     a92:	31 83       	std	Z+1, r19	; 0x01
     a94:	20 83       	st	Z, r18
}
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <_ZN14HardwareSerial5writeEh+0x6>
     aa6:	1f 92       	push	r1
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	6b 83       	std	Y+3, r22	; 0x03
  while (!((*_ucsra) & (1 << _udre)))
     ab2:	00 00       	nop
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	9a 81       	ldd	r25, Y+2	; 0x02
     ab8:	fc 01       	movw	r30, r24
     aba:	82 89       	ldd	r24, Z+18	; 0x12
     abc:	93 89       	ldd	r25, Z+19	; 0x13
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	f9 01       	movw	r30, r18
     acc:	23 8d       	ldd	r18, Z+27	; 0x1b
     ace:	22 2f       	mov	r18, r18
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <_ZN14HardwareSerial5writeEh+0x38>
     ad4:	95 95       	asr	r25
     ad6:	87 95       	ror	r24
     ad8:	2a 95       	dec	r18
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <_ZN14HardwareSerial5writeEh+0x34>
     adc:	81 70       	andi	r24, 0x01	; 1
     ade:	99 27       	eor	r25, r25
     ae0:	21 e0       	ldi	r18, 0x01	; 1
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	09 f0       	breq	.+2      	; 0xae8 <_ZN14HardwareSerial5writeEh+0x48>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	22 23       	and	r18, r18
     aea:	21 f7       	brne	.-56     	; 0xab4 <_ZN14HardwareSerial5writeEh+0x14>
    ;

  *_udr = c;
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	fc 01       	movw	r30, r24
     af2:	86 89       	ldd	r24, Z+22	; 0x16
     af4:	97 89       	ldd	r25, Z+23	; 0x17
     af6:	2b 81       	ldd	r18, Y+3	; 0x03
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18

  return 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
}
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////


HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
HardwareSerial Serial1(&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
     b0c:	8f 92       	push	r8
     b0e:	af 92       	push	r10
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	00 d0       	rcall	.+0      	; 0xb22 <_Z41__static_initialization_and_destruction_0ii+0x16>
     b22:	00 d0       	rcall	.+0      	; 0xb24 <_Z41__static_initialization_and_destruction_0ii+0x18>
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	7c 83       	std	Y+4, r23	; 0x04
     b2e:	6b 83       	std	Y+3, r22	; 0x03
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	9a 81       	ldd	r25, Y+2	; 0x02
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	91 05       	cpc	r25, r1
     b38:	09 f0       	breq	.+2      	; 0xb3c <_Z41__static_initialization_and_destruction_0ii+0x30>
     b3a:	51 c0       	rjmp	.+162    	; 0xbde <_Z41__static_initialization_and_destruction_0ii+0xd2>
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	8f 3f       	cpi	r24, 0xFF	; 255
     b42:	2f ef       	ldi	r18, 0xFF	; 255
     b44:	92 07       	cpc	r25, r18
     b46:	09 f0       	breq	.+2      	; 0xb4a <_Z41__static_initialization_and_destruction_0ii+0x3e>
     b48:	4a c0       	rjmp	.+148    	; 0xbde <_Z41__static_initialization_and_destruction_0ii+0xd2>
}

// Preinstantiate Objects //////////////////////////////////////////////////////


HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8f 93       	push	r24
     b4e:	85 e0       	ldi	r24, 0x05	; 5
     b50:	8f 93       	push	r24
     b52:	87 e0       	ldi	r24, 0x07	; 7
     b54:	8f 93       	push	r24
     b56:	0f 2e       	mov	r0, r31
     b58:	f3 e0       	ldi	r31, 0x03	; 3
     b5a:	8f 2e       	mov	r8, r31
     b5c:	f0 2d       	mov	r31, r0
     b5e:	68 94       	set
     b60:	aa 24       	eor	r10, r10
     b62:	a2 f8       	bld	r10, 2
     b64:	0f 2e       	mov	r0, r31
     b66:	f6 ec       	ldi	r31, 0xC6	; 198
     b68:	cf 2e       	mov	r12, r31
     b6a:	d1 2c       	mov	r13, r1
     b6c:	f0 2d       	mov	r31, r0
     b6e:	0f 2e       	mov	r0, r31
     b70:	f1 ec       	ldi	r31, 0xC1	; 193
     b72:	ef 2e       	mov	r14, r31
     b74:	f1 2c       	mov	r15, r1
     b76:	f0 2d       	mov	r31, r0
     b78:	00 ec       	ldi	r16, 0xC0	; 192
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	24 ec       	ldi	r18, 0xC4	; 196
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	45 ec       	ldi	r20, 0xC5	; 197
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	68 ee       	ldi	r22, 0xE8	; 232
     b86:	71 e0       	ldi	r23, 0x01	; 1
     b88:	80 ef       	ldi	r24, 0xF0	; 240
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	ba db       	rcall	.-2188   	; 0x302 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	81 e0       	ldi	r24, 0x01	; 1
HardwareSerial Serial1(&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
     b96:	8f 93       	push	r24
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	8f 93       	push	r24
     b9c:	87 e0       	ldi	r24, 0x07	; 7
     b9e:	8f 93       	push	r24
     ba0:	0f 2e       	mov	r0, r31
     ba2:	f3 e0       	ldi	r31, 0x03	; 3
     ba4:	8f 2e       	mov	r8, r31
     ba6:	f0 2d       	mov	r31, r0
     ba8:	68 94       	set
     baa:	aa 24       	eor	r10, r10
     bac:	a2 f8       	bld	r10, 2
     bae:	0f 2e       	mov	r0, r31
     bb0:	fe ec       	ldi	r31, 0xCE	; 206
     bb2:	cf 2e       	mov	r12, r31
     bb4:	d1 2c       	mov	r13, r1
     bb6:	f0 2d       	mov	r31, r0
     bb8:	0f 2e       	mov	r0, r31
     bba:	f9 ec       	ldi	r31, 0xC9	; 201
     bbc:	ef 2e       	mov	r14, r31
     bbe:	f1 2c       	mov	r15, r1
     bc0:	f0 2d       	mov	r31, r0
     bc2:	08 ec       	ldi	r16, 0xC8	; 200
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	2c ec       	ldi	r18, 0xCC	; 204
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	4d ec       	ldi	r20, 0xCD	; 205
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	6c e6       	ldi	r22, 0x6C	; 108
     bd0:	72 e0       	ldi	r23, 0x02	; 2
     bd2:	8d e0       	ldi	r24, 0x0D	; 13
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	95 db       	rcall	.-2262   	; 0x302 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	af 90       	pop	r10
     bf8:	8f 90       	pop	r8
     bfa:	08 95       	ret

00000bfc <_GLOBAL__sub_I_rx_buffer>:
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	6f ef       	ldi	r22, 0xFF	; 255
     c06:	7f ef       	ldi	r23, 0xFF	; 255
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	7f df       	rcall	.-258    	; 0xb0c <_Z41__static_initialization_and_destruction_0ii>
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <_ZN5Print5writeEPKc+0xa>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <_ZN5Print5writeEPKc+0xc>
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	7c 83       	std	Y+4, r23	; 0x04
     c2a:	6b 83       	std	Y+3, r22	; 0x03
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	02 96       	adiw	r24, 0x02	; 2
     c38:	fc 01       	movw	r30, r24
     c3a:	00 81       	ld	r16, Z
     c3c:	11 81       	ldd	r17, Z+1	; 0x01
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	0e 94 2b 19 	call	0x3256	; 0x3256 <strlen>
     c46:	ac 01       	movw	r20, r24
     c48:	2b 81       	ldd	r18, Y+3	; 0x03
     c4a:	3c 81       	ldd	r19, Y+4	; 0x04
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	b9 01       	movw	r22, r18
     c52:	f8 01       	movw	r30, r16
     c54:	09 95       	icall
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	28 97       	sbiw	r28, 0x08	; 8
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	7e 83       	std	Y+6, r23	; 0x06
     c82:	6d 83       	std	Y+5, r22	; 0x05
     c84:	58 87       	std	Y+8, r21	; 0x08
     c86:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = 0;
     c88:	1a 82       	std	Y+2, r1	; 0x02
     c8a:	19 82       	std	Y+1, r1	; 0x01
  while (size--) {
     c8c:	1c c0       	rjmp	.+56     	; 0xcc6 <_ZN5Print5writeEPKhj+0x5e>
    n += write(*buffer++);
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	fc 01       	movw	r30, r24
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	9e 81       	ldd	r25, Y+6	; 0x06
     ca2:	ac 01       	movw	r20, r24
     ca4:	4f 5f       	subi	r20, 0xFF	; 255
     ca6:	5f 4f       	sbci	r21, 0xFF	; 255
     ca8:	5e 83       	std	Y+6, r21	; 0x06
     caa:	4d 83       	std	Y+5, r20	; 0x05
     cac:	fc 01       	movw	r30, r24
     cae:	40 81       	ld	r20, Z
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	64 2f       	mov	r22, r20
     cb6:	f9 01       	movw	r30, r18
     cb8:	09 95       	icall
     cba:	29 81       	ldd	r18, Y+1	; 0x01
     cbc:	3a 81       	ldd	r19, Y+2	; 0x02
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	89 83       	std	Y+1, r24	; 0x01

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     cc6:	8f 81       	ldd	r24, Y+7	; 0x07
     cc8:	98 85       	ldd	r25, Y+8	; 0x08
     cca:	9c 01       	movw	r18, r24
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	31 09       	sbc	r19, r1
     cd0:	38 87       	std	Y+8, r19	; 0x08
     cd2:	2f 83       	std	Y+7, r18	; 0x07
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	09 f4       	brne	.+2      	; 0xcdc <_ZN5Print5writeEPKhj+0x74>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	22 23       	and	r18, r18
     cde:	b9 f6       	brne	.-82     	; 0xc8e <_ZN5Print5writeEPKhj+0x26>
    n += write(*buffer++);
  }
  return n;
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ce4:	28 96       	adiw	r28, 0x08	; 8
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <_ZN5Print5printEPKc>:
  }
  return n;
}

size_t Print::print(const char str[])
{
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <_ZN5Print5printEPKc+0x6>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <_ZN5Print5printEPKc+0x8>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	7c 83       	std	Y+4, r23	; 0x04
     d08:	6b 83       	std	Y+3, r22	; 0x03
  return write(str);
     d0a:	2b 81       	ldd	r18, Y+3	; 0x03
     d0c:	3c 81       	ldd	r19, Y+4	; 0x04
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	b9 01       	movw	r22, r18
     d14:	7f df       	rcall	.-258    	; 0xc14 <_ZN5Print5writeEPKc>
     d16:	0f 90       	pop	r0
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	00 d0       	rcall	.+0      	; 0xd2a <_ZN5Print5printEc+0x6>
     d2a:	1f 92       	push	r1
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	6b 83       	std	Y+3, r22	; 0x03
  return write(c);
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	fc 01       	movw	r30, r24
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	fc 01       	movw	r30, r24
     d42:	20 81       	ld	r18, Z
     d44:	31 81       	ldd	r19, Z+1	; 0x01
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	6b 81       	ldd	r22, Y+3	; 0x03
     d4c:	f9 01       	movw	r30, r18
     d4e:	09 95       	icall
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	00 d0       	rcall	.+0      	; 0xd62 <_ZN5Print5printEii+0x6>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <_ZN5Print5printEii+0x8>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <_ZN5Print5printEii+0xa>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	9a 83       	std	Y+2, r25	; 0x02
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	7c 83       	std	Y+4, r23	; 0x04
     d70:	6b 83       	std	Y+3, r22	; 0x03
     d72:	5e 83       	std	Y+6, r21	; 0x06
     d74:	4d 83       	std	Y+5, r20	; 0x05
  return print((long) n, base);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	aa 27       	eor	r26, r26
     d7c:	97 fd       	sbrc	r25, 7
     d7e:	a0 95       	com	r26
     d80:	ba 2f       	mov	r27, r26
     d82:	2d 81       	ldd	r18, Y+5	; 0x05
     d84:	3e 81       	ldd	r19, Y+6	; 0x06
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	ac 01       	movw	r20, r24
     d8c:	bd 01       	movw	r22, r26
     d8e:	cf 01       	movw	r24, r30
     d90:	09 d0       	rcall	.+18     	; 0xda4 <_ZN5Print5printEli>
     d92:	26 96       	adiw	r28, 0x06	; 6
}
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2a 97       	sbiw	r28, 0x0a	; 10
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	9c 83       	std	Y+4, r25	; 0x04
     dba:	8b 83       	std	Y+3, r24	; 0x03
     dbc:	4d 83       	std	Y+5, r20	; 0x05
     dbe:	5e 83       	std	Y+6, r21	; 0x06
     dc0:	6f 83       	std	Y+7, r22	; 0x07
     dc2:	78 87       	std	Y+8, r23	; 0x08
     dc4:	3a 87       	std	Y+10, r19	; 0x0a
     dc6:	29 87       	std	Y+9, r18	; 0x09
  if (base == 0) {
     dc8:	89 85       	ldd	r24, Y+9	; 0x09
     dca:	9a 85       	ldd	r25, Y+10	; 0x0a
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	79 f4       	brne	.+30     	; 0xdee <_ZN5Print5printEli+0x4a>
    return write(n);
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	fc 01       	movw	r30, r24
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	fc 01       	movw	r30, r24
     ddc:	20 81       	ld	r18, Z
     dde:	31 81       	ldd	r19, Z+1	; 0x01
     de0:	4d 81       	ldd	r20, Y+5	; 0x05
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	64 2f       	mov	r22, r20
     de8:	f9 01       	movw	r30, r18
     dea:	09 95       	icall
     dec:	48 c0       	rjmp	.+144    	; 0xe7e <_ZN5Print5printEli+0xda>
  } else if (base == 10) {
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	8a 30       	cpi	r24, 0x0A	; 10
     df4:	91 05       	cpc	r25, r1
     df6:	c1 f5       	brne	.+112    	; 0xe68 <_ZN5Print5printEli+0xc4>
    if (n < 0) {
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	af 81       	ldd	r26, Y+7	; 0x07
     dfe:	b8 85       	ldd	r27, Y+8	; 0x08
     e00:	bb 23       	and	r27, r27
     e02:	34 f5       	brge	.+76     	; 0xe50 <_ZN5Print5printEli+0xac>
      int t = print('-');
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	6d e2       	ldi	r22, 0x2D	; 45
     e0a:	8c df       	rcall	.-232    	; 0xd24 <_ZN5Print5printEc>
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
      n = -n;
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	af 81       	ldd	r26, Y+7	; 0x07
     e16:	b8 85       	ldd	r27, Y+8	; 0x08
     e18:	b0 95       	com	r27
     e1a:	a0 95       	com	r26
     e1c:	90 95       	com	r25
     e1e:	81 95       	neg	r24
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	af 4f       	sbci	r26, 0xFF	; 255
     e24:	bf 4f       	sbci	r27, 0xFF	; 255
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	af 83       	std	Y+7, r26	; 0x07
     e2c:	b8 87       	std	Y+8, r27	; 0x08
     e2e:	8d 81       	ldd	r24, Y+5	; 0x05
      return printNumber(n, 10) + t;
     e30:	9e 81       	ldd	r25, Y+6	; 0x06
     e32:	af 81       	ldd	r26, Y+7	; 0x07
     e34:	b8 85       	ldd	r27, Y+8	; 0x08
     e36:	eb 81       	ldd	r30, Y+3	; 0x03
     e38:	fc 81       	ldd	r31, Y+4	; 0x04
     e3a:	2a e0       	ldi	r18, 0x0A	; 10
     e3c:	ac 01       	movw	r20, r24
     e3e:	bd 01       	movw	r22, r26
     e40:	cf 01       	movw	r24, r30
     e42:	09 d1       	rcall	.+530    	; 0x1056 <_ZN5Print11printNumberEmh>
     e44:	9c 01       	movw	r18, r24
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	82 0f       	add	r24, r18
     e4c:	93 1f       	adc	r25, r19
     e4e:	17 c0       	rjmp	.+46     	; 0xe7e <_ZN5Print5printEli+0xda>
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
    }
    return printNumber(n, 10);
     e54:	af 81       	ldd	r26, Y+7	; 0x07
     e56:	b8 85       	ldd	r27, Y+8	; 0x08
     e58:	eb 81       	ldd	r30, Y+3	; 0x03
     e5a:	fc 81       	ldd	r31, Y+4	; 0x04
     e5c:	2a e0       	ldi	r18, 0x0A	; 10
     e5e:	ac 01       	movw	r20, r24
     e60:	bd 01       	movw	r22, r26
     e62:	cf 01       	movw	r24, r30
     e64:	f8 d0       	rcall	.+496    	; 0x1056 <_ZN5Print11printNumberEmh>
     e66:	0b c0       	rjmp	.+22     	; 0xe7e <_ZN5Print5printEli+0xda>
     e68:	29 85       	ldd	r18, Y+9	; 0x09
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
  } else {
    return printNumber(n, base);
     e6e:	af 81       	ldd	r26, Y+7	; 0x07
     e70:	b8 85       	ldd	r27, Y+8	; 0x08
     e72:	eb 81       	ldd	r30, Y+3	; 0x03
     e74:	fc 81       	ldd	r31, Y+4	; 0x04
     e76:	ac 01       	movw	r20, r24
     e78:	bd 01       	movw	r22, r26
     e7a:	cf 01       	movw	r24, r30
     e7c:	ec d0       	rcall	.+472    	; 0x1056 <_ZN5Print11printNumberEmh>
     e7e:	2a 96       	adiw	r28, 0x0a	; 10
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
  }
}
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	28 97       	sbiw	r28, 0x08	; 8
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	4b 83       	std	Y+3, r20	; 0x03
     eaa:	5c 83       	std	Y+4, r21	; 0x04
     eac:	6d 83       	std	Y+5, r22	; 0x05
     eae:	7e 83       	std	Y+6, r23	; 0x06
     eb0:	38 87       	std	Y+8, r19	; 0x08
     eb2:	2f 83       	std	Y+7, r18	; 0x07
  if (base == 0) return write(n);
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
     eb6:	98 85       	ldd	r25, Y+8	; 0x08
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	79 f4       	brne	.+30     	; 0xeda <_ZN5Print5printEmi+0x4a>
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	fc 01       	movw	r30, r24
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 81       	ld	r18, Z
     eca:	31 81       	ldd	r19, Z+1	; 0x01
     ecc:	4b 81       	ldd	r20, Y+3	; 0x03
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	64 2f       	mov	r22, r20
     ed4:	f9 01       	movw	r30, r18
     ed6:	09 95       	icall
     ed8:	0b c0       	rjmp	.+22     	; 0xef0 <_ZN5Print5printEmi+0x60>
  else return printNumber(n, base);
     eda:	2f 81       	ldd	r18, Y+7	; 0x07
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	ad 81       	ldd	r26, Y+5	; 0x05
     ee2:	be 81       	ldd	r27, Y+6	; 0x06
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	fa 81       	ldd	r31, Y+2	; 0x02
     ee8:	ac 01       	movw	r20, r24
     eea:	bd 01       	movw	r22, r26
     eec:	cf 01       	movw	r24, r30
     eee:	b3 d0       	rcall	.+358    	; 0x1056 <_ZN5Print11printNumberEmh>
     ef0:	28 96       	adiw	r28, 0x08	; 8
}
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	00 d0       	rcall	.+0      	; 0xf08 <_ZN5Print7printlnEv+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <_ZN5Print7printlnEv+0x8>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
  size_t n = print('\r');
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	6d e0       	ldi	r22, 0x0D	; 13
     f18:	05 df       	rcall	.-502    	; 0xd24 <_ZN5Print5printEc>
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
  n += print('\n');
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	6a e0       	ldi	r22, 0x0A	; 10
     f24:	ff de       	rcall	.-514    	; 0xd24 <_ZN5Print5printEc>
     f26:	29 81       	ldd	r18, Y+1	; 0x01
     f28:	3a 81       	ldd	r19, Y+2	; 0x02
     f2a:	82 0f       	add	r24, r18
     f2c:	93 1f       	adc	r25, r19
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
  return n;
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <_ZN5Print7printlnEPKc+0x6>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <_ZN5Print7printlnEPKc+0x8>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <_ZN5Print7printlnEPKc+0xa>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	7e 83       	std	Y+6, r23	; 0x06
     f58:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(c);
     f5a:	2d 81       	ldd	r18, Y+5	; 0x05
     f5c:	3e 81       	ldd	r19, Y+6	; 0x06
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	b9 01       	movw	r22, r18
     f64:	c8 de       	rcall	.-624    	; 0xcf6 <_ZN5Print5printEPKc>
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
  n += println();
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	c9 df       	rcall	.-110    	; 0xf02 <_ZN5Print7printlnEv>
     f70:	29 81       	ldd	r18, Y+1	; 0x01
     f72:	3a 81       	ldd	r19, Y+2	; 0x02
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
  return n;
     f80:	26 96       	adiw	r28, 0x06	; 6
     f82:	0f b6       	in	r0, 0x3f	; 63
}
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	28 97       	sbiw	r28, 0x08	; 8
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	9c 83       	std	Y+4, r25	; 0x04
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	7e 83       	std	Y+6, r23	; 0x06
     fac:	6d 83       	std	Y+5, r22	; 0x05
     fae:	58 87       	std	Y+8, r21	; 0x08
     fb0:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = print(num, base);
     fb2:	4f 81       	ldd	r20, Y+7	; 0x07
     fb4:	58 85       	ldd	r21, Y+8	; 0x08
     fb6:	2d 81       	ldd	r18, Y+5	; 0x05
     fb8:	3e 81       	ldd	r19, Y+6	; 0x06
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	b9 01       	movw	r22, r18
     fc0:	cd de       	rcall	.-614    	; 0xd5c <_ZN5Print5printEii>
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
  n += println();
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	9b df       	rcall	.-202    	; 0xf02 <_ZN5Print7printlnEv>
     fcc:	29 81       	ldd	r18, Y+1	; 0x01
     fce:	3a 81       	ldd	r19, Y+2	; 0x02
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
  return n;
     fdc:	28 96       	adiw	r28, 0x08	; 8
     fde:	0f b6       	in	r0, 0x3f	; 63
}
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	2a 97       	sbiw	r28, 0x0a	; 10
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	4d 83       	std	Y+5, r20	; 0x05
    1008:	5e 83       	std	Y+6, r21	; 0x06
    100a:	6f 83       	std	Y+7, r22	; 0x07
    100c:	78 87       	std	Y+8, r23	; 0x08
    100e:	3a 87       	std	Y+10, r19	; 0x0a
    1010:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, base);
    1012:	29 85       	ldd	r18, Y+9	; 0x09
    1014:	3a 85       	ldd	r19, Y+10	; 0x0a
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	af 81       	ldd	r26, Y+7	; 0x07
    101c:	b8 85       	ldd	r27, Y+8	; 0x08
    101e:	eb 81       	ldd	r30, Y+3	; 0x03
    1020:	fc 81       	ldd	r31, Y+4	; 0x04
    1022:	ac 01       	movw	r20, r24
    1024:	bd 01       	movw	r22, r26
    1026:	cf 01       	movw	r24, r30
    1028:	33 df       	rcall	.-410    	; 0xe90 <_ZN5Print5printEmi>
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
  n += println();
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	67 df       	rcall	.-306    	; 0xf02 <_ZN5Print7printlnEv>
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	3a 81       	ldd	r19, Y+2	; 0x02
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
  return n;
    1044:	2a 96       	adiw	r28, 0x0a	; 10
    1046:	0f b6       	in	r0, 0x3f	; 63
}
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	e3 97       	sbiw	r28, 0x33	; 51
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	9a a7       	std	Y+42, r25	; 0x2a
    106c:	89 a7       	std	Y+41, r24	; 0x29
    106e:	4b a7       	std	Y+43, r20	; 0x2b
    1070:	5c a7       	std	Y+44, r21	; 0x2c
    1072:	6d a7       	std	Y+45, r22	; 0x2d
    1074:	7e a7       	std	Y+46, r23	; 0x2e
    1076:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    1078:	80 e2       	ldi	r24, 0x20	; 32
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9e 01       	movw	r18, r28
    107e:	28 5f       	subi	r18, 0xF8	; 248
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	82 0f       	add	r24, r18
    1084:	93 1f       	adc	r25, r19
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	fc 01       	movw	r30, r24
    1090:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1092:	8f a5       	ldd	r24, Y+47	; 0x2f
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	10 f4       	brcc	.+4      	; 0x109c <_ZN5Print11printNumberEmh+0x46>
    1098:	8a e0       	ldi	r24, 0x0A	; 10
    109a:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
    109c:	8b a5       	ldd	r24, Y+43	; 0x2b
    109e:	9c a5       	ldd	r25, Y+44	; 0x2c
    10a0:	ad a5       	ldd	r26, Y+45	; 0x2d
    10a2:	be a5       	ldd	r27, Y+46	; 0x2e
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    10a6:	9c 83       	std	Y+4, r25	; 0x04
    10a8:	ad 83       	std	Y+5, r26	; 0x05
    10aa:	be 83       	std	Y+6, r27	; 0x06
    n /= base;
    10ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ba:	ad a5       	ldd	r26, Y+45	; 0x2d
    10bc:	be a5       	ldd	r27, Y+46	; 0x2e
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
    10c6:	da 01       	movw	r26, r20
    10c8:	c9 01       	movw	r24, r18
    10ca:	8b a7       	std	Y+43, r24	; 0x2b
    10cc:	9c a7       	std	Y+44, r25	; 0x2c
    10ce:	ad a7       	std	Y+45, r26	; 0x2d
    10d0:	be a7       	std	Y+46, r27	; 0x2e
    char c = m - base * n;
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	2b a5       	ldd	r18, Y+43	; 0x2b
    10d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d8:	28 9f       	mul	r18, r24
    10da:	80 2d       	mov	r24, r0
    10dc:	11 24       	eor	r1, r1
    10de:	f9 2f       	mov	r31, r25
    10e0:	f8 1b       	sub	r31, r24
    10e2:	8f 2f       	mov	r24, r31
    10e4:	8f 83       	std	Y+7, r24	; 0x07
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	8a 30       	cpi	r24, 0x0A	; 10
    10f4:	20 f4       	brcc	.+8      	; 0x10fe <_ZN5Print11printNumberEmh+0xa8>
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	20 e3       	ldi	r18, 0x30	; 48
    10fa:	28 0f       	add	r18, r24
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <__stack+0x5>
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	27 e3       	ldi	r18, 0x37	; 55
    1102:	28 0f       	add	r18, r24
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    110c:	8b a5       	ldd	r24, Y+43	; 0x2b
    110e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1110:	ad a5       	ldd	r26, Y+45	; 0x2d
    1112:	be a5       	ldd	r27, Y+46	; 0x2e
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	a1 05       	cpc	r26, r1
    1118:	b1 05       	cpc	r27, r1
    111a:	09 f0       	breq	.+2      	; 0x111e <__stack+0x1f>
    111c:	bf cf       	rjmp	.-130    	; 0x109c <_ZN5Print11printNumberEmh+0x46>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    111e:	29 81       	ldd	r18, Y+1	; 0x01
    1120:	3a 81       	ldd	r19, Y+2	; 0x02
    1122:	89 a5       	ldd	r24, Y+41	; 0x29
    1124:	9a a5       	ldd	r25, Y+42	; 0x2a
    1126:	b9 01       	movw	r22, r18
    1128:	75 dd       	rcall	.-1302   	; 0xc14 <_ZN5Print5writeEPKc>
    112a:	e3 96       	adiw	r28, 0x33	; 51
}
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <__vector_1>:
  twiIntFunc = userFunc;
}
*/


SIGNAL(INT0_vect) {
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	00 90 5f 00 	lds	r0, 0x005F
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	00 90 5b 00 	lds	r0, 0x005B
    114c:	0f 92       	push	r0
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
    116e:	80 91 2a 03 	lds	r24, 0x032A
    1172:	90 91 2b 03 	lds	r25, 0x032B
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	31 f0       	breq	.+12     	; 0x1186 <__vector_1+0x4a>
    intFunc[EXTERNAL_INT_0]();
    117a:	80 91 2a 03 	lds	r24, 0x032A
    117e:	90 91 2b 03 	lds	r25, 0x032B
    1182:	fc 01       	movw	r30, r24
    1184:	09 95       	icall
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	bf 91       	pop	r27
    1190:	af 91       	pop	r26
    1192:	9f 91       	pop	r25
    1194:	8f 91       	pop	r24
    1196:	7f 91       	pop	r23
    1198:	6f 91       	pop	r22
    119a:	5f 91       	pop	r21
    119c:	4f 91       	pop	r20
    119e:	3f 91       	pop	r19
    11a0:	2f 91       	pop	r18
    11a2:	0f 90       	pop	r0
    11a4:	00 92 5b 00 	sts	0x005B, r0
    11a8:	0f 90       	pop	r0
    11aa:	00 92 5f 00 	sts	0x005F, r0
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_2>:

SIGNAL(INT1_vect) {
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	00 90 5f 00 	lds	r0, 0x005F
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	00 90 5b 00 	lds	r0, 0x005B
    11c4:	0f 92       	push	r0
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
    11e6:	80 91 2c 03 	lds	r24, 0x032C
    11ea:	90 91 2d 03 	lds	r25, 0x032D
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	31 f0       	breq	.+12     	; 0x11fe <__vector_2+0x4a>
    intFunc[EXTERNAL_INT_1]();
    11f2:	80 91 2c 03 	lds	r24, 0x032C
    11f6:	90 91 2d 03 	lds	r25, 0x032D
    11fa:	fc 01       	movw	r30, r24
    11fc:	09 95       	icall
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	bf 91       	pop	r27
    1208:	af 91       	pop	r26
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	7f 91       	pop	r23
    1210:	6f 91       	pop	r22
    1212:	5f 91       	pop	r21
    1214:	4f 91       	pop	r20
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	00 92 5b 00 	sts	0x005B, r0
    1220:	0f 90       	pop	r0
    1222:	00 92 5f 00 	sts	0x005F, r0
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_3>:

SIGNAL(INT2_vect) {
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	00 90 5f 00 	lds	r0, 0x005F
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	00 90 5b 00 	lds	r0, 0x005B
    123c:	0f 92       	push	r0
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_2])
    125e:	80 91 2e 03 	lds	r24, 0x032E
    1262:	90 91 2f 03 	lds	r25, 0x032F
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	31 f0       	breq	.+12     	; 0x1276 <__vector_3+0x4a>
    intFunc[EXTERNAL_INT_2]();
    126a:	80 91 2e 03 	lds	r24, 0x032E
    126e:	90 91 2f 03 	lds	r25, 0x032F
    1272:	fc 01       	movw	r30, r24
    1274:	09 95       	icall
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	ff 91       	pop	r31
    127c:	ef 91       	pop	r30
    127e:	bf 91       	pop	r27
    1280:	af 91       	pop	r26
    1282:	9f 91       	pop	r25
    1284:	8f 91       	pop	r24
    1286:	7f 91       	pop	r23
    1288:	6f 91       	pop	r22
    128a:	5f 91       	pop	r21
    128c:	4f 91       	pop	r20
    128e:	3f 91       	pop	r19
    1290:	2f 91       	pop	r18
    1292:	0f 90       	pop	r0
    1294:	00 92 5b 00 	sts	0x005B, r0
    1298:	0f 90       	pop	r0
    129a:	00 92 5f 00 	sts	0x005F, r0
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <__vector_4>:

SIGNAL(INT3_vect) {
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	00 90 5f 00 	lds	r0, 0x005F
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	00 90 5b 00 	lds	r0, 0x005B
    12b4:	0f 92       	push	r0
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_3])
    12d6:	80 91 30 03 	lds	r24, 0x0330
    12da:	90 91 31 03 	lds	r25, 0x0331
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	31 f0       	breq	.+12     	; 0x12ee <__vector_4+0x4a>
    intFunc[EXTERNAL_INT_3]();
    12e2:	80 91 30 03 	lds	r24, 0x0330
    12e6:	90 91 31 03 	lds	r25, 0x0331
    12ea:	fc 01       	movw	r30, r24
    12ec:	09 95       	icall
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	bf 91       	pop	r27
    12f8:	af 91       	pop	r26
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	0f 90       	pop	r0
    130c:	00 92 5b 00 	sts	0x005B, r0
    1310:	0f 90       	pop	r0
    1312:	00 92 5f 00 	sts	0x005F, r0
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <__vector_5>:

SIGNAL(INT4_vect) {
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	00 90 5f 00 	lds	r0, 0x005F
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	00 90 5b 00 	lds	r0, 0x005B
    132c:	0f 92       	push	r0
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_4])
    134e:	80 91 32 03 	lds	r24, 0x0332
    1352:	90 91 33 03 	lds	r25, 0x0333
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	31 f0       	breq	.+12     	; 0x1366 <__vector_5+0x4a>
    intFunc[EXTERNAL_INT_4]();
    135a:	80 91 32 03 	lds	r24, 0x0332
    135e:	90 91 33 03 	lds	r25, 0x0333
    1362:	fc 01       	movw	r30, r24
    1364:	09 95       	icall
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	ff 91       	pop	r31
    136c:	ef 91       	pop	r30
    136e:	bf 91       	pop	r27
    1370:	af 91       	pop	r26
    1372:	9f 91       	pop	r25
    1374:	8f 91       	pop	r24
    1376:	7f 91       	pop	r23
    1378:	6f 91       	pop	r22
    137a:	5f 91       	pop	r21
    137c:	4f 91       	pop	r20
    137e:	3f 91       	pop	r19
    1380:	2f 91       	pop	r18
    1382:	0f 90       	pop	r0
    1384:	00 92 5b 00 	sts	0x005B, r0
    1388:	0f 90       	pop	r0
    138a:	00 92 5f 00 	sts	0x005F, r0
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_6>:

SIGNAL(INT5_vect) {
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	00 90 5f 00 	lds	r0, 0x005F
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	00 90 5b 00 	lds	r0, 0x005B
    13a4:	0f 92       	push	r0
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_5])
    13c6:	80 91 34 03 	lds	r24, 0x0334
    13ca:	90 91 35 03 	lds	r25, 0x0335
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	31 f0       	breq	.+12     	; 0x13de <__vector_6+0x4a>
    intFunc[EXTERNAL_INT_5]();
    13d2:	80 91 34 03 	lds	r24, 0x0334
    13d6:	90 91 35 03 	lds	r25, 0x0335
    13da:	fc 01       	movw	r30, r24
    13dc:	09 95       	icall
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	0f 90       	pop	r0
    13fc:	00 92 5b 00 	sts	0x005B, r0
    1400:	0f 90       	pop	r0
    1402:	00 92 5f 00 	sts	0x005F, r0
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <__vector_7>:

SIGNAL(INT6_vect) {
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	00 90 5f 00 	lds	r0, 0x005F
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	00 90 5b 00 	lds	r0, 0x005B
    141c:	0f 92       	push	r0
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_6])
    143e:	80 91 36 03 	lds	r24, 0x0336
    1442:	90 91 37 03 	lds	r25, 0x0337
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	31 f0       	breq	.+12     	; 0x1456 <__vector_7+0x4a>
    intFunc[EXTERNAL_INT_6]();
    144a:	80 91 36 03 	lds	r24, 0x0336
    144e:	90 91 37 03 	lds	r25, 0x0337
    1452:	fc 01       	movw	r30, r24
    1454:	09 95       	icall
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	00 92 5b 00 	sts	0x005B, r0
    1478:	0f 90       	pop	r0
    147a:	00 92 5f 00 	sts	0x005F, r0
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <__vector_8>:

SIGNAL(INT7_vect) {
    1484:	1f 92       	push	r1
    1486:	0f 92       	push	r0
    1488:	00 90 5f 00 	lds	r0, 0x005F
    148c:	0f 92       	push	r0
    148e:	11 24       	eor	r1, r1
    1490:	00 90 5b 00 	lds	r0, 0x005B
    1494:	0f 92       	push	r0
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_7])
    14b6:	80 91 38 03 	lds	r24, 0x0338
    14ba:	90 91 39 03 	lds	r25, 0x0339
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	31 f0       	breq	.+12     	; 0x14ce <__vector_8+0x4a>
    intFunc[EXTERNAL_INT_7]();
    14c2:	80 91 38 03 	lds	r24, 0x0338
    14c6:	90 91 39 03 	lds	r25, 0x0339
    14ca:	fc 01       	movw	r30, r24
    14cc:	09 95       	icall
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	0f 90       	pop	r0
    14ec:	00 92 5b 00 	sts	0x005B, r0
    14f0:	0f 90       	pop	r0
    14f2:	00 92 5f 00 	sts	0x005F, r0
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <__vector_17>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	00 90 5f 00 	lds	r0, 0x005F
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	25 97       	sbiw	r28, 0x05	; 5
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	cd bf       	out	0x3d, r28	; 61
   // copy these to local variables so they can be stored in registers
   // (volatile variables must be read from memory on every access)
   unsigned long m = timer0_millis;
    152c:	80 91 3e 03 	lds	r24, 0x033E
    1530:	90 91 3f 03 	lds	r25, 0x033F
    1534:	a0 91 40 03 	lds	r26, 0x0340
    1538:	b0 91 41 03 	lds	r27, 0x0341
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	9a 83       	std	Y+2, r25	; 0x02
    1540:	ab 83       	std	Y+3, r26	; 0x03
    1542:	bc 83       	std	Y+4, r27	; 0x04
   unsigned char f = timer0_fract;
    1544:	80 91 42 03 	lds	r24, 0x0342
    1548:	8d 83       	std	Y+5, r24	; 0x05

   m += MILLIS_INC;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	ab 81       	ldd	r26, Y+3	; 0x03
    1550:	bc 81       	ldd	r27, Y+4	; 0x04
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	a1 1d       	adc	r26, r1
    1556:	b1 1d       	adc	r27, r1
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	ab 83       	std	Y+3, r26	; 0x03
    155e:	bc 83       	std	Y+4, r27	; 0x04
   f += FRACT_INC;
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	8d 5f       	subi	r24, 0xFD	; 253
    1564:	8d 83       	std	Y+5, r24	; 0x05
   if (f >= FRACT_MAX) {
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	8d 37       	cpi	r24, 0x7D	; 125
    156a:	70 f0       	brcs	.+28     	; 0x1588 <__vector_17+0x7e>
      f -= FRACT_MAX;
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	8d 57       	subi	r24, 0x7D	; 125
    1570:	8d 83       	std	Y+5, r24	; 0x05
      m += 1;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	ab 81       	ldd	r26, Y+3	; 0x03
    1578:	bc 81       	ldd	r27, Y+4	; 0x04
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	a1 1d       	adc	r26, r1
    157e:	b1 1d       	adc	r27, r1
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	ab 83       	std	Y+3, r26	; 0x03
    1586:	bc 83       	std	Y+4, r27	; 0x04
   }

   timer0_fract = f;
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	80 93 42 03 	sts	0x0342, r24
   timer0_millis = m;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	ab 81       	ldd	r26, Y+3	; 0x03
    1594:	bc 81       	ldd	r27, Y+4	; 0x04
    1596:	80 93 3e 03 	sts	0x033E, r24
    159a:	90 93 3f 03 	sts	0x033F, r25
    159e:	a0 93 40 03 	sts	0x0340, r26
    15a2:	b0 93 41 03 	sts	0x0341, r27
   timer0_overflow_count++;
    15a6:	80 91 3a 03 	lds	r24, 0x033A
    15aa:	90 91 3b 03 	lds	r25, 0x033B
    15ae:	a0 91 3c 03 	lds	r26, 0x033C
    15b2:	b0 91 3d 03 	lds	r27, 0x033D
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	a1 1d       	adc	r26, r1
    15ba:	b1 1d       	adc	r27, r1
    15bc:	80 93 3a 03 	sts	0x033A, r24
    15c0:	90 93 3b 03 	sts	0x033B, r25
    15c4:	a0 93 3c 03 	sts	0x033C, r26
    15c8:	b0 93 3d 03 	sts	0x033D, r27
}
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	0f 90       	pop	r0
    15e4:	00 92 5f 00 	sts	0x005F, r0
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <millis>:

unsigned long millis() {
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <millis+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <millis+0x8>
    15f6:	1f 92       	push	r1
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
   unsigned long m;
   uint8_t oldSREG = SREG;
    15fc:	8f e5       	ldi	r24, 0x5F	; 95
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
    1604:	89 83       	std	Y+1, r24	; 0x01

   // disable interrupts while we read timer0_millis or we might get an
   // inconsistent value (e.g. in the middle of a write to timer0_millis)
   cli();
    1606:	f8 94       	cli
   m = timer0_millis;
    1608:	80 91 3e 03 	lds	r24, 0x033E
    160c:	90 91 3f 03 	lds	r25, 0x033F
    1610:	a0 91 40 03 	lds	r26, 0x0340
    1614:	b0 91 41 03 	lds	r27, 0x0341
    1618:	8a 83       	std	Y+2, r24	; 0x02
    161a:	9b 83       	std	Y+3, r25	; 0x03
    161c:	ac 83       	std	Y+4, r26	; 0x04
    161e:	bd 83       	std	Y+5, r27	; 0x05
   SREG = oldSREG;
    1620:	8f e5       	ldi	r24, 0x5F	; 95
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	29 81       	ldd	r18, Y+1	; 0x01
    1626:	fc 01       	movw	r30, r24
    1628:	20 83       	st	Z, r18

   return m;
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	9b 81       	ldd	r25, Y+3	; 0x03
    162e:	ac 81       	ldd	r26, Y+4	; 0x04
    1630:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <delay>:
   SREG = oldSREG;

   return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms) {
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	28 97       	sbiw	r28, 0x08	; 8
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	6d 83       	std	Y+5, r22	; 0x05
    165c:	7e 83       	std	Y+6, r23	; 0x06
    165e:	8f 83       	std	Y+7, r24	; 0x07
    1660:	98 87       	std	Y+8, r25	; 0x08
   unsigned long start = millis();
    1662:	c5 df       	rcall	.-118    	; 0x15ee <millis>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	ab 83       	std	Y+3, r26	; 0x03
    166e:	bc 83       	std	Y+4, r27	; 0x04
    1670:	00 00       	nop

   while (millis() - start <= ms) {
    1672:	bd df       	rcall	.-134    	; 0x15ee <millis>
    1674:	9b 01       	movw	r18, r22
    1676:	ac 01       	movw	r20, r24
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	ab 81       	ldd	r26, Y+3	; 0x03
    167e:	bc 81       	ldd	r27, Y+4	; 0x04
    1680:	28 1b       	sub	r18, r24
    1682:	39 0b       	sbc	r19, r25
    1684:	4a 0b       	sbc	r20, r26
    1686:	5b 0b       	sbc	r21, r27
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	af 81       	ldd	r26, Y+7	; 0x07
    168e:	b8 85       	ldd	r27, Y+8	; 0x08
    1690:	82 17       	cp	r24, r18
    1692:	93 07       	cpc	r25, r19
    1694:	a4 07       	cpc	r26, r20
    1696:	b5 07       	cpc	r27, r21
    1698:	60 f7       	brcc	.-40     	; 0x1672 <delay+0x2c>
    169a:	28 96       	adiw	r28, 0x08	; 8
    169c:	0f b6       	in	r0, 0x3f	; 63
      ;
   }
}
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <init>:

   // reenable interrupts.
   SREG = oldSREG;
}

void init() {
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
   // this needs to be called before setup() or some functions won't
   // work there
   sei();
    16b4:	78 94       	sei

   // on the ATmega168, timer 0 is also used for fast hardware pwm
   // (using phase-correct PWM would mean that timer 0 overflowed half as often
   // resulting in different millis() behavior on the ATmega8 and ATmega168)
   //8 bit timer
   sbi(TCCR0A, WGM01);
    16b6:	84 e4       	ldi	r24, 0x44	; 68
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	24 e4       	ldi	r18, 0x44	; 68
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	f9 01       	movw	r30, r18
    16c0:	20 81       	ld	r18, Z
    16c2:	28 60       	ori	r18, 0x08	; 8
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
   sbi(TCCR0A, WGM00);
    16c8:	84 e4       	ldi	r24, 0x44	; 68
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	24 e4       	ldi	r18, 0x44	; 68
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	f9 01       	movw	r30, r18
    16d2:	20 81       	ld	r18, Z
    16d4:	20 64       	ori	r18, 0x40	; 64
    16d6:	fc 01       	movw	r30, r24
    16d8:	20 83       	st	Z, r18

   // set timer 0 prescale factor to 64
   sbi(TCCR0A, CS01);
    16da:	84 e4       	ldi	r24, 0x44	; 68
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	24 e4       	ldi	r18, 0x44	; 68
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	f9 01       	movw	r30, r18
    16e4:	20 81       	ld	r18, Z
    16e6:	22 60       	ori	r18, 0x02	; 2
    16e8:	fc 01       	movw	r30, r24
    16ea:	20 83       	st	Z, r18
   sbi(TCCR0A, CS00);
    16ec:	84 e4       	ldi	r24, 0x44	; 68
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	24 e4       	ldi	r18, 0x44	; 68
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	f9 01       	movw	r30, r18
    16f6:	20 81       	ld	r18, Z
    16f8:	21 60       	ori	r18, 0x01	; 1
    16fa:	fc 01       	movw	r30, r24
    16fc:	20 83       	st	Z, r18

   // enable timer 0 overflow interrupt
   sbi(TIMSK0, TOIE0);
    16fe:	8e e6       	ldi	r24, 0x6E	; 110
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	2e e6       	ldi	r18, 0x6E	; 110
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	f9 01       	movw	r30, r18
    1708:	20 81       	ld	r18, Z
    170a:	21 60       	ori	r18, 0x01	; 1
    170c:	fc 01       	movw	r30, r24
    170e:	20 83       	st	Z, r18
   // this is better for motors as it ensures an even waveform
   // note, however, that fast pwm mode can achieve a frequency of up
   // 8 MHz (with a 16 MHz clock) at 50% duty cycle

   // set timer 1 prescale factor to 64
   sbi(TCCR1B, CS11);
    1710:	81 e8       	ldi	r24, 0x81	; 129
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	21 e8       	ldi	r18, 0x81	; 129
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	22 60       	ori	r18, 0x02	; 2
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
   sbi(TCCR1B, CS10);
    1722:	81 e8       	ldi	r24, 0x81	; 129
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	21 e8       	ldi	r18, 0x81	; 129
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	f9 01       	movw	r30, r18
    172c:	20 81       	ld	r18, Z
    172e:	21 60       	ori	r18, 0x01	; 1
    1730:	fc 01       	movw	r30, r24
    1732:	20 83       	st	Z, r18
   // put timer 1 in 8-bit phase correct pwm mode
   sbi(TCCR1A, WGM10);
    1734:	80 e8       	ldi	r24, 0x80	; 128
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	20 e8       	ldi	r18, 0x80	; 128
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	f9 01       	movw	r30, r18
    173e:	20 81       	ld	r18, Z
    1740:	21 60       	ori	r18, 0x01	; 1
    1742:	fc 01       	movw	r30, r24
    1744:	20 83       	st	Z, r18

   // set timer 1 prescale factor to 64
   sbi(TCCR3B, CS31);
    1746:	81 e9       	ldi	r24, 0x91	; 145
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	21 e9       	ldi	r18, 0x91	; 145
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	f9 01       	movw	r30, r18
    1750:	20 81       	ld	r18, Z
    1752:	22 60       	ori	r18, 0x02	; 2
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
   sbi(TCCR3B, CS30);
    1758:	81 e9       	ldi	r24, 0x91	; 145
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	21 e9       	ldi	r18, 0x91	; 145
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	f9 01       	movw	r30, r18
    1762:	20 81       	ld	r18, Z
    1764:	21 60       	ori	r18, 0x01	; 1
    1766:	fc 01       	movw	r30, r24
    1768:	20 83       	st	Z, r18
   // put timer 1 in 8-bit phase correct pwm mode
   sbi(TCCR3A, WGM30);
    176a:	80 e9       	ldi	r24, 0x90	; 144
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	20 e9       	ldi	r18, 0x90	; 144
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	f9 01       	movw	r30, r18
    1774:	20 81       	ld	r18, Z
    1776:	21 60       	ori	r18, 0x01	; 1
    1778:	fc 01       	movw	r30, r24
    177a:	20 83       	st	Z, r18

   // set timer 2 prescale factor to 64
   sbi(TCCR2A, CS22);
    177c:	80 eb       	ldi	r24, 0xB0	; 176
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	20 eb       	ldi	r18, 0xB0	; 176
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	f9 01       	movw	r30, r18
    1786:	20 81       	ld	r18, Z
    1788:	24 60       	ori	r18, 0x04	; 4
    178a:	fc 01       	movw	r30, r24
    178c:	20 83       	st	Z, r18
   // configure timer 2 for phase correct pwm (8-bit)
   sbi(TCCR2A, WGM20);
    178e:	80 eb       	ldi	r24, 0xB0	; 176
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	20 eb       	ldi	r18, 0xB0	; 176
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	f9 01       	movw	r30, r18
    1798:	20 81       	ld	r18, Z
    179a:	20 64       	ori	r18, 0x40	; 64
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18

   // set a2d prescale factor to 128
   // 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
   // XXX: this will not work properly for other clock speeds, and
   // this code should use F_CPU to determine the prescale factor.
   sbi(ADCSRA, ADPS2);
    17a0:	8a e7       	ldi	r24, 0x7A	; 122
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	2a e7       	ldi	r18, 0x7A	; 122
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	f9 01       	movw	r30, r18
    17aa:	20 81       	ld	r18, Z
    17ac:	24 60       	ori	r18, 0x04	; 4
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
   sbi(ADCSRA, ADPS1);
    17b2:	8a e7       	ldi	r24, 0x7A	; 122
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	2a e7       	ldi	r18, 0x7A	; 122
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	22 60       	ori	r18, 0x02	; 2
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
   sbi(ADCSRA, ADPS0);
    17c4:	8a e7       	ldi	r24, 0x7A	; 122
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	2a e7       	ldi	r18, 0x7A	; 122
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	20 81       	ld	r18, Z
    17d0:	21 60       	ori	r18, 0x01	; 1
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18

   // enable a2d conversions
   sbi(ADCSRA, ADEN);
    17d6:	8a e7       	ldi	r24, 0x7A	; 122
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	2a e7       	ldi	r18, 0x7A	; 122
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	20 68       	ori	r18, 0x80	; 128
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18

   // the bootloader connects pins 0 and 1 to the USART; disconnect them
   // here so they can be used as normal digital i/o; they will be
   // reconnected in Serial.begin()
   UCSR0B = 0;
    17e8:	81 ec       	ldi	r24, 0xC1	; 193
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	fc 01       	movw	r30, r24
    17ee:	10 82       	st	Z, r1
}
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <_ZN8SPIClass5beginEv>:
#define SSPin PB0
#define MISOPin PB3
#define MOSIPin PB2
#define SCKPin PB1

void SPIClass::begin() {
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	1f 92       	push	r1
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
   uint8_t sreg = SREG;
    1800:	8f e5       	ldi	r24, 0x5F	; 95
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	fc 01       	movw	r30, r24
    1806:	80 81       	ld	r24, Z
    1808:	89 83       	std	Y+1, r24	; 0x01
   noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    180a:	f8 94       	cli
   if (!initialized) {
    180c:	80 91 43 03 	lds	r24, 0x0343
    1810:	88 23       	and	r24, r24
    1812:	b1 f5       	brne	.+108    	; 0x1880 <_ZN8SPIClass5beginEv+0x8a>
      // Set SS to high so a connected chip will be "deselected" by default
      SPIPort |= _BV(SSPin);
    1814:	85 e2       	ldi	r24, 0x25	; 37
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	25 e2       	ldi	r18, 0x25	; 37
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	f9 01       	movw	r30, r18
    181e:	20 81       	ld	r18, Z
    1820:	21 60       	ori	r18, 0x01	; 1
    1822:	fc 01       	movw	r30, r24
    1824:	20 83       	st	Z, r18

      // When the SS pin is set as OUTPUT, it can be used as
      // a general purpose output port (it doesn't influence
      // SPI operations).
      SPIDDR |= _BV(SSPin);
    1826:	84 e2       	ldi	r24, 0x24	; 36
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	24 e2       	ldi	r18, 0x24	; 36
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	f9 01       	movw	r30, r18
    1830:	20 81       	ld	r18, Z
    1832:	21 60       	ori	r18, 0x01	; 1
    1834:	fc 01       	movw	r30, r24
    1836:	20 83       	st	Z, r18

      // Warning: if the SS pin ever becomes a LOW INPUT then SPI
      // automatically switches to Slave, so the data direction of
      // the SS pin MUST be kept as OUTPUT.
      SPCR |= _BV(MSTR);
    1838:	8c e4       	ldi	r24, 0x4C	; 76
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	2c e4       	ldi	r18, 0x4C	; 76
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	f9 01       	movw	r30, r18
    1842:	20 81       	ld	r18, Z
    1844:	20 61       	ori	r18, 0x10	; 16
    1846:	fc 01       	movw	r30, r24
    1848:	20 83       	st	Z, r18
      SPCR |= _BV(SPE);
    184a:	8c e4       	ldi	r24, 0x4C	; 76
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	2c e4       	ldi	r18, 0x4C	; 76
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	f9 01       	movw	r30, r18
    1854:	20 81       	ld	r18, Z
    1856:	20 64       	ori	r18, 0x40	; 64
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
      // clocking in a single bit since the lines go directly
      // from "input" to SPI control.
      // http://code.google.com/p/arduino/issues/detail?id=888
      //pinMode(SCK, OUTPUT);
      //pinMode(MOSI, OUTPUT);
      SPIDDR |= _BV(SCKPin);
    185c:	84 e2       	ldi	r24, 0x24	; 36
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	24 e2       	ldi	r18, 0x24	; 36
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	f9 01       	movw	r30, r18
    1866:	20 81       	ld	r18, Z
    1868:	22 60       	ori	r18, 0x02	; 2
    186a:	fc 01       	movw	r30, r24
    186c:	20 83       	st	Z, r18
      SPIDDR |= _BV(MOSIPin);
    186e:	84 e2       	ldi	r24, 0x24	; 36
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	24 e2       	ldi	r18, 0x24	; 36
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	f9 01       	movw	r30, r18
    1878:	20 81       	ld	r18, Z
    187a:	24 60       	ori	r18, 0x04	; 4
    187c:	fc 01       	movw	r30, r24
    187e:	20 83       	st	Z, r18
   }
   initialized++; // reference count
    1880:	80 91 43 03 	lds	r24, 0x0343
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	80 93 43 03 	sts	0x0343, r24
   SREG = sreg;
    188a:	8f e5       	ldi	r24, 0x5F	; 95
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	29 81       	ldd	r18, Y+1	; 0x01
    1890:	fc 01       	movw	r30, r24
    1892:	20 83       	st	Z, r18
}
    1894:	0f 90       	pop	r0
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <_ZN8SPIClass8transferEh>:
    SPCR = settings.spcr;
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	1f 92       	push	r1
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    18a8:	8e e4       	ldi	r24, 0x4E	; 78
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	29 81       	ldd	r18, Y+1	; 0x01
    18ae:	fc 01       	movw	r30, r24
    18b0:	20 83       	st	Z, r18
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    18b2:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    18b4:	00 00       	nop
    18b6:	8d e4       	ldi	r24, 0x4D	; 77
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	fc 01       	movw	r30, r24
    18bc:	80 81       	ld	r24, Z
    18be:	80 95       	com	r24
    18c0:	88 1f       	adc	r24, r24
    18c2:	88 27       	eor	r24, r24
    18c4:	88 1f       	adc	r24, r24
    18c6:	88 23       	and	r24, r24
    18c8:	b1 f7       	brne	.-20     	; 0x18b6 <_ZN8SPIClass8transferEh+0x1a>
    return SPDR;
    18ca:	8e e4       	ldi	r24, 0x4E	; 78
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
  }
    18d2:	0f 90       	pop	r0
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <_ZN8SPIClass11setBitOrderEh>:
  // Disable the SPI bus
  static void end();

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	1f 92       	push	r1
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	89 83       	std	Y+1, r24	; 0x01
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	88 23       	and	r24, r24
    18ea:	51 f4       	brne	.+20     	; 0x1900 <_ZN8SPIClass11setBitOrderEh+0x26>
    18ec:	8c e4       	ldi	r24, 0x4C	; 76
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	2c e4       	ldi	r18, 0x4C	; 76
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	f9 01       	movw	r30, r18
    18f6:	20 81       	ld	r18, Z
    18f8:	20 62       	ori	r18, 0x20	; 32
    18fa:	fc 01       	movw	r30, r24
    18fc:	20 83       	st	Z, r18
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <_ZN8SPIClass11setBitOrderEh+0x38>
    else SPCR &= ~(_BV(DORD));
    1900:	8c e4       	ldi	r24, 0x4C	; 76
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	2c e4       	ldi	r18, 0x4C	; 76
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	f9 01       	movw	r30, r18
    190a:	20 81       	ld	r18, Z
    190c:	2f 7d       	andi	r18, 0xDF	; 223
    190e:	fc 01       	movw	r30, r24
    1910:	20 83       	st	Z, r18
  }
    1912:	0f 90       	pop	r0
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	08 95       	ret

0000191a <_ZN8SPIClass11setDataModeEh>:
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	1f 92       	push	r1
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
    1926:	8c e4       	ldi	r24, 0x4C	; 76
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	2c e4       	ldi	r18, 0x4C	; 76
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	f9 01       	movw	r30, r18
    1930:	20 81       	ld	r18, Z
    1932:	32 2f       	mov	r19, r18
    1934:	33 7f       	andi	r19, 0xF3	; 243
    1936:	29 81       	ldd	r18, Y+1	; 0x01
    1938:	23 2b       	or	r18, r19
    193a:	fc 01       	movw	r30, r24
    193c:	20 83       	st	Z, r18
  }
    193e:	0f 90       	pop	r0
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <_ZN8SPIClass15setClockDividerEh>:
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	1f 92       	push	r1
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	89 83       	std	Y+1, r24	; 0x01
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
    1952:	8c e4       	ldi	r24, 0x4C	; 76
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	2c e4       	ldi	r18, 0x4C	; 76
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	f9 01       	movw	r30, r18
    195c:	20 81       	ld	r18, Z
    195e:	32 2f       	mov	r19, r18
    1960:	3c 7f       	andi	r19, 0xFC	; 252
    1962:	29 81       	ldd	r18, Y+1	; 0x01
    1964:	23 70       	andi	r18, 0x03	; 3
    1966:	23 2b       	or	r18, r19
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
    196c:	8d e4       	ldi	r24, 0x4D	; 77
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	2d e4       	ldi	r18, 0x4D	; 77
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	f9 01       	movw	r30, r18
    1976:	20 81       	ld	r18, Z
    1978:	42 2f       	mov	r20, r18
    197a:	4e 7f       	andi	r20, 0xFE	; 254
    197c:	29 81       	ldd	r18, Y+1	; 0x01
    197e:	22 2f       	mov	r18, r18
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	35 95       	asr	r19
    1984:	27 95       	ror	r18
    1986:	35 95       	asr	r19
    1988:	27 95       	ror	r18
    198a:	21 70       	andi	r18, 0x01	; 1
    198c:	24 2b       	or	r18, r20
    198e:	fc 01       	movw	r30, r24
    1990:	20 83       	st	Z, r18
  }
    1992:	0f 90       	pop	r0
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <_ZN16FT_Transport_SPIC1Ev>:
class FT_Transport_SPI
{
	public:
	/* Constructor and destructor methods */
	//initialize spi library
	FT_Transport_SPI()
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <_ZN16FT_Transport_SPIC1Ev+0x6>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
	{
		//CSPin = cspin; //new library interface
	}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <_ZN16FT_Transport_SPI8SetCSpinEPVhS1_h>:
	
	//api to set the cs pin number 
	void SetCSpin(volatile uint8_t *csport, volatile uint8_t *csddr, uint8_t cspin)
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	27 97       	sbiw	r28, 0x07	; 7
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	7c 83       	std	Y+4, r23	; 0x04
    19cc:	6b 83       	std	Y+3, r22	; 0x03
    19ce:	5e 83       	std	Y+6, r21	; 0x06
    19d0:	4d 83       	std	Y+5, r20	; 0x05
    19d2:	2f 83       	std	Y+7, r18	; 0x07
	{
		CSPin = cspin;
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	2f 81       	ldd	r18, Y+7	; 0x07
    19da:	fc 01       	movw	r30, r24
    19dc:	20 83       	st	Z, r18
		CSPort = csport;
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	fc 01       	movw	r30, r24
    19e8:	32 83       	std	Z+2, r19	; 0x02
    19ea:	21 83       	std	Z+1, r18	; 0x01
		CSDdr = csddr;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	2d 81       	ldd	r18, Y+5	; 0x05
    19f2:	3e 81       	ldd	r19, Y+6	; 0x06
    19f4:	fc 01       	movw	r30, r24
    19f6:	34 83       	std	Z+4, r19	; 0x04
    19f8:	23 83       	std	Z+3, r18	; 0x03
	}
    19fa:	27 96       	adiw	r28, 0x07	; 7
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <_ZN16FT_Transport_SPID1Ev>:
	
	~FT_Transport_SPI(void){}//exit spi library
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <_ZN16FT_Transport_SPID1Ev+0x6>
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <_ZN16FT_Transport_SPI4InitEv>:
	void Init()
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <_ZN16FT_Transport_SPI4InitEv+0x6>
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Initialize SPI library */
		//pinMode(CSPin, OUTPUT);
		//digitalWrite(CSPin, HIGH);   
		*CSDdr |= CSPin;
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	fc 01       	movw	r30, r24
    1a38:	83 81       	ldd	r24, Z+3	; 0x03
    1a3a:	94 81       	ldd	r25, Z+4	; 0x04
    1a3c:	29 81       	ldd	r18, Y+1	; 0x01
    1a3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a40:	f9 01       	movw	r30, r18
    1a42:	23 81       	ldd	r18, Z+3	; 0x03
    1a44:	34 81       	ldd	r19, Z+4	; 0x04
    1a46:	f9 01       	movw	r30, r18
    1a48:	40 81       	ld	r20, Z
    1a4a:	29 81       	ldd	r18, Y+1	; 0x01
    1a4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a4e:	f9 01       	movw	r30, r18
    1a50:	20 81       	ld	r18, Z
    1a52:	24 2b       	or	r18, r20
    1a54:	fc 01       	movw	r30, r24
    1a56:	20 83       	st	Z, r18
		*CSPort |= CSPin; 
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	81 81       	ldd	r24, Z+1	; 0x01
    1a60:	92 81       	ldd	r25, Z+2	; 0x02
    1a62:	29 81       	ldd	r18, Y+1	; 0x01
    1a64:	3a 81       	ldd	r19, Y+2	; 0x02
    1a66:	f9 01       	movw	r30, r18
    1a68:	21 81       	ldd	r18, Z+1	; 0x01
    1a6a:	32 81       	ldd	r19, Z+2	; 0x02
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	40 81       	ld	r20, Z
    1a70:	29 81       	ldd	r18, Y+1	; 0x01
    1a72:	3a 81       	ldd	r19, Y+2	; 0x02
    1a74:	f9 01       	movw	r30, r18
    1a76:	20 81       	ld	r18, Z
    1a78:	24 2b       	or	r18, r20
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	20 83       	st	Z, r18

		/* SPI library specific */
		SPI.begin();
    1a7e:	bb de       	rcall	.-650    	; 0x17f6 <_ZN8SPIClass5beginEv>
    1a80:	84 e0       	ldi	r24, 0x04	; 4
/* handle due, yue, galileo and other hardware */
#if defined(__SAM3X8E__)
		SPI.setClockDivider(4);//hardcoding for due board
#else	
		/* Other Arduino boards */
		SPI.setClockDivider(SPI_CLOCK_DIV2);//for galileo this value should be fine
    1a82:	61 df       	rcall	.-318    	; 0x1946 <_ZN8SPIClass15setClockDividerEh>
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	29 df       	rcall	.-430    	; 0x18da <_ZN8SPIClass11setBitOrderEh>
#endif	

		SPI.setBitOrder(MSBFIRST);
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	47 df       	rcall	.-370    	; 0x191a <_ZN8SPIClass11setDataModeEh>
    1a8c:	0f 90       	pop	r0
		SPI.setDataMode(SPI_MODE0);
    1a8e:	0f 90       	pop	r0
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28

	}
    1a94:	08 95       	ret

00001a96 <_ZN16FT_Transport_SPI11ChangeClockEm>:
	void Exit()
	{
		/* close the spi channel */
		SPI.end();
	}
	void ChangeClock(uint32_t ClockValue)
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <_ZN16FT_Transport_SPI11ChangeClockEm+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <_ZN16FT_Transport_SPI11ChangeClockEm+0x8>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <_ZN16FT_Transport_SPI11ChangeClockEm+0xa>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	4b 83       	std	Y+3, r20	; 0x03
    1aaa:	5c 83       	std	Y+4, r21	; 0x04
    1aac:	6d 83       	std	Y+5, r22	; 0x05
    1aae:	7e 83       	std	Y+6, r23	; 0x06
		/* For due it is straight forward, for others only a switch */
#if defined(__SAM3X8E__)
		SPI.setClockDivider((uint32_t)(84*1000000/ClockValue));//hardcoding for due board
#else	
		/* Other Arduino boards */
		if(ClockValue < 1000000)
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	ad 81       	ldd	r26, Y+5	; 0x05
    1ab6:	be 81       	ldd	r27, Y+6	; 0x06
    1ab8:	80 34       	cpi	r24, 0x40	; 64
    1aba:	22 e4       	ldi	r18, 0x42	; 66
    1abc:	92 07       	cpc	r25, r18
    1abe:	2f e0       	ldi	r18, 0x0F	; 15
    1ac0:	a2 07       	cpc	r26, r18
    1ac2:	b1 05       	cpc	r27, r1
    1ac4:	18 f4       	brcc	.+6      	; 0x1acc <_ZN16FT_Transport_SPI11ChangeClockEm+0x36>
			SPI.setClockDivider(SPI_CLOCK_DIV32);//for galileo this value should be fine
    1ac6:	86 e0       	ldi	r24, 0x06	; 6
    1ac8:	3e df       	rcall	.-388    	; 0x1946 <_ZN8SPIClass15setClockDividerEh>
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <_ZN16FT_Transport_SPI11ChangeClockEm+0x3a>
    1acc:	84 e0       	ldi	r24, 0x04	; 4
		else
			SPI.setClockDivider(SPI_CLOCK_DIV2);//for galileo this value should be fine
    1ace:	3b df       	rcall	.-394    	; 0x1946 <_ZN8SPIClass15setClockDividerEh>
    1ad0:	26 96       	adiw	r28, 0x06	; 6
    1ad2:	0f b6       	in	r0, 0x3f	; 63
#endif			
	}
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <_ZN16FT_Transport_SPI9StartReadEm>:
	/* APIs related to memory read & write/transport */
	void StartRead(uint32_t Addr)
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	2a 97       	sbiw	r28, 0x0a	; 10
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	4f 83       	std	Y+7, r20	; 0x07
    1afc:	58 87       	std	Y+8, r21	; 0x08
    1afe:	69 87       	std	Y+9, r22	; 0x09
    1b00:	7a 87       	std	Y+10, r23	; 0x0a
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Addr;
    1b02:	8f 81       	ldd	r24, Y+7	; 0x07
    1b04:	98 85       	ldd	r25, Y+8	; 0x08
    1b06:	a9 85       	ldd	r26, Y+9	; 0x09
    1b08:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	ab 83       	std	Y+3, r26	; 0x03
    1b10:	bc 83       	std	Y+4, r27	; 0x04
		//digitalWrite(CSPin, LOW);
		*CSPort &= ~CSPin;
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	fc 01       	movw	r30, r24
    1b18:	81 81       	ldd	r24, Z+1	; 0x01
    1b1a:	92 81       	ldd	r25, Z+2	; 0x02
    1b1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b20:	f9 01       	movw	r30, r18
    1b22:	21 81       	ldd	r18, Z+1	; 0x01
    1b24:	32 81       	ldd	r19, Z+2	; 0x02
    1b26:	f9 01       	movw	r30, r18
    1b28:	20 81       	ld	r18, Z
    1b2a:	42 2f       	mov	r20, r18
    1b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b30:	f9 01       	movw	r30, r18
    1b32:	20 81       	ld	r18, Z
    1b34:	20 95       	com	r18
    1b36:	24 23       	and	r18, r20
    1b38:	fc 01       	movw	r30, r24
    1b3a:	20 83       	st	Z, r18
		
		SPI.transfer(A[2]);
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	ae de       	rcall	.-676    	; 0x189c <_ZN8SPIClass8transferEh>
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
		SPI.transfer(A[1]);
    1b42:	ac de       	rcall	.-680    	; 0x189c <_ZN8SPIClass8transferEh>
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	aa de       	rcall	.-684    	; 0x189c <_ZN8SPIClass8transferEh>
		SPI.transfer(A[0]);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	a8 de       	rcall	.-688    	; 0x189c <_ZN8SPIClass8transferEh>
    1b4c:	2a 96       	adiw	r28, 0x0a	; 10
		SPI.transfer(0x00);//dummy byte for read
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
	}
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <_ZN16FT_Transport_SPI10StartWriteEm>:
	void StartWrite(uint32_t Addr)
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	2a 97       	sbiw	r28, 0x0a	; 10
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	4f 83       	std	Y+7, r20	; 0x07
    1b78:	58 87       	std	Y+8, r21	; 0x08
    1b7a:	69 87       	std	Y+9, r22	; 0x09
    1b7c:	7a 87       	std	Y+10, r23	; 0x0a
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Addr;
    1b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b80:	98 85       	ldd	r25, Y+8	; 0x08
    1b82:	a9 85       	ldd	r26, Y+9	; 0x09
    1b84:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	ab 83       	std	Y+3, r26	; 0x03
    1b8c:	bc 83       	std	Y+4, r27	; 0x04
		//digitalWrite(CSPin, LOW);
		*CSPort &= ~CSPin;
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	fc 01       	movw	r30, r24
    1b94:	81 81       	ldd	r24, Z+1	; 0x01
    1b96:	92 81       	ldd	r25, Z+2	; 0x02
    1b98:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b9c:	f9 01       	movw	r30, r18
    1b9e:	21 81       	ldd	r18, Z+1	; 0x01
    1ba0:	32 81       	ldd	r19, Z+2	; 0x02
    1ba2:	f9 01       	movw	r30, r18
    1ba4:	20 81       	ld	r18, Z
    1ba6:	42 2f       	mov	r20, r18
    1ba8:	2d 81       	ldd	r18, Y+5	; 0x05
    1baa:	3e 81       	ldd	r19, Y+6	; 0x06
    1bac:	f9 01       	movw	r30, r18
    1bae:	20 81       	ld	r18, Z
    1bb0:	20 95       	com	r18
    1bb2:	24 23       	and	r18, r20
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	20 83       	st	Z, r18
		
		SPI.transfer(A[2] | 0x80);
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	6f de       	rcall	.-802    	; 0x189c <_ZN8SPIClass8transferEh>
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
		SPI.transfer(A[1]);
    1bc0:	6d de       	rcall	.-806    	; 0x189c <_ZN8SPIClass8transferEh>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	6b de       	rcall	.-810    	; 0x189c <_ZN8SPIClass8transferEh>
		SPI.transfer(A[0]);
    1bc6:	2a 96       	adiw	r28, 0x0a	; 10
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
	}
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <_ZN16FT_Transport_SPI4ReadEm>:
	
	//Read a byte from Addr location
	uint8_t Read(uint32_t Addr)
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	27 97       	sbiw	r28, 0x07	; 7
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	9b 83       	std	Y+3, r25	; 0x03
    1bee:	8a 83       	std	Y+2, r24	; 0x02
    1bf0:	4c 83       	std	Y+4, r20	; 0x04
    1bf2:	5d 83       	std	Y+5, r21	; 0x05
    1bf4:	6e 83       	std	Y+6, r22	; 0x06
    1bf6:	7f 83       	std	Y+7, r23	; 0x07
	{
		uint8_t ReadByte;
		StartRead(Addr);
    1bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfc:	ae 81       	ldd	r26, Y+6	; 0x06
    1bfe:	bf 81       	ldd	r27, Y+7	; 0x07
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	ac 01       	movw	r20, r24
    1c06:	bd 01       	movw	r22, r26
    1c08:	c9 01       	movw	r24, r18
    1c0a:	6b df       	rcall	.-298    	; 0x1ae2 <_ZN16FT_Transport_SPI9StartReadEm>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
		ReadByte = SPI.transfer(0x00);
    1c0e:	46 de       	rcall	.-884    	; 0x189c <_ZN8SPIClass8transferEh>
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
		EndTransfer();
    1c16:	62 d1       	rcall	.+708    	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	27 96       	adiw	r28, 0x07	; 7
    1c1c:	0f b6       	in	r0, 0x3f	; 63
		return (ReadByte);
    1c1e:	f8 94       	cli
	}
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <_ZN16FT_Transport_SPI6Read16Em>:
	
	//read a short from Addr location
	uint16_t Read16(uint32_t Addr)
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	28 97       	sbiw	r28, 0x08	; 8
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
    1c44:	4d 83       	std	Y+5, r20	; 0x05
    1c46:	5e 83       	std	Y+6, r21	; 0x06
    1c48:	6f 83       	std	Y+7, r22	; 0x07
    1c4a:	78 87       	std	Y+8, r23	; 0x08
		{
			uint16_t UUint16;
			uint8_t  A[2];
		};
		///little endian read
		StartRead(Addr);
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	af 81       	ldd	r26, Y+7	; 0x07
    1c52:	b8 85       	ldd	r27, Y+8	; 0x08
    1c54:	2b 81       	ldd	r18, Y+3	; 0x03
    1c56:	3c 81       	ldd	r19, Y+4	; 0x04
    1c58:	ac 01       	movw	r20, r24
    1c5a:	bd 01       	movw	r22, r26
    1c5c:	c9 01       	movw	r24, r18
    1c5e:	41 df       	rcall	.-382    	; 0x1ae2 <_ZN16FT_Transport_SPI9StartReadEm>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
		A[0] = SPI.transfer(0x00);
    1c62:	1c de       	rcall	.-968    	; 0x189c <_ZN8SPIClass8transferEh>
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	19 de       	rcall	.-974    	; 0x189c <_ZN8SPIClass8transferEh>
		A[1] = SPI.transfer(0x00);		
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	35 d1       	rcall	.+618    	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
		EndTransfer();
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	28 96       	adiw	r28, 0x08	; 8
    1c78:	0f b6       	in	r0, 0x3f	; 63
		return (UUint16);
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
	}
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	08 95       	ret

00001c88 <_ZN16FT_Transport_SPI6Read32Em>:
	//read a word from Addr location
	uint32_t Read32(uint32_t Addr)
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	2a 97       	sbiw	r28, 0x0a	; 10
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	4f 83       	std	Y+7, r20	; 0x07
    1ca2:	58 87       	std	Y+8, r21	; 0x08
    1ca4:	69 87       	std	Y+9, r22	; 0x09
    1ca6:	7a 87       	std	Y+10, r23	; 0x0a
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		//little endian read
		StartRead(Addr);		
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	98 85       	ldd	r25, Y+8	; 0x08
    1cac:	a9 85       	ldd	r26, Y+9	; 0x09
    1cae:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1cb4:	ac 01       	movw	r20, r24
    1cb6:	bd 01       	movw	r22, r26
    1cb8:	c9 01       	movw	r24, r18
    1cba:	13 df       	rcall	.-474    	; 0x1ae2 <_ZN16FT_Transport_SPI9StartReadEm>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
		A[0] = SPI.transfer(0x00);
    1cbe:	ee dd       	rcall	.-1060   	; 0x189c <_ZN8SPIClass8transferEh>
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	eb dd       	rcall	.-1066   	; 0x189c <_ZN8SPIClass8transferEh>
		A[1] = SPI.transfer(0x00);		
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	e8 dd       	rcall	.-1072   	; 0x189c <_ZN8SPIClass8transferEh>
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
		A[2] = SPI.transfer(0x00);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	e5 dd       	rcall	.-1078   	; 0x189c <_ZN8SPIClass8transferEh>
    1cd2:	8c 83       	std	Y+4, r24	; 0x04
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
		A[3] = SPI.transfer(0x00);		
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	01 d1       	rcall	.+514    	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	9a 81       	ldd	r25, Y+2	; 0x02
		EndTransfer();
    1cde:	ab 81       	ldd	r26, Y+3	; 0x03
    1ce0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
		return (UUint32);
    1ce6:	2a 96       	adiw	r28, 0x0a	; 10
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
	}
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <_ZN16FT_Transport_SPI5WriteEmh>:
			*Src++ = SPI.transfer(0x00);
		EndTransfer();
	}
	
	//write a byte to Addr location
	void Write(uint32_t Addr, uint8_t Value8)
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	27 97       	sbiw	r28, 0x07	; 7
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	4b 83       	std	Y+3, r20	; 0x03
    1d12:	5c 83       	std	Y+4, r21	; 0x04
    1d14:	6d 83       	std	Y+5, r22	; 0x05
    1d16:	7e 83       	std	Y+6, r23	; 0x06
    1d18:	2f 83       	std	Y+7, r18	; 0x07
	{	
		StartWrite(Addr);
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	ad 81       	ldd	r26, Y+5	; 0x05
    1d20:	be 81       	ldd	r27, Y+6	; 0x06
    1d22:	29 81       	ldd	r18, Y+1	; 0x01
    1d24:	3a 81       	ldd	r19, Y+2	; 0x02
    1d26:	ac 01       	movw	r20, r24
    1d28:	bd 01       	movw	r22, r26
    1d2a:	c9 01       	movw	r24, r18
    1d2c:	18 df       	rcall	.-464    	; 0x1b5e <_ZN16FT_Transport_SPI10StartWriteEm>
    1d2e:	8f 81       	ldd	r24, Y+7	; 0x07
		SPI.transfer(Value8);
    1d30:	b5 dd       	rcall	.-1174   	; 0x189c <_ZN8SPIClass8transferEh>
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
		EndTransfer();
    1d36:	d2 d0       	rcall	.+420    	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
    1d38:	27 96       	adiw	r28, 0x07	; 7
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
	}
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <_ZN16FT_Transport_SPI7Write16Emj>:
	//write a short to Addr location
	void Write16(uint32_t Addr, uint16_t Value16)
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	2a 97       	sbiw	r28, 0x0a	; 10
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	4d 83       	std	Y+5, r20	; 0x05
    1d64:	5e 83       	std	Y+6, r21	; 0x06
    1d66:	6f 83       	std	Y+7, r22	; 0x07
    1d68:	78 87       	std	Y+8, r23	; 0x08
    1d6a:	3a 87       	std	Y+10, r19	; 0x0a
    1d6c:	29 87       	std	Y+9, r18	; 0x09
		union
		{
			uint16_t UUint16;
			uint8_t  A[2];
		};
		UUint16 = Value16;
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
		///little endian read
		StartWrite(Addr);
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	af 81       	ldd	r26, Y+7	; 0x07
    1d7c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	ac 01       	movw	r20, r24
    1d84:	bd 01       	movw	r22, r26
    1d86:	c9 01       	movw	r24, r18
    1d88:	ea de       	rcall	.-556    	; 0x1b5e <_ZN16FT_Transport_SPI10StartWriteEm>
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
		SPI.transfer(A[0]);
    1d8c:	87 dd       	rcall	.-1266   	; 0x189c <_ZN8SPIClass8transferEh>
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	85 dd       	rcall	.-1270   	; 0x189c <_ZN8SPIClass8transferEh>
		SPI.transfer(A[1]);		
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	a2 d0       	rcall	.+324    	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
		EndTransfer();
    1d98:	2a 96       	adiw	r28, 0x0a	; 10
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
	}	
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <_ZN16FT_Transport_SPI7Write32Emm>:
	//write a word to Addr location
	void Write32(uint32_t Addr, uint32_t Value32)
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	2e 97       	sbiw	r28, 0x0e	; 14
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
    1dc6:	4f 83       	std	Y+7, r20	; 0x07
    1dc8:	58 87       	std	Y+8, r21	; 0x08
    1dca:	69 87       	std	Y+9, r22	; 0x09
    1dcc:	7a 87       	std	Y+10, r23	; 0x0a
    1dce:	0b 87       	std	Y+11, r16	; 0x0b
    1dd0:	1c 87       	std	Y+12, r17	; 0x0c
    1dd2:	2d 87       	std	Y+13, r18	; 0x0d
    1dd4:	3e 87       	std	Y+14, r19	; 0x0e
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Value32;
    1dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dda:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ddc:	be 85       	ldd	r27, Y+14	; 0x0e
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	ab 83       	std	Y+3, r26	; 0x03
    1de4:	bc 83       	std	Y+4, r27	; 0x04
		///little endian read
		StartWrite(Addr);
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	98 85       	ldd	r25, Y+8	; 0x08
    1dea:	a9 85       	ldd	r26, Y+9	; 0x09
    1dec:	ba 85       	ldd	r27, Y+10	; 0x0a
    1dee:	2d 81       	ldd	r18, Y+5	; 0x05
    1df0:	3e 81       	ldd	r19, Y+6	; 0x06
    1df2:	ac 01       	movw	r20, r24
    1df4:	bd 01       	movw	r22, r26
    1df6:	c9 01       	movw	r24, r18
    1df8:	b2 de       	rcall	.-668    	; 0x1b5e <_ZN16FT_Transport_SPI10StartWriteEm>
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
		SPI.transfer(A[0]);
    1dfc:	4f dd       	rcall	.-1378   	; 0x189c <_ZN8SPIClass8transferEh>
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	4d dd       	rcall	.-1382   	; 0x189c <_ZN8SPIClass8transferEh>
		SPI.transfer(A[1]);		
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	4b dd       	rcall	.-1386   	; 0x189c <_ZN8SPIClass8transferEh>
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
		SPI.transfer(A[2]);
    1e08:	49 dd       	rcall	.-1390   	; 0x189c <_ZN8SPIClass8transferEh>
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
		SPI.transfer(A[3]);		
    1e0e:	66 d0       	rcall	.+204    	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
    1e10:	2e 96       	adiw	r28, 0x0e	; 14
    1e12:	0f b6       	in	r0, 0x3f	; 63
		EndTransfer();
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
	}	
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	08 95       	ret

00001e26 <_ZN16FT_Transport_SPI5WriteEmPhm>:
	
	void Write(uint32_t Addr, uint8_t *Src, uint32_t NBytes)
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	60 97       	sbiw	r28, 0x10	; 16
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	4f 83       	std	Y+7, r20	; 0x07
    1e48:	58 87       	std	Y+8, r21	; 0x08
    1e4a:	69 87       	std	Y+9, r22	; 0x09
    1e4c:	7a 87       	std	Y+10, r23	; 0x0a
    1e4e:	3c 87       	std	Y+12, r19	; 0x0c
    1e50:	2b 87       	std	Y+11, r18	; 0x0b
    1e52:	ed 86       	std	Y+13, r14	; 0x0d
    1e54:	fe 86       	std	Y+14, r15	; 0x0e
    1e56:	0f 87       	std	Y+15, r16	; 0x0f
    1e58:	18 8b       	std	Y+16, r17	; 0x10
	{
		uint32_t i;
		StartWrite(Addr);
    1e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5c:	98 85       	ldd	r25, Y+8	; 0x08
    1e5e:	a9 85       	ldd	r26, Y+9	; 0x09
    1e60:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e62:	2d 81       	ldd	r18, Y+5	; 0x05
    1e64:	3e 81       	ldd	r19, Y+6	; 0x06
    1e66:	ac 01       	movw	r20, r24
    1e68:	bd 01       	movw	r22, r26
    1e6a:	c9 01       	movw	r24, r18
    1e6c:	78 de       	rcall	.-784    	; 0x1b5e <_ZN16FT_Transport_SPI10StartWriteEm>
    1e6e:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<NBytes;i++)
    1e70:	1a 82       	std	Y+2, r1	; 0x02
    1e72:	1b 82       	std	Y+3, r1	; 0x03
    1e74:	1c 82       	std	Y+4, r1	; 0x04
    1e76:	15 c0       	rjmp	.+42     	; 0x1ea2 <_ZN16FT_Transport_SPI5WriteEmPhm+0x7c>
    1e78:	8b 85       	ldd	r24, Y+11	; 0x0b
			SPI.transfer(*Src++);
    1e7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	2f 5f       	subi	r18, 0xFF	; 255
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	3c 87       	std	Y+12, r19	; 0x0c
    1e84:	2b 87       	std	Y+11, r18	; 0x0b
    1e86:	fc 01       	movw	r30, r24
    1e88:	80 81       	ld	r24, Z
    1e8a:	08 dd       	rcall	.-1520   	; 0x189c <_ZN8SPIClass8transferEh>
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
	
	void Write(uint32_t Addr, uint8_t *Src, uint32_t NBytes)
	{
		uint32_t i;
		StartWrite(Addr);
		for(i=0;i<NBytes;i++)
    1e90:	ab 81       	ldd	r26, Y+3	; 0x03
    1e92:	bc 81       	ldd	r27, Y+4	; 0x04
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	a1 1d       	adc	r26, r1
    1e98:	b1 1d       	adc	r27, r1
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	ab 83       	std	Y+3, r26	; 0x03
    1ea0:	bc 83       	std	Y+4, r27	; 0x04
    1ea2:	29 81       	ldd	r18, Y+1	; 0x01
    1ea4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ea8:	5c 81       	ldd	r21, Y+4	; 0x04
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	af 85       	ldd	r26, Y+15	; 0x0f
    1eb0:	b8 89       	ldd	r27, Y+16	; 0x10
    1eb2:	28 17       	cp	r18, r24
    1eb4:	39 07       	cpc	r19, r25
    1eb6:	4a 07       	cpc	r20, r26
    1eb8:	5b 07       	cpc	r21, r27
    1eba:	f0 f2       	brcs	.-68     	; 0x1e78 <_ZN16FT_Transport_SPI5WriteEmPhm+0x52>
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
			SPI.transfer(*Src++);
		EndTransfer();
    1ec0:	0d d0       	rcall	.+26     	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
    1ec2:	60 96       	adiw	r28, 0x10	; 16
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
	}
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	ef 90       	pop	r14
    1eda:	08 95       	ret

00001edc <_ZN16FT_Transport_SPI11EndTransferEv>:
		SPI.transfer(A[1]);
		SPI.transfer(A[0]);
	}

	//de assert CSpin
	void EndTransfer(void)
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <_ZN16FT_Transport_SPI11EndTransferEv+0x6>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	{
		//digitalWrite(CSPin, HIGH);
		*CSPort |= CSPin;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	fc 01       	movw	r30, r24
    1ef0:	81 81       	ldd	r24, Z+1	; 0x01
    1ef2:	92 81       	ldd	r25, Z+2	; 0x02
    1ef4:	29 81       	ldd	r18, Y+1	; 0x01
    1ef6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ef8:	f9 01       	movw	r30, r18
    1efa:	21 81       	ldd	r18, Z+1	; 0x01
    1efc:	32 81       	ldd	r19, Z+2	; 0x02
    1efe:	f9 01       	movw	r30, r18
    1f00:	40 81       	ld	r20, Z
    1f02:	29 81       	ldd	r18, Y+1	; 0x01
    1f04:	3a 81       	ldd	r19, Y+2	; 0x02
    1f06:	f9 01       	movw	r30, r18
    1f08:	20 81       	ld	r18, Z
    1f0a:	24 2b       	or	r18, r20
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	20 83       	st	Z, r18
	}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <_ZN16FT_Transport_SPI8TransferEh>:
	//transfer a single byte
	void Transfer(uint8_t Value8)
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <_ZN16FT_Transport_SPI8TransferEh+0x6>
    1f20:	1f 92       	push	r1
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	6b 83       	std	Y+3, r22	; 0x03
	{
		SPI.transfer(Value8);
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	b6 dc       	rcall	.-1684   	; 0x189c <_ZN8SPIClass8transferEh>
    1f30:	0f 90       	pop	r0
	}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	08 95       	ret

00001f3c <_ZN16FT_Transport_SPI10Transfer32Em>:
		UUint16 = Value16;
		A[0] = SPI.transfer(A[0]);
		A[1] = SPI.transfer(A[1]);		
	}
	//transfer 4 bytes
	void Transfer32(uint32_t Value32)
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	2a 97       	sbiw	r28, 0x0a	; 10
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	4f 83       	std	Y+7, r20	; 0x07
    1f56:	58 87       	std	Y+8, r21	; 0x08
    1f58:	69 87       	std	Y+9, r22	; 0x09
    1f5a:	7a 87       	std	Y+10, r23	; 0x0a
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Value32;		
    1f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5e:	98 85       	ldd	r25, Y+8	; 0x08
    1f60:	a9 85       	ldd	r26, Y+9	; 0x09
    1f62:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	ab 83       	std	Y+3, r26	; 0x03
    1f6a:	bc 83       	std	Y+4, r27	; 0x04
		SPI.transfer(A[0]);
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	96 dc       	rcall	.-1748   	; 0x189c <_ZN8SPIClass8transferEh>
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
		SPI.transfer(A[1]);
    1f72:	94 dc       	rcall	.-1752   	; 0x189c <_ZN8SPIClass8transferEh>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	92 dc       	rcall	.-1756   	; 0x189c <_ZN8SPIClass8transferEh>
		SPI.transfer(A[2]);
    1f78:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7a:	90 dc       	rcall	.-1760   	; 0x189c <_ZN8SPIClass8transferEh>
    1f7c:	2a 96       	adiw	r28, 0x0a	; 10
		SPI.transfer(A[3]);		
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
	}
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <_Z15BootupConfigurev>:

FT801IMPL_SPI FTImpl(FT_CS_PIN, FT_INT_PIN);

/* Api to bootup FT801, verify FT801 hardware and configure display/audio pins */
/* Returns 0 in case of success and 1 in case of failure */
int16_t BootupConfigure() {
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <_Z15BootupConfigurev+0x6>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <_Z15BootupConfigurev+0x8>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
   uint32_t chipid = 0;
    1f9a:	19 82       	std	Y+1, r1	; 0x01
    1f9c:	1a 82       	std	Y+2, r1	; 0x02
    1f9e:	1b 82       	std	Y+3, r1	; 0x03
    1fa0:	1c 82       	std	Y+4, r1	; 0x04
   Serial.println("Init");
    1fa2:	6a e0       	ldi	r22, 0x0A	; 10
    1fa4:	71 e0       	ldi	r23, 0x01	; 1
    1fa6:	80 ef       	ldi	r24, 0xF0	; 240
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
   Serial.println(FTImpl.Init(FT_DISPLAY_RESOLUTION), HEX); //configure the display to the WQVGA
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	84 e4       	ldi	r24, 0x44	; 68
    1fb6:	93 e0       	ldi	r25, 0x03	; 3
    1fb8:	ef d0       	rcall	.+478    	; 0x2198 <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj>
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	40 e1       	ldi	r20, 0x10	; 16
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	80 ef       	ldi	r24, 0xF0	; 240
    1fc6:	92 e0       	ldi	r25, 0x02	; 2
    1fc8:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN5Print7printlnEii>
    1fcc:	6f e0       	ldi	r22, 0x0F	; 15
   Serial.println("Finished Init");
    1fce:	71 e0       	ldi	r23, 0x01	; 1
    1fd0:	80 ef       	ldi	r24, 0xF0	; 240
    1fd2:	92 e0       	ldi	r25, 0x02	; 2
    1fd4:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    1fd8:	64 e1       	ldi	r22, 0x14	; 20

   delay(20); //for safer side
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	32 db       	rcall	.-2460   	; 0x1646 <delay>
    1fe2:	6d e1       	ldi	r22, 0x1D	; 29
    1fe4:	71 e0       	ldi	r23, 0x01	; 1
   Serial.println("Read Chip ID");
    1fe6:	80 ef       	ldi	r24, 0xF0	; 240
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
   chipid = FTImpl.Read32(FT_ROM_CHIPID);
    1ff2:	6c e0       	ldi	r22, 0x0C	; 12
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	84 e4       	ldi	r24, 0x44	; 68
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	46 de       	rcall	.-884    	; 0x1c88 <_ZN16FT_Transport_SPI6Read32Em>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	ab 83       	std	Y+3, r26	; 0x03
    2006:	bc 83       	std	Y+4, r27	; 0x04
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	ab 81       	ldd	r26, Y+3	; 0x03

   /* Identify the chip */
   if (FT801_CHIPID != chipid) {
    200e:	bc 81       	ldd	r27, Y+4	; 0x04
    2010:	88 30       	cpi	r24, 0x08	; 8
    2012:	21 e0       	ldi	r18, 0x01	; 1
    2014:	92 07       	cpc	r25, r18
    2016:	a2 07       	cpc	r26, r18
    2018:	b1 05       	cpc	r27, r1
    201a:	a9 f0       	breq	.+42     	; 0x2046 <_Z15BootupConfigurev+0xb8>
    201c:	6a e2       	ldi	r22, 0x2A	; 42
    201e:	71 e0       	ldi	r23, 0x01	; 1
    2020:	80 ef       	ldi	r24, 0xF0	; 240
      Serial.print("Error in chip id read ");
    2022:	92 e0       	ldi	r25, 0x02	; 2
    2024:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN5Print5printEPKc>
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	ab 81       	ldd	r26, Y+3	; 0x03
      Serial.println(chipid, HEX);
    202e:	bc 81       	ldd	r27, Y+4	; 0x04
    2030:	20 e1       	ldi	r18, 0x10	; 16
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	ac 01       	movw	r20, r24
    2036:	bd 01       	movw	r22, r26
    2038:	80 ef       	ldi	r24, 0xF0	; 240
    203a:	92 e0       	ldi	r25, 0x02	; 2
    203c:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN5Print7printlnEmi>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	11 c0       	rjmp	.+34     	; 0x2068 <_Z15BootupConfigurev+0xda>
      return 1;
    2046:	61 e4       	ldi	r22, 0x41	; 65
    2048:	71 e0       	ldi	r23, 0x01	; 1
    204a:	80 ef       	ldi	r24, 0xF0	; 240
   }

   /* Set the Display & audio pins */
   //FTImpl.SetDisplayEnablePin(FT_DISPENABLE_PIN);
   // FTImpl.SetAudioEnablePin(FT_AUDIOENABLE_PIN);
   Serial.println("Turn on BL");
    204c:	92 e0       	ldi	r25, 0x02	; 2
    204e:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    2052:	84 e4       	ldi	r24, 0x44	; 68
    2054:	93 e0       	ldi	r25, 0x03	; 3
    2056:	bb d0       	rcall	.+374    	; 0x21ce <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv>
   FTImpl.DisplayOn();
    2058:	6c e4       	ldi	r22, 0x4C	; 76
    205a:	71 e0       	ldi	r23, 0x01	; 1
    205c:	80 ef       	ldi	r24, 0xF0	; 240
    205e:	92 e0       	ldi	r25, 0x02	; 2
   //FTImpl.AudioOn();
   Serial.println("Finish Startup");
    2060:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
   return 0;
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
}
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <_Z10HelloWorldv>:

/* API to display Hello World string on the screen */
void HelloWorld() {
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	66 97       	sbiw	r28, 0x16	; 22
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
   /* Change the below string for experimentation */
   const char Display_string[] = "Formula Electric 2015";
    2092:	26 e1       	ldi	r18, 0x16	; 22
    2094:	eb e5       	ldi	r30, 0x5B	; 91
    2096:	f1 e0       	ldi	r31, 0x01	; 1
    2098:	ce 01       	movw	r24, r28
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	dc 01       	movw	r26, r24
    209e:	01 90       	ld	r0, Z+
    20a0:	0d 92       	st	X+, r0
    20a2:	2a 95       	dec	r18
    20a4:	e1 f7       	brne	.-8      	; 0x209e <_Z10HelloWorldv+0x28>

   /* Display list to display "Hello World" at the centre of display area */
   FTImpl.DLStart(); //start the display list. Note DLStart and DLEnd are helper apis, Cmd_DLStart() and Display() can also be utilized.
    20a6:	84 e4       	ldi	r24, 0x44	; 68
    20a8:	93 e0       	ldi	r25, 0x03	; 3
    20aa:	bd d0       	rcall	.+378    	; 0x2226 <_ZN5FT_GCI16FT_Transport_SPIE7DLStartEv>
    20ac:	2f ef       	ldi	r18, 0xFF	; 255
   FTImpl.ColorRGB(0xFF, 0xFF, 0xFF); //set the color of the string to white color
    20ae:	4f ef       	ldi	r20, 0xFF	; 255
    20b0:	6f ef       	ldi	r22, 0xFF	; 255
    20b2:	84 e4       	ldi	r24, 0x44	; 68
    20b4:	93 e0       	ldi	r25, 0x03	; 3
    20b6:	cc d0       	rcall	.+408    	; 0x2250 <_ZN5FT_GCI16FT_Transport_SPIE8ColorRGBEhhh>
    20b8:	ce 01       	movw	r24, r28
    20ba:	01 96       	adiw	r24, 0x01	; 1
   FTImpl.Cmd_Text(FT_DISPLAYWIDTH / 2, FT_DISPLAYHEIGHT / 2, 29, FT_OPT_CENTER,
      Display_string); //display "Hello World at the center of the screen using inbuilt font handle 29 "
    20bc:	7c 01       	movw	r14, r24
    20be:	00 e0       	ldi	r16, 0x00	; 0
    20c0:	16 e0       	ldi	r17, 0x06	; 6
    20c2:	2d e1       	ldi	r18, 0x1D	; 29
    20c4:	48 e8       	ldi	r20, 0x88	; 136
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	60 ef       	ldi	r22, 0xF0	; 240
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	84 e4       	ldi	r24, 0x44	; 68
    20ce:	93 e0       	ldi	r25, 0x03	; 3
    20d0:	e9 d0       	rcall	.+466    	; 0x22a4 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_TextEiihjPKc>
    20d2:	84 e4       	ldi	r24, 0x44	; 68
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	58 d1       	rcall	.+688    	; 0x2388 <_ZN5FT_GCI16FT_Transport_SPIE5DLEndEv>
   FTImpl.DLEnd();   //end the display list
    20d8:	84 e4       	ldi	r24, 0x44	; 68
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	67 d1       	rcall	.+718    	; 0x23ac <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv>
    20de:	66 96       	adiw	r28, 0x16	; 22
   FTImpl.Finish(); //render the display list and wait for the completion of the DL
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
}
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	ff 90       	pop	r15
    20f4:	ef 90       	pop	r14
    20f6:	08 95       	ret

000020f8 <setup>:

/* bootup the module and display "Hello World" on screen */
void setup() {
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
   /* Initialize serial print related functionality */
   Serial.begin(9600);
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	55 e2       	ldi	r21, 0x25	; 37
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	80 ef       	ldi	r24, 0xF0	; 240
    210a:	92 e0       	ldi	r25, 0x02	; 2
    210c:	0e 94 01 02 	call	0x402	; 0x402 <_ZN14HardwareSerial5beginEl>

   /* Set the Display Enable pin*/
   Serial.println("--Start Application--");
    2110:	61 e7       	ldi	r22, 0x71	; 113
    2112:	71 e0       	ldi	r23, 0x01	; 1
    2114:	80 ef       	ldi	r24, 0xF0	; 240
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
   if (BootupConfigure()) {
    211c:	38 df       	rcall	.-400    	; 0x1f8e <_Z15BootupConfigurev>
    211e:	21 e0       	ldi	r18, 0x01	; 1
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	09 f4       	brne	.+2      	; 0x2126 <setup+0x2e>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	22 23       	and	r18, r18
    2128:	09 f4       	brne	.+2      	; 0x212c <setup+0x34>
    212a:	a5 df       	rcall	.-182    	; 0x2076 <_Z10HelloWorldv>
      //error case - do not do any thing
   } else {
      HelloWorld();
    212c:	67 e8       	ldi	r22, 0x87	; 135
    212e:	71 e0       	ldi	r23, 0x01	; 1
   }
   Serial.println("--End Application--");
    2130:	80 ef       	ldi	r24, 0xF0	; 240
    2132:	92 e0       	ldi	r25, 0x02	; 2
    2134:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
}
    213c:	08 95       	ret

0000213e <main>:

int main() {
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
   init();
    2146:	b2 da       	rcall	.-2716   	; 0x16ac <init>
    2148:	d7 df       	rcall	.-82     	; 0x20f8 <setup>
   setup();
    214a:	60 ed       	ldi	r22, 0xD0	; 208
    214c:	77 e0       	ldi	r23, 0x07	; 7

   delay(2000);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	79 da       	rcall	.-2830   	; 0x1646 <delay>
    2154:	ff cf       	rjmp	.-2      	; 0x2154 <main+0x16>

00002156 <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh>:
FT801Impl<FT_Trans>::FT801Impl(void)
{
	
}
template<class FT_Trans>
FT801Impl<FT_Trans>::FT801Impl(uint8_t csPin, uint8_t IntPin)
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	00 d0       	rcall	.+0      	; 0x215c <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh+0x6>
    215c:	00 d0       	rcall	.+0      	; 0x215e <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh+0x8>
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	6b 83       	std	Y+3, r22	; 0x03
    2168:	4c 83       	std	Y+4, r20	; 0x04
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	63 d1       	rcall	.+710    	; 0x2436 <_ZN5FT_GCI16FT_Transport_SPIEC1Ev>
    2170:	89 81       	ldd	r24, Y+1	; 0x01
{
	//all the three pins will be utilized
	FT_GC<FT_Trans>::CSPin = csPin;
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	fc 01       	movw	r30, r24
    2178:	20 83       	st	Z, r18
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
	FT_GC<FT_Trans>::IntPin = IntPin;
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	fc 01       	movw	r30, r24
    2186:	34 87       	std	Z+12, r19	; 0x0c
    2188:	23 87       	std	Z+11, r18	; 0x0b
    218a:	0f 90       	pop	r0
}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	08 95       	ret

00002198 <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj>:
{
	//do nothing
}
/* api to set the resolution of output display */
template<class FT_Trans>
FT_Status FT801Impl<FT_Trans>::Init(uint8_t ResType, uint16_t options1=0)
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	00 d0       	rcall	.+0      	; 0x219e <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj+0x8>
    21a0:	1f 92       	push	r1
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9a 83       	std	Y+2, r25	; 0x02
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	6b 83       	std	Y+3, r22	; 0x03
    21ac:	5d 83       	std	Y+5, r21	; 0x05
    21ae:	4c 83       	std	Y+4, r20	; 0x04
{
	return (FT_GC<FT_Trans>::Init(ResType,options1) );
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	2c 81       	ldd	r18, Y+4	; 0x04
    21b6:	3d 81       	ldd	r19, Y+5	; 0x05
    21b8:	a9 01       	movw	r20, r18
    21ba:	6b 81       	ldd	r22, Y+3	; 0x03
    21bc:	98 d1       	rcall	.+816    	; 0x24ee <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj>
    21be:	0f 90       	pop	r0
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv>:
      (1 << AudioGpioPin) | FT_Trans::Read(REG_GPIO_DIR));
}

template<class FT_Trans>
/* Apis to enable/disable backlight */
void FT_GC<FT_Trans>::DisplayOn(void) {
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv+0x8>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
   /* switch on the display, 1 means enable and 0 means disable */
   FT_Trans::Write(REG_GPIO, (1 << DispGpioPin) | FT_Trans::Read(REG_GPIO));
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	fc 01       	movw	r30, r24
    21e4:	85 85       	ldd	r24, Z+13	; 0x0d
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv+0x26>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	2a 95       	dec	r18
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv+0x22>
    21f8:	18 2f       	mov	r17, r24
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	40 e9       	ldi	r20, 0x90	; 144
    2200:	54 e2       	ldi	r21, 0x24	; 36
    2202:	60 e1       	ldi	r22, 0x10	; 16
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	e8 dc       	rcall	.-1584   	; 0x1bd8 <_ZN16FT_Transport_SPI4ReadEm>
    2208:	81 2b       	or	r24, r17
    220a:	28 2f       	mov	r18, r24
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	40 e9       	ldi	r20, 0x90	; 144
    2212:	54 e2       	ldi	r21, 0x24	; 36
    2214:	60 e1       	ldi	r22, 0x10	; 16
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	6f dd       	rcall	.-1314   	; 0x1cf8 <_ZN16FT_Transport_SPI5WriteEmh>
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0

}
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	08 95       	ret

00002226 <_ZN5FT_GCI16FT_Transport_SPIE7DLStartEv>:

template<class FT_Trans>
/* Special apis */
//apis for ease of usage in FT_GC
//inserts cmd_dlstart() followed by clear(1,1,1) graphics command
void FT_GC<FT_Trans>::DLStart(void) {
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <_ZN5FT_GCI16FT_Transport_SPIE7DLStartEv+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
   Cmd_DLStart();
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	bf d1       	rcall	.+894    	; 0x25b8 <_ZN5FT_GCI16FT_Transport_SPIE11Cmd_DLStartEv>
    223a:	89 81       	ldd	r24, Y+1	; 0x01
   Clear(1, 1, 1);
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	21 e0       	ldi	r18, 0x01	; 1
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	61 e0       	ldi	r22, 0x01	; 1
    2244:	cc d1       	rcall	.+920    	; 0x25de <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh>
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
}
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	08 95       	ret

00002250 <_ZN5FT_GCI16FT_Transport_SPIE8ColorRGBEhhh>:
   return (WriteCmd(
      (32UL << 24) | ((r & 1L) << 3) | ((g & 1L) << 2) | ((b & 1L) << 1)
         | ((a & 1L) << 0)));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::ColorRGB(uint8_t red, uint8_t green,
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	29 97       	sbiw	r28, 0x09	; 9
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	6f 83       	std	Y+7, r22	; 0x07
    226a:	48 87       	std	Y+8, r20	; 0x08
    226c:	29 87       	std	Y+9, r18	; 0x09
   // WriteCmd((4UL << 24) | ((red & 0xFFL) << 16) | ((green & 0xFFL) << 8) | ((blue & 0xFFL) << 0)) );
   union {
      uint32_t UUInt32;
      uint8_t A[4];
   };
   A[0] = blue;
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	89 83       	std	Y+1, r24	; 0x01
   A[1] = green;
    2272:	88 85       	ldd	r24, Y+8	; 0x08
    2274:	8a 83       	std	Y+2, r24	; 0x02
   A[2] = red;
    2276:	8f 81       	ldd	r24, Y+7	; 0x07
    2278:	8b 83       	std	Y+3, r24	; 0x03
   A[3] = 4;
    227a:	84 e0       	ldi	r24, 0x04	; 4
    227c:	8c 83       	std	Y+4, r24	; 0x04
   return (WriteCmd(UUInt32));
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	ab 81       	ldd	r26, Y+3	; 0x03
    2284:	bc 81       	ldd	r27, Y+4	; 0x04
    2286:	2d 81       	ldd	r18, Y+5	; 0x05
    2288:	3e 81       	ldd	r19, Y+6	; 0x06
    228a:	ac 01       	movw	r20, r24
    228c:	bd 01       	movw	r22, r26
    228e:	c9 01       	movw	r24, r18
    2290:	d9 d1       	rcall	.+946    	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    2292:	29 96       	adiw	r28, 0x09	; 9
}
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	08 95       	ret

000022a4 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_TextEiihjPKc>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Swap(void) {
   return (WriteCmd(CMD_SWAP));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Text(int16_t x, int16_t y, uint8_t Font,
    22a4:	ef 92       	push	r14
    22a6:	ff 92       	push	r15
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	2c 97       	sbiw	r28, 0x0c	; 12
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	9b 83       	std	Y+3, r25	; 0x03
    22c2:	8a 83       	std	Y+2, r24	; 0x02
    22c4:	7d 83       	std	Y+5, r23	; 0x05
    22c6:	6c 83       	std	Y+4, r22	; 0x04
    22c8:	5f 83       	std	Y+7, r21	; 0x07
    22ca:	4e 83       	std	Y+6, r20	; 0x06
    22cc:	28 87       	std	Y+8, r18	; 0x08
    22ce:	1a 87       	std	Y+10, r17	; 0x0a
    22d0:	09 87       	std	Y+9, r16	; 0x09
    22d2:	fc 86       	std	Y+12, r15	; 0x0c
    22d4:	eb 86       	std	Y+11, r14	; 0x0b
   uint16_t Options, const char *s) {
   FT_GEStatus Status;
   WriteCmd(CMD_TEXT);
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	9b 81       	ldd	r25, Y+3	; 0x03
    22da:	4c e0       	ldi	r20, 0x0C	; 12
    22dc:	5f ef       	ldi	r21, 0xFF	; 255
    22de:	6f ef       	ldi	r22, 0xFF	; 255
    22e0:	7f ef       	ldi	r23, 0xFF	; 255
    22e2:	b0 d1       	rcall	.+864    	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    22e4:	8e 81       	ldd	r24, Y+6	; 0x06
   WriteCmd(((y & 0xFFFFL) << 16) | (x & 0xFFFFL));
    22e6:	9f 81       	ldd	r25, Y+7	; 0x07
    22e8:	aa 27       	eor	r26, r26
    22ea:	97 fd       	sbrc	r25, 7
    22ec:	a0 95       	com	r26
    22ee:	ba 2f       	mov	r27, r26
    22f0:	ac 01       	movw	r20, r24
    22f2:	33 27       	eor	r19, r19
    22f4:	22 27       	eor	r18, r18
    22f6:	8c 81       	ldd	r24, Y+4	; 0x04
    22f8:	9d 81       	ldd	r25, Y+5	; 0x05
    22fa:	aa 27       	eor	r26, r26
    22fc:	97 fd       	sbrc	r25, 7
    22fe:	a0 95       	com	r26
    2300:	ba 2f       	mov	r27, r26
    2302:	aa 27       	eor	r26, r26
    2304:	bb 27       	eor	r27, r27
    2306:	82 2b       	or	r24, r18
    2308:	93 2b       	or	r25, r19
    230a:	a4 2b       	or	r26, r20
    230c:	b5 2b       	or	r27, r21
    230e:	2a 81       	ldd	r18, Y+2	; 0x02
    2310:	3b 81       	ldd	r19, Y+3	; 0x03
    2312:	ac 01       	movw	r20, r24
    2314:	bd 01       	movw	r22, r26
    2316:	c9 01       	movw	r24, r18
    2318:	95 d1       	rcall	.+810    	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
   WriteCmd(((Options & 0xFFFFL) << 16) | (Font & 0xFFFFL));
    231e:	cc 01       	movw	r24, r24
    2320:	a0 e0       	ldi	r26, 0x00	; 0
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	ac 01       	movw	r20, r24
    2326:	33 27       	eor	r19, r19
    2328:	22 27       	eor	r18, r18
    232a:	88 85       	ldd	r24, Y+8	; 0x08
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e0       	ldi	r26, 0x00	; 0
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	aa 27       	eor	r26, r26
    2336:	bb 27       	eor	r27, r27
    2338:	82 2b       	or	r24, r18
    233a:	93 2b       	or	r25, r19
    233c:	a4 2b       	or	r26, r20
    233e:	b5 2b       	or	r27, r21
    2340:	2a 81       	ldd	r18, Y+2	; 0x02
    2342:	3b 81       	ldd	r19, Y+3	; 0x03
    2344:	ac 01       	movw	r20, r24
    2346:	bd 01       	movw	r22, r26
    2348:	c9 01       	movw	r24, r18
    234a:	7c d1       	rcall	.+760    	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    234c:	8b 85       	ldd	r24, Y+11	; 0x0b
    234e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2350:	82 d7       	rcall	.+3844   	; 0x3256 <strlen>
   Status = WriteCmd((uint8_t *) s, strlen((const char *) s) + 1);
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	cc 01       	movw	r24, r24
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	ea 81       	ldd	r30, Y+2	; 0x02
    2360:	fb 81       	ldd	r31, Y+3	; 0x03
    2362:	9c 01       	movw	r18, r24
    2364:	ad 01       	movw	r20, r26
    2366:	cf 01       	movw	r24, r30
    2368:	aa d1       	rcall	.+852    	; 0x26be <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm>
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	2c 96       	adiw	r28, 0x0c	; 12
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62

   return Status;
    2376:	0f be       	out	0x3f, r0	; 63
}
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	08 95       	ret

00002388 <_ZN5FT_GCI16FT_Transport_SPIE5DLEndEv>:
   Clear(1, 1, 1);
}

template<class FT_Trans>
//inserts display() gpu instruction at the end and inserts cmd_swap() command
void FT_GC<FT_Trans>::DLEnd(void) {
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	00 d0       	rcall	.+0      	; 0x238e <_ZN5FT_GCI16FT_Transport_SPIE5DLEndEv+0x6>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	9a 83       	std	Y+2, r25	; 0x02
    2394:	89 83       	std	Y+1, r24	; 0x01
   Display();
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	d4 d1       	rcall	.+936    	; 0x2744 <_ZN5FT_GCI16FT_Transport_SPIE7DisplayEv>
    239c:	89 81       	ldd	r24, Y+1	; 0x01
   Cmd_Swap();
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	e3 d1       	rcall	.+966    	; 0x2768 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_SwapEv>
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
}
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv>:
   return FT_GE_OK;
}

template<class FT_Trans>
//flushes out all the commands to FT_GC and waits for the completion of execution
FT_GEStatus FT_GC<FT_Trans>::Finish(void) {
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x6>
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x8>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t ReadPrt;

   if (TrnsFlag) {
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	fc 01       	movw	r30, r24
    23c2:	86 81       	ldd	r24, Z+6	; 0x06
    23c4:	88 23       	and	r24, r24
    23c6:	19 f0       	breq	.+6      	; 0x23ce <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x22>
      EndTransferCmd();
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	e0 d1       	rcall	.+960    	; 0x278e <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
   }
   FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	fc 01       	movw	r30, r24
    23d4:	20 89       	ldd	r18, Z+16	; 0x10
    23d6:	31 89       	ldd	r19, Z+17	; 0x11
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	48 ee       	ldi	r20, 0xE8	; 232
    23de:	54 e2       	ldi	r21, 0x24	; 36
    23e0:	60 e1       	ldi	r22, 0x10	; 16
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	b2 dc       	rcall	.-1692   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    23e6:	08 c0       	rjmp	.+16     	; 0x23f8 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x4c>
    23e8:	89 81       	ldd	r24, Y+1	; 0x01

   while ((ReadPrt = FT_Trans::Read16(REG_CMD_READ)) != CmdFifoWp) {
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
      if (FT_COPRO_ERROR == ReadPrt) {
    23ec:	8f 3f       	cpi	r24, 0xFF	; 255
    23ee:	ff e0       	ldi	r31, 0x0F	; 15
    23f0:	9f 07       	cpc	r25, r31
    23f2:	11 f4       	brne	.+4      	; 0x23f8 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x4c>
    23f4:	82 e3       	ldi	r24, 0x32	; 50
    23f6:	18 c0       	rjmp	.+48     	; 0x2428 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x7c>
         return FT_GE_ERROR;
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
   if (TrnsFlag) {
      EndTransferCmd();
   }
   FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);

   while ((ReadPrt = FT_Trans::Read16(REG_CMD_READ)) != CmdFifoWp) {
    23fc:	44 ee       	ldi	r20, 0xE4	; 228
    23fe:	54 e2       	ldi	r21, 0x24	; 36
    2400:	60 e1       	ldi	r22, 0x10	; 16
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	13 dc       	rcall	.-2010   	; 0x1c2c <_ZN16FT_Transport_SPI6Read16Em>
    2406:	9a 83       	std	Y+2, r25	; 0x02
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	fc 01       	movw	r30, r24
    2410:	80 89       	ldd	r24, Z+16	; 0x10
    2412:	91 89       	ldd	r25, Z+17	; 0x11
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	29 81       	ldd	r18, Y+1	; 0x01
    2418:	3a 81       	ldd	r19, Y+2	; 0x02
    241a:	28 17       	cp	r18, r24
    241c:	39 07       	cpc	r19, r25
    241e:	09 f4       	brne	.+2      	; 0x2422 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x76>
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	44 23       	and	r20, r20
    2424:	09 f7       	brne	.-62     	; 0x23e8 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x3c>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
      if (FT_COPRO_ERROR == ReadPrt) {
         return FT_GE_ERROR;
      }
   }
   return FT_GE_OK;
    242c:	0f 90       	pop	r0
}
    242e:	0f 90       	pop	r0
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <_ZN5FT_GCI16FT_Transport_SPIEC1Ev>:

   uint16_t CmdFifoWp, FreeSpace;	//command fifo write pointer
};
/* Api to set cs, pdn, int pin. CS pin is mandatory. If PDN and INT pins are set then gpios are initialized */
template<class FT_Trans>
FT_GC<FT_Trans>::FT_GC() {
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	00 d0       	rcall	.+0      	; 0x243c <_ZN5FT_GCI16FT_Transport_SPIEC1Ev+0x6>
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
    2448:	a8 da       	rcall	.-2736   	; 0x199a <_ZN16FT_Transport_SPIC1Ev>
    244a:	89 81       	ldd	r24, Y+1	; 0x01
   /* initialize context parameters - update with the default values */
   GInit = 0;/*CSPin = FT_CS_PIN;*/
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	fc 01       	movw	r30, r24
    2450:	15 82       	std	Z+5, r1	; 0x05
    2452:	89 81       	ldd	r24, Y+1	; 0x01
   GError = FT_OK;
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	fc 01       	movw	r30, r24
    2458:	17 82       	std	Z+7, r1	; 0x07
    245a:	10 86       	std	Z+8, r1	; 0x08
    245c:	11 86       	std	Z+9, r1	; 0x09
    245e:	12 86       	std	Z+10, r1	; 0x0a
    2460:	89 81       	ldd	r24, Y+1	; 0x01
   IntPin = -1;
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	2f ef       	ldi	r18, 0xFF	; 255
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	fc 01       	movw	r30, r24
    246a:	34 87       	std	Z+12, r19	; 0x0c
    246c:	23 87       	std	Z+11, r18	; 0x0b
    246e:	89 81       	ldd	r24, Y+1	; 0x01
   CmdFifoWp = 0;
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	fc 01       	movw	r30, r24
    2474:	11 8a       	std	Z+17, r1	; 0x11
    2476:	10 8a       	std	Z+16, r1	; 0x10
    2478:	89 81       	ldd	r24, Y+1	; 0x01
   FreeSpace = FT_CMDFIFO_SIZE - 4;
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	2c ef       	ldi	r18, 0xFC	; 252
    247e:	3f e0       	ldi	r19, 0x0F	; 15
    2480:	fc 01       	movw	r30, r24
    2482:	33 8b       	std	Z+19, r19	; 0x13
    2484:	22 8b       	std	Z+18, r18	; 0x12
    2486:	89 81       	ldd	r24, Y+1	; 0x01
   DispGpioPin = FT_GPIO7;
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	27 e0       	ldi	r18, 0x07	; 7
    248c:	fc 01       	movw	r30, r24
    248e:	25 87       	std	Z+13, r18	; 0x0d
    2490:	89 81       	ldd	r24, Y+1	; 0x01
   AudioGpioPin = FT_GPIO1;
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	21 e0       	ldi	r18, 0x01	; 1
    2496:	fc 01       	movw	r30, r24
    2498:	26 87       	std	Z+14, r18	; 0x0e
    249a:	89 81       	ldd	r24, Y+1	; 0x01
   TrnsFlag = 0;
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	fc 01       	movw	r30, r24
    24a0:	16 82       	std	Z+6, r1	; 0x06
    24a2:	84 e2       	ldi	r24, 0x24	; 36

   //redundant call
   FT_GC<FT_Trans>::SetCSpin((volatile uint8_t *) FT_CS_PORT,
      (volatile uint8_t *) FT_CS_DDR, FT_CS_PIN);
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	fc 01       	movw	r30, r24
    24a8:	80 81       	ld	r24, Z
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	ac 01       	movw	r20, r24
    24b0:	85 e2       	ldi	r24, 0x25	; 37
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	fc 01       	movw	r30, r24
    24b6:	80 81       	ld	r24, Z
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	bc 01       	movw	r22, r24
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	20 e0       	ldi	r18, 0x00	; 0
   DispGpioPin = FT_GPIO7;
   AudioGpioPin = FT_GPIO1;
   TrnsFlag = 0;

   //redundant call
   FT_GC<FT_Trans>::SetCSpin((volatile uint8_t *) FT_CS_PORT,
    24c4:	76 da       	rcall	.-2836   	; 0x19b2 <_ZN16FT_Transport_SPI8SetCSpinEPVhS1_h>
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
      (volatile uint8_t *) FT_CS_DDR, FT_CS_PIN);
}
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	08 95       	ret

000024d0 <_ZN5FT_GCI16FT_Transport_SPIED1Ev>:

template<class FT_Trans>
FT_GC<FT_Trans>::~FT_GC() {
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <_ZN5FT_GCI16FT_Transport_SPIED1Ev+0x6>
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
}	//do nothing
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	94 da       	rcall	.-2776   	; 0x1a0c <_ZN16FT_Transport_SPID1Ev>
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	08 95       	ret

000024ee <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj>:

/* API to initialize the display wrt input configuration */
template<class FT_Trans>
FT_Status FT_GC<FT_Trans>::Init(uint8_t ResType, uint16_t options1 = 0) {
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x6>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x8>
    24f6:	1f 92       	push	r1
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	6b 83       	std	Y+3, r22	; 0x03
    2502:	5d 83       	std	Y+5, r21	; 0x05
    2504:	4c 83       	std	Y+4, r20	; 0x04
   /* assign the pdn */
   //pinMode(PDNPin, OUTPUT);
   //digitalWrite(PDNPin, HIGH);    	
   /*attempt to initialize interrupt pin*/
   Serial.println("1");
    2506:	6b e9       	ldi	r22, 0x9B	; 155
    2508:	71 e0       	ldi	r23, 0x01	; 1
    250a:	80 ef       	ldi	r24, 0xF0	; 240
    250c:	92 e0       	ldi	r25, 0x02	; 2
    250e:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
   if (IntPin != -1) {
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	9a 81       	ldd	r25, Y+2	; 0x02
    2516:	fc 01       	movw	r30, r24
    2518:	83 85       	ldd	r24, Z+11	; 0x0b
    251a:	94 85       	ldd	r25, Z+12	; 0x0c
    251c:	8f 3f       	cpi	r24, 0xFF	; 255
    251e:	ff ef       	ldi	r31, 0xFF	; 255
    2520:	9f 07       	cpc	r25, r31
    2522:	49 f0       	breq	.+18     	; 0x2536 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x48>
      //pinMode(IntPin, INPUT);
      FT_INT_DDR &= ~FT_INT_PIN;
    2524:	8d e2       	ldi	r24, 0x2D	; 45
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	2d e2       	ldi	r18, 0x2D	; 45
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	f9 01       	movw	r30, r18
    252e:	20 81       	ld	r18, Z
    2530:	28 7f       	andi	r18, 0xF8	; 248
    2532:	fc 01       	movw	r30, r24
    2534:	20 83       	st	Z, r18
   }
   Serial.println("2");
    2536:	6d e9       	ldi	r22, 0x9D	; 157
    2538:	71 e0       	ldi	r23, 0x01	; 1
    253a:	80 ef       	ldi	r24, 0xF0	; 240
    253c:	92 e0       	ldi	r25, 0x02	; 2
    253e:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
   /* Initialize SPI channel */
   FT_Trans::Init();
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	6e da       	rcall	.-2852   	; 0x1a24 <_ZN16FT_Transport_SPI4InitEv>
    2548:	6f e9       	ldi	r22, 0x9F	; 159

   Serial.println("3");
    254a:	71 e0       	ldi	r23, 0x01	; 1
    254c:	80 ef       	ldi	r24, 0xF0	; 240
    254e:	92 e0       	ldi	r25, 0x02	; 2
    2550:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    2554:	89 81       	ldd	r24, Y+1	; 0x01
   /* Bootup of graphics controller */
   Reset();
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	43 d1       	rcall	.+646    	; 0x27e0 <_ZN5FT_GCI16FT_Transport_SPIE5ResetEv>
    255a:	61 ea       	ldi	r22, 0xA1	; 161
    255c:	71 e0       	ldi	r23, 0x01	; 1
   Serial.println("4");
    255e:	80 ef       	ldi	r24, 0xF0	; 240
    2560:	92 e0       	ldi	r25, 0x02	; 2
    2562:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
   /* Set the display configurations followed by external clock set, spi clock change wrt FT80x */
   DisplayConfigExternalClock(ResType);
    256a:	6b 81       	ldd	r22, Y+3	; 0x03
    256c:	48 d1       	rcall	.+656    	; 0x27fe <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh>
    256e:	8c 81       	ldd	r24, Y+4	; 0x04
    2570:	9d 81       	ldd	r25, Y+5	; 0x05
    2572:	81 70       	andi	r24, 0x01	; 1

   if ((options1 & FT_INTERNAL_CLOCK_SOURCE) == FT_INTERNAL_CLOCK_SOURCE) {
    2574:	99 27       	eor	r25, r25
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	41 f0       	breq	.+16     	; 0x258a <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x9c>
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	9a 81       	ldd	r25, Y+2	; 0x02
    257e:	48 e4       	ldi	r20, 0x48	; 72
      /* Set to use internal clock source */
      HostCommand(FT_CLKINT);
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	70 e0       	ldi	r23, 0x00	; 0
    2586:	b3 d2       	rcall	.+1382   	; 0x2aee <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0xaa>
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	44 e4       	ldi	r20, 0x44	; 68
    2590:	50 e0       	ldi	r21, 0x00	; 0
   } else {
      /* Set to use external clock */
      HostCommand(FT_CLKEXT);
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	ab d2       	rcall	.+1366   	; 0x2aee <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	40 e4       	ldi	r20, 0x40	; 64
    259e:	5f e6       	ldi	r21, 0x6F	; 111
    25a0:	60 e4       	ldi	r22, 0x40	; 64
   }

   /* change the clock to maximum SPI operating frequency */
   FT_Trans::ChangeClock(FT_SPI_CLK_FREQ_MAX); //change the clock to normal operating frequency - harcoded wrt due	
    25a2:	71 e0       	ldi	r23, 0x01	; 1
    25a4:	78 da       	rcall	.-2832   	; 0x1a96 <_ZN16FT_Transport_SPI11ChangeClockEm>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0

   return FT_OK;
    25b2:	df 91       	pop	r29
}
    25b4:	cf 91       	pop	r28
    25b6:	08 95       	ret

000025b8 <_ZN5FT_GCI16FT_Transport_SPIE11Cmd_DLStartEv>:
   Status = WriteCmd(Val);

   return Status;
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_DLStart(void) {
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	00 d0       	rcall	.+0      	; 0x25be <_ZN5FT_GCI16FT_Transport_SPIE11Cmd_DLStartEv+0x6>
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	9a 83       	std	Y+2, r25	; 0x02
    25c4:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd(CMD_DLSTART));
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	5f ef       	ldi	r21, 0xFF	; 255
    25ce:	6f ef       	ldi	r22, 0xFF	; 255
    25d0:	7f ef       	ldi	r23, 0xFF	; 255
    25d2:	38 d0       	rcall	.+112    	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    25d4:	0f 90       	pop	r0
}
    25d6:	0f 90       	pop	r0
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	08 95       	ret

000025de <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::ClearColorRGB(uint32_t rgb) {
   return (WriteCmd((2UL << 24) | (rgb & 0xFFFFFFL)));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Clear(uint8_t c, uint8_t s, uint8_t t) {
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh+0x6>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh+0x8>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh+0xa>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	9b 83       	std	Y+3, r25	; 0x03
    25ee:	8a 83       	std	Y+2, r24	; 0x02
    25f0:	6c 83       	std	Y+4, r22	; 0x04
    25f2:	4d 83       	std	Y+5, r20	; 0x05
    25f4:	2e 83       	std	Y+6, r18	; 0x06
   uint8_t m = (c << 2) | (s << 1) | t;
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	88 2f       	mov	r24, r24
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	28 2f       	mov	r18, r24
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	92 2f       	mov	r25, r18
    2612:	98 2b       	or	r25, r24
    2614:	8e 81       	ldd	r24, Y+6	; 0x06
    2616:	89 2b       	or	r24, r25
    2618:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd((38UL << 24) | m));
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	88 2f       	mov	r24, r24
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	a0 e0       	ldi	r26, 0x00	; 0
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	b6 62       	ori	r27, 0x26	; 38
    2626:	2a 81       	ldd	r18, Y+2	; 0x02
    2628:	3b 81       	ldd	r19, Y+3	; 0x03
    262a:	ac 01       	movw	r20, r24
    262c:	bd 01       	movw	r22, r26
    262e:	c9 01       	movw	r24, r18
    2630:	09 d0       	rcall	.+18     	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    2632:	26 96       	adiw	r28, 0x06	; 6
}
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>:
   FT_Trans::Write32(REG_CMD_WRITE, CmdFifoWp);
   TrnsFlag = 0;
}
template<class FT_Trans>

FT_GEStatus FT_GC<FT_Trans>::WriteCmd(uint32_t Cmd) {
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	27 97       	sbiw	r28, 0x07	; 7
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	9b 83       	std	Y+3, r25	; 0x03
    265a:	8a 83       	std	Y+2, r24	; 0x02
    265c:	4c 83       	std	Y+4, r20	; 0x04
    265e:	5d 83       	std	Y+5, r21	; 0x05
    2660:	6e 83       	std	Y+6, r22	; 0x06
    2662:	7f 83       	std	Y+7, r23	; 0x07
   StartTransferCmd();
   Status = TransferCmd(Cmd);
   if(0 == TrnsFlag)
   EndTransferCmd();
#else
   if (0 == TrnsFlag) {
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	fc 01       	movw	r30, r24
    266a:	86 81       	ldd	r24, Z+6	; 0x06
    266c:	88 23       	and	r24, r24
    266e:	91 f4       	brne	.+36     	; 0x2694 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm+0x50>
      StartTransferCmd();
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	9b 81       	ldd	r25, Y+3	; 0x03
    2674:	70 d2       	rcall	.+1248   	; 0x2b56 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    2676:	8c 81       	ldd	r24, Y+4	; 0x04
      Status = TransferCmd(Cmd);
    2678:	9d 81       	ldd	r25, Y+5	; 0x05
    267a:	ae 81       	ldd	r26, Y+6	; 0x06
    267c:	bf 81       	ldd	r27, Y+7	; 0x07
    267e:	2a 81       	ldd	r18, Y+2	; 0x02
    2680:	3b 81       	ldd	r19, Y+3	; 0x03
    2682:	ac 01       	movw	r20, r24
    2684:	bd 01       	movw	r22, r26
    2686:	c9 01       	movw	r24, r18
    2688:	8a d2       	rcall	.+1300   	; 0x2b9e <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm>
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
      EndTransferCmd();
    2690:	7e d0       	rcall	.+252    	; 0x278e <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    2692:	0b c0       	rjmp	.+22     	; 0x26aa <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm+0x66>
    2694:	8c 81       	ldd	r24, Y+4	; 0x04
    2696:	9d 81       	ldd	r25, Y+5	; 0x05
    2698:	ae 81       	ldd	r26, Y+6	; 0x06
   } else {
      Status = TransferCmd(Cmd);
    269a:	bf 81       	ldd	r27, Y+7	; 0x07
    269c:	2a 81       	ldd	r18, Y+2	; 0x02
    269e:	3b 81       	ldd	r19, Y+3	; 0x03
    26a0:	ac 01       	movw	r20, r24
    26a2:	bd 01       	movw	r22, r26
    26a4:	c9 01       	movw	r24, r18
    26a6:	7b d2       	rcall	.+1270   	; 0x2b9e <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm>
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	27 96       	adiw	r28, 0x07	; 7
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
   }

#endif
   return Status;
    26b2:	de bf       	out	0x3e, r29	; 62
}
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	08 95       	ret

000026be <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm>:
 TransferCmd(Str,strlen(Str)+1);
 EndTransferCmd();
 }*/
template<class FT_Trans>
//api to send N bytes to command buffer, this api pads with 0's at the end 
FT_GEStatus FT_GC<FT_Trans>::WriteCmd(uint8_t *Src, uint32_t NBytes) {
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	29 97       	sbiw	r28, 0x09	; 9
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	9b 83       	std	Y+3, r25	; 0x03
    26d4:	8a 83       	std	Y+2, r24	; 0x02
    26d6:	7d 83       	std	Y+5, r23	; 0x05
    26d8:	6c 83       	std	Y+4, r22	; 0x04
    26da:	2e 83       	std	Y+6, r18	; 0x06
    26dc:	3f 83       	std	Y+7, r19	; 0x07
    26de:	48 87       	std	Y+8, r20	; 0x08
    26e0:	59 87       	std	Y+9, r21	; 0x09
   FT_GEStatus Status;
   if (0 == TrnsFlag) {
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	fc 01       	movw	r30, r24
    26e8:	86 81       	ldd	r24, Z+6	; 0x06
    26ea:	88 23       	and	r24, r24
    26ec:	a1 f4       	brne	.+40     	; 0x2716 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm+0x58>
      StartTransferCmd();
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
    26f0:	9b 81       	ldd	r25, Y+3	; 0x03
    26f2:	31 d2       	rcall	.+1122   	; 0x2b56 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    26f4:	8e 81       	ldd	r24, Y+6	; 0x06
      Status = TransferCmd(Src, NBytes);
    26f6:	9f 81       	ldd	r25, Y+7	; 0x07
    26f8:	a8 85       	ldd	r26, Y+8	; 0x08
    26fa:	b9 85       	ldd	r27, Y+9	; 0x09
    26fc:	6c 81       	ldd	r22, Y+4	; 0x04
    26fe:	7d 81       	ldd	r23, Y+5	; 0x05
    2700:	ea 81       	ldd	r30, Y+2	; 0x02
    2702:	fb 81       	ldd	r31, Y+3	; 0x03
    2704:	9c 01       	movw	r18, r24
    2706:	ad 01       	movw	r20, r26
    2708:	cf 01       	movw	r24, r30
    270a:	9a d2       	rcall	.+1332   	; 0x2c40 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm>
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	9b 81       	ldd	r25, Y+3	; 0x03
      EndTransferCmd();  //here transflag is made to 0
    2712:	3d d0       	rcall	.+122    	; 0x278e <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    2714:	0d c0       	rjmp	.+26     	; 0x2730 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm+0x72>
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	9f 81       	ldd	r25, Y+7	; 0x07
    271a:	a8 85       	ldd	r26, Y+8	; 0x08
   } else
      Status = TransferCmd(Src, NBytes);
    271c:	b9 85       	ldd	r27, Y+9	; 0x09
    271e:	6c 81       	ldd	r22, Y+4	; 0x04
    2720:	7d 81       	ldd	r23, Y+5	; 0x05
    2722:	ea 81       	ldd	r30, Y+2	; 0x02
    2724:	fb 81       	ldd	r31, Y+3	; 0x03
    2726:	9c 01       	movw	r18, r24
    2728:	ad 01       	movw	r20, r26
    272a:	cf 01       	movw	r24, r30
    272c:	89 d2       	rcall	.+1298   	; 0x2c40 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm>
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	29 96       	adiw	r28, 0x09	; 9
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli

   return Status;
    2738:	de bf       	out	0x3e, r29	; 62
}
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	08 95       	ret

00002744 <_ZN5FT_GCI16FT_Transport_SPIE7DisplayEv>:
   A[2] = red;
   A[3] = 4;
   return (WriteCmd(UUInt32));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Display(void) {
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	00 d0       	rcall	.+0      	; 0x274a <_ZN5FT_GCI16FT_Transport_SPIE7DisplayEv+0x6>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd((0UL << 24)));
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	ba 01       	movw	r22, r20
    275c:	73 df       	rcall	.-282    	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    275e:	0f 90       	pop	r0
}
    2760:	0f 90       	pop	r0
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	08 95       	ret

00002768 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_SwapEv>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Stop(void) {
   return (WriteCmd(CMD_STOP));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Swap(void) {
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	00 d0       	rcall	.+0      	; 0x276e <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_SwapEv+0x6>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd(CMD_SWAP));
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	5f ef       	ldi	r21, 0xFF	; 255
    277e:	6f ef       	ldi	r22, 0xFF	; 255
    2780:	7f ef       	ldi	r23, 0xFF	; 255
    2782:	60 df       	rcall	.-320    	; 0x2644 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    2784:	0f 90       	pop	r0
}
    2786:	0f 90       	pop	r0
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	08 95       	ret

0000278e <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>:
   }
   return FT_GE_OK;
}
template<class FT_Trans>
//end the command transfer
void FT_GC<FT_Trans>::EndTransferCmd(void) {
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	00 d0       	rcall	.+0      	; 0x2798 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv+0xa>
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	9a 83       	std	Y+2, r25	; 0x02
    279e:	89 83       	std	Y+1, r24	; 0x01
   FT_Trans::EndTransfer();
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	9b db       	rcall	.-2250   	; 0x1edc <_ZN16FT_Transport_SPI11EndTransferEv>
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
   //update the write pointer of fifo
   FT_Trans::Write32(REG_CMD_WRITE, CmdFifoWp);
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	fc 01       	movw	r30, r24
    27ac:	80 89       	ldd	r24, Z+16	; 0x10
    27ae:	91 89       	ldd	r25, Z+17	; 0x11
    27b0:	cc 01       	movw	r24, r24
    27b2:	a0 e0       	ldi	r26, 0x00	; 0
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	8c 01       	movw	r16, r24
    27bc:	9d 01       	movw	r18, r26
    27be:	48 ee       	ldi	r20, 0xE8	; 232
    27c0:	54 e2       	ldi	r21, 0x24	; 36
    27c2:	60 e1       	ldi	r22, 0x10	; 16
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	cf 01       	movw	r24, r30
    27c8:	f0 da       	rcall	.-2592   	; 0x1daa <_ZN16FT_Transport_SPI7Write32Emm>
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
   TrnsFlag = 0;
    27ce:	fc 01       	movw	r30, r24
    27d0:	16 82       	std	Z+6, r1	; 0x06
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
}
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <_ZN5FT_GCI16FT_Transport_SPIE5ResetEv>:
   FT_Trans::Write(REG_CPURESET, FT_RESET_RELEASE_COPROCESSOR);
   /* ideally delay of 25ms is required for audio engine to playback mute sound to avoid pop sound */
}
template<class FT_Trans>
//api to reset whole FT_GC via pdn - if pdn is not assigned then reset is not successful
void FT_GC<FT_Trans>::Reset(void) {
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <_ZN5FT_GCI16FT_Transport_SPIE5ResetEv+0x6>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01

   /* Reset of whole graphics controller */
   /* send active command to enable SPI, followed by download of default DL into graphics engine, followed by SPI settings wrt internal clock requirements during bootup stage */
   ActiveInternalClock();
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	6e d3       	rcall	.+1756   	; 0x2ed0 <_ZN5FT_GCI16FT_Transport_SPIE19ActiveInternalClockEv>
    27f4:	0f 90       	pop	r0
}
    27f6:	0f 90       	pop	r0
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	08 95       	ret

000027fe <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh>:
   CmdFifoWp = 0;
   FreeSpace = FT_CMDFIFO_SIZE - 4;
}
template<class FT_Trans>
/* API to configure the display and set to external clock */
void FT_GC<FT_Trans>::DisplayConfigExternalClock(uint8_t ResType) {
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	00 d0       	rcall	.+0      	; 0x2804 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x6>
    2804:	1f 92       	push	r1
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	6b 83       	std	Y+3, r22	; 0x03
   /* Presently supporting two types of resolutions, qvga and wqvga */
   if (ResType == FT_DISPLAY_QVGA_320x240) {
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	88 23       	and	r24, r24
    2814:	09 f0       	breq	.+2      	; 0x2818 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x1a>
    2816:	76 c0       	rjmp	.+236    	; 0x2904 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x106>
      FT_Trans::Write16(REG_VSYNC0, FT_DISPLAY_VSYNC0_QVGA);
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	48 e4       	ldi	r20, 0x48	; 72
    2822:	54 e2       	ldi	r21, 0x24	; 36
    2824:	60 e1       	ldi	r22, 0x10	; 16
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	90 da       	rcall	.-2784   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    282a:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_VSYNC1, FT_DISPLAY_VSYNC1_QVGA);
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	22 e0       	ldi	r18, 0x02	; 2
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4c e4       	ldi	r20, 0x4C	; 76
    2834:	54 e2       	ldi	r21, 0x24	; 36
    2836:	60 e1       	ldi	r22, 0x10	; 16
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	87 da       	rcall	.-2802   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_VOFFSET, FT_DISPLAY_VOFFSET_QVGA);
    2840:	2d e0       	ldi	r18, 0x0D	; 13
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e4       	ldi	r20, 0x40	; 64
    2846:	54 e2       	ldi	r21, 0x24	; 36
    2848:	60 e1       	ldi	r22, 0x10	; 16
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	7e da       	rcall	.-2820   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	27 e0       	ldi	r18, 0x07	; 7
      FT_Trans::Write16(REG_VCYCLE, FT_DISPLAY_VCYCLE_QVGA);
    2854:	31 e0       	ldi	r19, 0x01	; 1
    2856:	4c e3       	ldi	r20, 0x3C	; 60
    2858:	54 e2       	ldi	r21, 0x24	; 36
    285a:	60 e1       	ldi	r22, 0x10	; 16
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	75 da       	rcall	.-2838   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
      FT_Trans::Write16(REG_HSYNC0, FT_DISPLAY_HSYNC0_QVGA);
    2868:	44 e3       	ldi	r20, 0x34	; 52
    286a:	54 e2       	ldi	r21, 0x24	; 36
    286c:	60 e1       	ldi	r22, 0x10	; 16
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	6c da       	rcall	.-2856   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	2a e0       	ldi	r18, 0x0A	; 10
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	48 e3       	ldi	r20, 0x38	; 56
      FT_Trans::Write16(REG_HSYNC1, FT_DISPLAY_HSYNC1_QVGA);
    287c:	54 e2       	ldi	r21, 0x24	; 36
    287e:	60 e1       	ldi	r22, 0x10	; 16
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	63 da       	rcall	.-2874   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	26 e4       	ldi	r18, 0x46	; 70
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4c e2       	ldi	r20, 0x2C	; 44
    288e:	54 e2       	ldi	r21, 0x24	; 36
      FT_Trans::Write16(REG_HOFFSET, FT_DISPLAY_HOFFSET_QVGA);
    2890:	60 e1       	ldi	r22, 0x10	; 16
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	5a da       	rcall	.-2892   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	28 e9       	ldi	r18, 0x98	; 152
    289c:	31 e0       	ldi	r19, 0x01	; 1
    289e:	48 e2       	ldi	r20, 0x28	; 40
    28a0:	54 e2       	ldi	r21, 0x24	; 36
    28a2:	60 e1       	ldi	r22, 0x10	; 16
      FT_Trans::Write16(REG_HCYCLE, FT_DISPLAY_HCYCLE_QVGA);
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	51 da       	rcall	.-2910   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	9a 81       	ldd	r25, Y+2	; 0x02
    28ac:	20 e4       	ldi	r18, 0x40	; 64
    28ae:	31 e0       	ldi	r19, 0x01	; 1
    28b0:	40 e3       	ldi	r20, 0x30	; 48
    28b2:	54 e2       	ldi	r21, 0x24	; 36
    28b4:	60 e1       	ldi	r22, 0x10	; 16
    28b6:	70 e0       	ldi	r23, 0x00	; 0
      FT_Trans::Write16(REG_HSIZE, FT_DISPLAY_HSIZE_QVGA);
    28b8:	48 da       	rcall	.-2928   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	20 ef       	ldi	r18, 0xF0	; 240
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	44 e4       	ldi	r20, 0x44	; 68
    28c4:	54 e2       	ldi	r21, 0x24	; 36
    28c6:	60 e1       	ldi	r22, 0x10	; 16
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	3f da       	rcall	.-2946   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
      FT_Trans::Write16(REG_VSIZE, FT_DISPLAY_VSIZE_QVGA);
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	48 e6       	ldi	r20, 0x68	; 104
    28d6:	54 e2       	ldi	r21, 0x24	; 36
    28d8:	60 e1       	ldi	r22, 0x10	; 16
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	36 da       	rcall	.-2964   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    28de:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_PCLK_POL, FT_DISPLAY_PCLKPOL_QVGA);
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	22 e0       	ldi	r18, 0x02	; 2
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e6       	ldi	r20, 0x60	; 96
    28e8:	54 e2       	ldi	r21, 0x24	; 36
    28ea:	60 e1       	ldi	r22, 0x10	; 16
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	2d da       	rcall	.-2982   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_SWIZZLE, FT_DISPLAY_SWIZZLE_QVGA);
    28f4:	28 e0       	ldi	r18, 0x08	; 8
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4c e6       	ldi	r20, 0x6C	; 108
    28fa:	54 e2       	ldi	r21, 0x24	; 36
    28fc:	60 e1       	ldi	r22, 0x10	; 16
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	24 da       	rcall	.-3000   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2902:	ef c0       	rjmp	.+478    	; 0x2ae2 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x2e4>
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	81 30       	cpi	r24, 0x01	; 1
      /* after configuring display parameters, configure pclk */
      FT_Trans::Write16(REG_PCLK, FT_DISPLAY_PCLK_QVGA);
    2908:	09 f0       	breq	.+2      	; 0x290c <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x10e>
    290a:	76 c0       	rjmp	.+236    	; 0x29f8 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x1fa>
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	48 e4       	ldi	r20, 0x48	; 72
    2916:	54 e2       	ldi	r21, 0x24	; 36
    2918:	60 e1       	ldi	r22, 0x10	; 16
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	16 da       	rcall	.-3028   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
   } else if (ResType == FT_DISPLAY_WQVGA_480x272) {
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	2a e0       	ldi	r18, 0x0A	; 10
    2924:	30 e0       	ldi	r19, 0x00	; 0
      FT_Trans::Write16(REG_VSYNC0, FT_DISPLAY_VSYNC0_WQVGA);
    2926:	4c e4       	ldi	r20, 0x4C	; 76
    2928:	54 e2       	ldi	r21, 0x24	; 36
    292a:	60 e1       	ldi	r22, 0x10	; 16
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	0d da       	rcall	.-3046   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	2c e0       	ldi	r18, 0x0C	; 12
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e4       	ldi	r20, 0x40	; 64
      FT_Trans::Write16(REG_VSYNC1, FT_DISPLAY_VSYNC1_WQVGA);
    293a:	54 e2       	ldi	r21, 0x24	; 36
    293c:	60 e1       	ldi	r22, 0x10	; 16
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	04 da       	rcall	.-3064   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	24 e2       	ldi	r18, 0x24	; 36
    2948:	31 e0       	ldi	r19, 0x01	; 1
    294a:	4c e3       	ldi	r20, 0x3C	; 60
    294c:	54 e2       	ldi	r21, 0x24	; 36
      FT_Trans::Write16(REG_VOFFSET, FT_DISPLAY_VOFFSET_WQVGA);
    294e:	60 e1       	ldi	r22, 0x10	; 16
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	fb d9       	rcall	.-3082   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	44 e3       	ldi	r20, 0x34	; 52
    295e:	54 e2       	ldi	r21, 0x24	; 36
    2960:	60 e1       	ldi	r22, 0x10	; 16
      FT_Trans::Write16(REG_VCYCLE, FT_DISPLAY_VCYCLE_WQVGA);
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	f2 d9       	rcall	.-3100   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	29 e2       	ldi	r18, 0x29	; 41
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	48 e3       	ldi	r20, 0x38	; 56
    2970:	54 e2       	ldi	r21, 0x24	; 36
    2972:	60 e1       	ldi	r22, 0x10	; 16
    2974:	70 e0       	ldi	r23, 0x00	; 0
      FT_Trans::Write16(REG_HSYNC0, FT_DISPLAY_HSYNC0_WQVGA);
    2976:	e9 d9       	rcall	.-3118   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	2b e2       	ldi	r18, 0x2B	; 43
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4c e2       	ldi	r20, 0x2C	; 44
    2982:	54 e2       	ldi	r21, 0x24	; 36
    2984:	60 e1       	ldi	r22, 0x10	; 16
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	e0 d9       	rcall	.-3136   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
      FT_Trans::Write16(REG_HSYNC1, FT_DISPLAY_HSYNC1_WQVGA);
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	24 e2       	ldi	r18, 0x24	; 36
    2990:	32 e0       	ldi	r19, 0x02	; 2
    2992:	48 e2       	ldi	r20, 0x28	; 40
    2994:	54 e2       	ldi	r21, 0x24	; 36
    2996:	60 e1       	ldi	r22, 0x10	; 16
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	d7 d9       	rcall	.-3154   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    299c:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_HOFFSET, FT_DISPLAY_HOFFSET_WQVGA);
    299e:	9a 81       	ldd	r25, Y+2	; 0x02
    29a0:	20 ee       	ldi	r18, 0xE0	; 224
    29a2:	31 e0       	ldi	r19, 0x01	; 1
    29a4:	40 e3       	ldi	r20, 0x30	; 48
    29a6:	54 e2       	ldi	r21, 0x24	; 36
    29a8:	60 e1       	ldi	r22, 0x10	; 16
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	ce d9       	rcall	.-3172   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_HCYCLE, FT_DISPLAY_HCYCLE_WQVGA);
    29b2:	20 e1       	ldi	r18, 0x10	; 16
    29b4:	31 e0       	ldi	r19, 0x01	; 1
    29b6:	44 e4       	ldi	r20, 0x44	; 68
    29b8:	54 e2       	ldi	r21, 0x24	; 36
    29ba:	60 e1       	ldi	r22, 0x10	; 16
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	c5 d9       	rcall	.-3190   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	21 e0       	ldi	r18, 0x01	; 1
      FT_Trans::Write16(REG_HSIZE, FT_DISPLAY_HSIZE_WQVGA);
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	48 e6       	ldi	r20, 0x68	; 104
    29ca:	54 e2       	ldi	r21, 0x24	; 36
    29cc:	60 e1       	ldi	r22, 0x10	; 16
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	bc d9       	rcall	.-3208   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	9a 81       	ldd	r25, Y+2	; 0x02
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
      FT_Trans::Write16(REG_VSIZE, FT_DISPLAY_VSIZE_WQVGA);
    29da:	40 e6       	ldi	r20, 0x60	; 96
    29dc:	54 e2       	ldi	r21, 0x24	; 36
    29de:	60 e1       	ldi	r22, 0x10	; 16
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	b3 d9       	rcall	.-3226   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	25 e0       	ldi	r18, 0x05	; 5
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	4c e6       	ldi	r20, 0x6C	; 108
      FT_Trans::Write16(REG_PCLK_POL, FT_DISPLAY_PCLKPOL_WQVGA);
    29ee:	54 e2       	ldi	r21, 0x24	; 36
    29f0:	60 e1       	ldi	r22, 0x10	; 16
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	aa d9       	rcall	.-3244   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    29f6:	75 c0       	rjmp	.+234    	; 0x2ae2 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x2e4>
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	48 e4       	ldi	r20, 0x48	; 72
      FT_Trans::Write16(REG_SWIZZLE, FT_DISPLAY_SWIZZLE_WQVGA);
    2a02:	54 e2       	ldi	r21, 0x24	; 36
    2a04:	60 e1       	ldi	r22, 0x10	; 16
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	a0 d9       	rcall	.-3264   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	2a e0       	ldi	r18, 0x0A	; 10
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4c e4       	ldi	r20, 0x4C	; 76
    2a14:	54 e2       	ldi	r21, 0x24	; 36
      /* after configuring display parameters, configure pclk */
      FT_Trans::Write16(REG_PCLK, FT_DISPLAY_PCLK_WQVGA);
    2a16:	60 e1       	ldi	r22, 0x10	; 16
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	97 d9       	rcall	.-3282   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	2c e0       	ldi	r18, 0x0C	; 12
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e4       	ldi	r20, 0x40	; 64
    2a26:	54 e2       	ldi	r21, 0x24	; 36
    2a28:	60 e1       	ldi	r22, 0x10	; 16
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
   } else {
      FT_Trans::Write16(REG_VSYNC0, FT_DISPLAY_VSYNC0);
    2a2c:	8e d9       	rcall	.-3300   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	24 e2       	ldi	r18, 0x24	; 36
    2a34:	31 e0       	ldi	r19, 0x01	; 1
    2a36:	4c e3       	ldi	r20, 0x3C	; 60
    2a38:	54 e2       	ldi	r21, 0x24	; 36
    2a3a:	60 e1       	ldi	r22, 0x10	; 16
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	85 d9       	rcall	.-3318   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
      FT_Trans::Write16(REG_VSYNC1, FT_DISPLAY_VSYNC1);
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	9a 81       	ldd	r25, Y+2	; 0x02
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	44 e3       	ldi	r20, 0x34	; 52
    2a4a:	54 e2       	ldi	r21, 0x24	; 36
    2a4c:	60 e1       	ldi	r22, 0x10	; 16
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	7c d9       	rcall	.-3336   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_VOFFSET, FT_DISPLAY_VOFFSET);
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	29 e2       	ldi	r18, 0x29	; 41
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	48 e3       	ldi	r20, 0x38	; 56
    2a5c:	54 e2       	ldi	r21, 0x24	; 36
    2a5e:	60 e1       	ldi	r22, 0x10	; 16
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	73 d9       	rcall	.-3354   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_VCYCLE, FT_DISPLAY_VCYCLE);
    2a68:	2b e2       	ldi	r18, 0x2B	; 43
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4c e2       	ldi	r20, 0x2C	; 44
    2a6e:	54 e2       	ldi	r21, 0x24	; 36
    2a70:	60 e1       	ldi	r22, 0x10	; 16
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	6a d9       	rcall	.-3372   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	24 e2       	ldi	r18, 0x24	; 36
      FT_Trans::Write16(REG_HSYNC0, FT_DISPLAY_HSYNC0);
    2a7c:	32 e0       	ldi	r19, 0x02	; 2
    2a7e:	48 e2       	ldi	r20, 0x28	; 40
    2a80:	54 e2       	ldi	r21, 0x24	; 36
    2a82:	60 e1       	ldi	r22, 0x10	; 16
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	61 d9       	rcall	.-3390   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	20 ee       	ldi	r18, 0xE0	; 224
    2a8e:	31 e0       	ldi	r19, 0x01	; 1
      FT_Trans::Write16(REG_HSYNC1, FT_DISPLAY_HSYNC1);
    2a90:	40 e3       	ldi	r20, 0x30	; 48
    2a92:	54 e2       	ldi	r21, 0x24	; 36
    2a94:	60 e1       	ldi	r22, 0x10	; 16
    2a96:	70 e0       	ldi	r23, 0x00	; 0
    2a98:	58 d9       	rcall	.-3408   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	20 e1       	ldi	r18, 0x10	; 16
    2aa0:	31 e0       	ldi	r19, 0x01	; 1
    2aa2:	44 e4       	ldi	r20, 0x44	; 68
      FT_Trans::Write16(REG_HOFFSET, FT_DISPLAY_HOFFSET);
    2aa4:	54 e2       	ldi	r21, 0x24	; 36
    2aa6:	60 e1       	ldi	r22, 0x10	; 16
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	4f d9       	rcall	.-3426   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab0:	21 e0       	ldi	r18, 0x01	; 1
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	48 e6       	ldi	r20, 0x68	; 104
    2ab6:	54 e2       	ldi	r21, 0x24	; 36
      FT_Trans::Write16(REG_HCYCLE, FT_DISPLAY_HCYCLE);
    2ab8:	60 e1       	ldi	r22, 0x10	; 16
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	46 d9       	rcall	.-3444   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e6       	ldi	r20, 0x60	; 96
    2ac8:	54 e2       	ldi	r21, 0x24	; 36
    2aca:	60 e1       	ldi	r22, 0x10	; 16
      FT_Trans::Write16(REG_HSIZE, FT_DISPLAY_HSIZE);
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	3d d9       	rcall	.-3462   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	25 e0       	ldi	r18, 0x05	; 5
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4c e6       	ldi	r20, 0x6C	; 108
    2ada:	54 e2       	ldi	r21, 0x24	; 36
    2adc:	60 e1       	ldi	r22, 0x10	; 16
    2ade:	70 e0       	ldi	r23, 0x00	; 0
      FT_Trans::Write16(REG_VSIZE, FT_DISPLAY_VSIZE);
    2ae0:	34 d9       	rcall	.-3480   	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>:
   *ptr = FT_Trans::Read32(REG_TRACKER);
}

template<class FT_Trans>
/* APIS related to power modes */
void FT_GC<FT_Trans>::HostCommand(uint32_t HostCommand) {
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	2a 97       	sbiw	r28, 0x0a	; 10
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	4f 83       	std	Y+7, r20	; 0x07
    2b08:	58 87       	std	Y+8, r21	; 0x08
    2b0a:	69 87       	std	Y+9, r22	; 0x09
    2b0c:	7a 87       	std	Y+10, r23	; 0x0a
   uint32_t Addr;
   /* construct host command and send to graphics controller */
   Addr = HostCommand << 16;
    2b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b10:	98 85       	ldd	r25, Y+8	; 0x08
    2b12:	a9 85       	ldd	r26, Y+9	; 0x09
    2b14:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b16:	dc 01       	movw	r26, r24
    2b18:	99 27       	eor	r25, r25
    2b1a:	88 27       	eor	r24, r24
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	ab 83       	std	Y+3, r26	; 0x03
    2b22:	bc 83       	std	Y+4, r27	; 0x04
   FT_Trans::Read(Addr);  //ideally sending 3 bytes is sufficient
    2b24:	2d 81       	ldd	r18, Y+5	; 0x05
    2b26:	3e 81       	ldd	r19, Y+6	; 0x06
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b30:	ac 01       	movw	r20, r24
    2b32:	bd 01       	movw	r22, r26
    2b34:	c9 01       	movw	r24, r18
    2b36:	50 d8       	rcall	.-3936   	; 0x1bd8 <_ZN16FT_Transport_SPI4ReadEm>
    2b38:	64 e1       	ldi	r22, 0x14	; 20
   delay(20);  //worst scenario
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 23 0b 	call	0x1646	; 0x1646 <delay>
    2b44:	2a 96       	adiw	r28, 0x0a	; 10
}
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

00002b56 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>:
   return FT_GE_OK;
}
template<class FT_Trans>

//assert CSpin and send write command
FT_GEStatus FT_GC<FT_Trans>::StartTransferCmd() {
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv+0x6>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
   //start write transaction
   FT_Trans::StartWrite(FT_RAM_CMD + CmdFifoWp);
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	fc 01       	movw	r30, r24
    2b6a:	80 89       	ldd	r24, Z+16	; 0x10
    2b6c:	91 89       	ldd	r25, Z+17	; 0x11
    2b6e:	cc 01       	movw	r24, r24
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	90 58       	subi	r25, 0x80	; 128
    2b76:	af 4e       	sbci	r26, 0xEF	; 239
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	29 81       	ldd	r18, Y+1	; 0x01
    2b7c:	3a 81       	ldd	r19, Y+2	; 0x02
    2b7e:	ac 01       	movw	r20, r24
    2b80:	bd 01       	movw	r22, r26
    2b82:	c9 01       	movw	r24, r18
    2b84:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN16FT_Transport_SPI10StartWriteEm>
   TrnsFlag = 1;
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	21 e0       	ldi	r18, 0x01	; 1
    2b8e:	fc 01       	movw	r30, r24
    2b90:	26 83       	std	Z+6, r18	; 0x06
   return FT_GE_OK;
    2b92:	80 e0       	ldi	r24, 0x00	; 0
}
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	08 95       	ret

00002b9e <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm>:
template<class FT_Trans>

FT_GEStatus FT_GC<FT_Trans>::TransferCmd(uint32_t Cmd) {
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x6>
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x8>
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0xa>
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	4b 83       	std	Y+3, r20	; 0x03
    2bb2:	5c 83       	std	Y+4, r21	; 0x04
    2bb4:	6d 83       	std	Y+5, r22	; 0x05
    2bb6:	7e 83       	std	Y+6, r23	; 0x06
   if (FreeSpace < 4) {
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	82 89       	ldd	r24, Z+18	; 0x12
    2bc0:	93 89       	ldd	r25, Z+19	; 0x13
    2bc2:	84 30       	cpi	r24, 0x04	; 4
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	70 f4       	brcc	.+28     	; 0x2be4 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x46>
      //blocking call till freespace is available
      if (FT_GE_ERROR == ChkGetFreeSpace(4)) {
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	64 e0       	ldi	r22, 0x04	; 4
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	f7 d1       	rcall	.+1006   	; 0x2fc0 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj>
    2bd2:	98 2f       	mov	r25, r24
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	92 33       	cpi	r25, 0x32	; 50
    2bd8:	09 f0       	breq	.+2      	; 0x2bdc <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x3e>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	88 23       	and	r24, r24
    2bde:	11 f0       	breq	.+4      	; 0x2be4 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x46>
    2be0:	82 e3       	ldi	r24, 0x32	; 50
         return FT_GE_ERROR;
    2be2:	25 c0       	rjmp	.+74     	; 0x2c2e <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x90>
    2be4:	29 81       	ldd	r18, Y+1	; 0x01
      }
   }
   FT_Trans::Transfer32(Cmd);
    2be6:	3a 81       	ldd	r19, Y+2	; 0x02
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	9c 81       	ldd	r25, Y+4	; 0x04
    2bec:	ad 81       	ldd	r26, Y+5	; 0x05
    2bee:	be 81       	ldd	r27, Y+6	; 0x06
    2bf0:	ac 01       	movw	r20, r24
    2bf2:	bd 01       	movw	r22, r26
    2bf4:	c9 01       	movw	r24, r18
    2bf6:	a2 d9       	rcall	.-3260   	; 0x1f3c <_ZN16FT_Transport_SPI10Transfer32Em>
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
   CmdFifoWp = (CmdFifoWp + 4) & 0xfff;
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	80 89       	ldd	r24, Z+16	; 0x10
    2c00:	91 89       	ldd	r25, Z+17	; 0x11
    2c02:	04 96       	adiw	r24, 0x04	; 4
    2c04:	9c 01       	movw	r18, r24
    2c06:	3f 70       	andi	r19, 0x0F	; 15
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	31 8b       	std	Z+17, r19	; 0x11
    2c10:	20 8b       	std	Z+16, r18	; 0x10
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
   FreeSpace -= 4;
    2c16:	fc 01       	movw	r30, r24
    2c18:	82 89       	ldd	r24, Z+18	; 0x12
    2c1a:	93 89       	ldd	r25, Z+19	; 0x13
    2c1c:	9c 01       	movw	r18, r24
    2c1e:	24 50       	subi	r18, 0x04	; 4
    2c20:	31 09       	sbc	r19, r1
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	9a 81       	ldd	r25, Y+2	; 0x02
    2c26:	fc 01       	movw	r30, r24
    2c28:	33 8b       	std	Z+19, r19	; 0x13
    2c2a:	22 8b       	std	Z+18, r18	; 0x12
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	26 96       	adiw	r28, 0x06	; 6

   return FT_GE_OK;
    2c30:	0f b6       	in	r0, 0x3f	; 63
}
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	08 95       	ret

00002c40 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::TransferCmd(uint8_t *Src, uint32_t NBytes) {
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	60 97       	sbiw	r28, 0x10	; 16
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	9a 87       	std	Y+10, r25	; 0x0a
    2c5e:	89 87       	std	Y+9, r24	; 0x09
    2c60:	7c 87       	std	Y+12, r23	; 0x0c
    2c62:	6b 87       	std	Y+11, r22	; 0x0b
    2c64:	2d 87       	std	Y+13, r18	; 0x0d
    2c66:	3e 87       	std	Y+14, r19	; 0x0e
    2c68:	4f 87       	std	Y+15, r20	; 0x0f
    2c6a:	58 8b       	std	Y+16, r21	; 0x10
   uint32_t i, Count;
   //align the NBytes to multiple of 4
   NBytes = (NBytes + 3) & (~3);
    2c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c70:	af 85       	ldd	r26, Y+15	; 0x0f
    2c72:	b8 89       	ldd	r27, Y+16	; 0x10
    2c74:	03 96       	adiw	r24, 0x03	; 3
    2c76:	a1 1d       	adc	r26, r1
    2c78:	b1 1d       	adc	r27, r1
    2c7a:	8c 7f       	andi	r24, 0xFC	; 252
    2c7c:	8d 87       	std	Y+13, r24	; 0x0d
    2c7e:	9e 87       	std	Y+14, r25	; 0x0e
    2c80:	af 87       	std	Y+15, r26	; 0x0f
    2c82:	b8 8b       	std	Y+16, r27	; 0x10
   //transfer the whole buffer into command buffer
   while (NBytes) {
    2c84:	0e c1       	rjmp	.+540    	; 0x2ea2 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x262>
      Count = NBytes;
    2c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8a:	af 85       	ldd	r26, Y+15	; 0x0f
    2c8c:	b8 89       	ldd	r27, Y+16	; 0x10
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	af 83       	std	Y+7, r26	; 0x07
    2c94:	b8 87       	std	Y+8, r27	; 0x08
      if (Count > FreeSpace) {
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	82 89       	ldd	r24, Z+18	; 0x12
    2c9e:	93 89       	ldd	r25, Z+19	; 0x13
    2ca0:	9c 01       	movw	r18, r24
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	af 81       	ldd	r26, Y+7	; 0x07
    2cac:	b8 85       	ldd	r27, Y+8	; 0x08
    2cae:	28 17       	cp	r18, r24
    2cb0:	39 07       	cpc	r19, r25
    2cb2:	4a 07       	cpc	r20, r26
    2cb4:	5b 07       	cpc	r21, r27
    2cb6:	08 f0       	brcs	.+2      	; 0x2cba <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x7a>
    2cb8:	98 c0       	rjmp	.+304    	; 0x2dea <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1aa>
         //first update the free space
         UpdateFreeSpace();
    2cba:	89 85       	ldd	r24, Y+9	; 0x09
    2cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbe:	02 d2       	rcall	.+1028   	; 0x30c4 <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv>
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
         //then transfer the data
         Count = min(FreeSpace, Count);
    2cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	82 89       	ldd	r24, Z+18	; 0x12
    2cc8:	93 89       	ldd	r25, Z+19	; 0x13
    2cca:	cc 01       	movw	r24, r24
    2ccc:	a0 e0       	ldi	r26, 0x00	; 0
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	2d 81       	ldd	r18, Y+5	; 0x05
    2cd2:	3e 81       	ldd	r19, Y+6	; 0x06
    2cd4:	4f 81       	ldd	r20, Y+7	; 0x07
    2cd6:	58 85       	ldd	r21, Y+8	; 0x08
    2cd8:	28 17       	cp	r18, r24
    2cda:	39 07       	cpc	r19, r25
    2cdc:	4a 07       	cpc	r20, r26
    2cde:	5b 07       	cpc	r21, r27
    2ce0:	10 f4       	brcc	.+4      	; 0x2ce6 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0xa6>
    2ce2:	da 01       	movw	r26, r20
    2ce4:	c9 01       	movw	r24, r18
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
    2ce8:	9e 83       	std	Y+6, r25	; 0x06
    2cea:	af 83       	std	Y+7, r26	; 0x07
    2cec:	b8 87       	std	Y+8, r27	; 0x08
    2cee:	19 82       	std	Y+1, r1	; 0x01
         for (i = 0; i < Count; i++)
    2cf0:	1a 82       	std	Y+2, r1	; 0x02
    2cf2:	1b 82       	std	Y+3, r1	; 0x03
    2cf4:	1c 82       	std	Y+4, r1	; 0x04
    2cf6:	18 c0       	rjmp	.+48     	; 0x2d28 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0xe8>
    2cf8:	8b 85       	ldd	r24, Y+11	; 0x0b
            FT_Trans::Transfer(*Src++);
    2cfa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cfc:	9c 01       	movw	r18, r24
    2cfe:	2f 5f       	subi	r18, 0xFF	; 255
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	3c 87       	std	Y+12, r19	; 0x0c
    2d04:	2b 87       	std	Y+11, r18	; 0x0b
    2d06:	fc 01       	movw	r30, r24
    2d08:	20 81       	ld	r18, Z
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	62 2f       	mov	r22, r18
    2d10:	04 d9       	rcall	.-3576   	; 0x1f1a <_ZN16FT_Transport_SPI8TransferEh>
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
      if (Count > FreeSpace) {
         //first update the free space
         UpdateFreeSpace();
         //then transfer the data
         Count = min(FreeSpace, Count);
         for (i = 0; i < Count; i++)
    2d16:	ab 81       	ldd	r26, Y+3	; 0x03
    2d18:	bc 81       	ldd	r27, Y+4	; 0x04
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	a1 1d       	adc	r26, r1
    2d1e:	b1 1d       	adc	r27, r1
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	ab 83       	std	Y+3, r26	; 0x03
    2d26:	bc 83       	std	Y+4, r27	; 0x04
    2d28:	29 81       	ldd	r18, Y+1	; 0x01
    2d2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2d2c:	4b 81       	ldd	r20, Y+3	; 0x03
    2d2e:	5c 81       	ldd	r21, Y+4	; 0x04
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	af 81       	ldd	r26, Y+7	; 0x07
    2d36:	b8 85       	ldd	r27, Y+8	; 0x08
    2d38:	28 17       	cp	r18, r24
    2d3a:	39 07       	cpc	r19, r25
    2d3c:	4a 07       	cpc	r20, r26
    2d3e:	5b 07       	cpc	r21, r27
    2d40:	d8 f2       	brcs	.-74     	; 0x2cf8 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0xb8>
    2d42:	89 85       	ldd	r24, Y+9	; 0x09
    2d44:	9a 85       	ldd	r25, Y+10	; 0x0a
            FT_Trans::Transfer(*Src++);
         CmdFifoWp = (CmdFifoWp + Count) & 0xfff;
    2d46:	fc 01       	movw	r30, r24
    2d48:	20 89       	ldd	r18, Z+16	; 0x10
    2d4a:	31 89       	ldd	r19, Z+17	; 0x11
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	82 0f       	add	r24, r18
    2d52:	93 1f       	adc	r25, r19
    2d54:	9c 01       	movw	r18, r24
    2d56:	3f 70       	andi	r19, 0x0F	; 15
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	31 8b       	std	Z+17, r19	; 0x11
    2d60:	20 8b       	std	Z+16, r18	; 0x10
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
         FreeSpace -= Count;
    2d66:	fc 01       	movw	r30, r24
    2d68:	22 89       	ldd	r18, Z+18	; 0x12
    2d6a:	33 89       	ldd	r19, Z+19	; 0x13
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	28 1b       	sub	r18, r24
    2d72:	39 0b       	sbc	r19, r25
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	fc 01       	movw	r30, r24
    2d7a:	33 8b       	std	Z+19, r19	; 0x13
    2d7c:	22 8b       	std	Z+18, r18	; 0x12
    2d7e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d80:	3e 85       	ldd	r19, Y+14	; 0x0e
         //get the free space
         NBytes -= Count;
    2d82:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d84:	58 89       	ldd	r21, Y+16	; 0x10
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	af 81       	ldd	r26, Y+7	; 0x07
    2d8c:	b8 85       	ldd	r27, Y+8	; 0x08
    2d8e:	79 01       	movw	r14, r18
    2d90:	8a 01       	movw	r16, r20
    2d92:	e8 1a       	sub	r14, r24
    2d94:	f9 0a       	sbc	r15, r25
    2d96:	0a 0b       	sbc	r16, r26
    2d98:	1b 0b       	sbc	r17, r27
    2d9a:	d8 01       	movw	r26, r16
    2d9c:	c7 01       	movw	r24, r14
    2d9e:	8d 87       	std	Y+13, r24	; 0x0d
    2da0:	9e 87       	std	Y+14, r25	; 0x0e
    2da2:	af 87       	std	Y+15, r26	; 0x0f
    2da4:	b8 8b       	std	Y+16, r27	; 0x10
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
         Count = min(NBytes, FT_CMDFIFO_SIZE / 2); //atleast wait for half the buffer completion
    2daa:	af 85       	ldd	r26, Y+15	; 0x0f
    2dac:	b8 89       	ldd	r27, Y+16	; 0x10
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	08 e0       	ldi	r16, 0x08	; 8
    2db2:	90 07       	cpc	r25, r16
    2db4:	a1 05       	cpc	r26, r1
    2db6:	b1 05       	cpc	r27, r1
    2db8:	20 f0       	brcs	.+8      	; 0x2dc2 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x182>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	98 e0       	ldi	r25, 0x08	; 8
    2dbe:	a0 e0       	ldi	r26, 0x00	; 0
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
    2dc4:	9e 83       	std	Y+6, r25	; 0x06
    2dc6:	af 83       	std	Y+7, r26	; 0x07
    2dc8:	b8 87       	std	Y+8, r27	; 0x08
    2dca:	2d 81       	ldd	r18, Y+5	; 0x05
    2dcc:	3e 81       	ldd	r19, Y+6	; 0x06
         if (FT_GE_ERROR == ChkGetFreeSpace(Count)) {
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	b9 01       	movw	r22, r18
    2dd4:	f5 d0       	rcall	.+490    	; 0x2fc0 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj>
    2dd6:	98 2f       	mov	r25, r24
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	92 33       	cpi	r25, 0x32	; 50
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1a0>
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	88 23       	and	r24, r24
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1a6>
    2de4:	5e c0       	rjmp	.+188    	; 0x2ea2 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x262>
    2de6:	82 e3       	ldi	r24, 0x32	; 50
    2de8:	66 c0       	rjmp	.+204    	; 0x2eb6 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x276>
    2dea:	19 82       	std	Y+1, r1	; 0x01
            return FT_GE_ERROR;
    2dec:	1a 82       	std	Y+2, r1	; 0x02
    2dee:	1b 82       	std	Y+3, r1	; 0x03
         }
      } else {
         //transfer of data to command buffer
         for (i = 0; i < Count; i++)
    2df0:	1c 82       	std	Y+4, r1	; 0x04
    2df2:	18 c0       	rjmp	.+48     	; 0x2e24 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1e4>
    2df4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2df6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2df8:	9c 01       	movw	r18, r24
            FT_Trans::Transfer(*Src++);
    2dfa:	2f 5f       	subi	r18, 0xFF	; 255
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	3c 87       	std	Y+12, r19	; 0x0c
    2e00:	2b 87       	std	Y+11, r18	; 0x0b
    2e02:	fc 01       	movw	r30, r24
    2e04:	20 81       	ld	r18, Z
    2e06:	89 85       	ldd	r24, Y+9	; 0x09
    2e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0a:	62 2f       	mov	r22, r18
    2e0c:	86 d8       	rcall	.-3828   	; 0x1f1a <_ZN16FT_Transport_SPI8TransferEh>
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	ab 81       	ldd	r26, Y+3	; 0x03
    2e14:	bc 81       	ldd	r27, Y+4	; 0x04
         if (FT_GE_ERROR == ChkGetFreeSpace(Count)) {
            return FT_GE_ERROR;
         }
      } else {
         //transfer of data to command buffer
         for (i = 0; i < Count; i++)
    2e16:	01 96       	adiw	r24, 0x01	; 1
    2e18:	a1 1d       	adc	r26, r1
    2e1a:	b1 1d       	adc	r27, r1
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	ab 83       	std	Y+3, r26	; 0x03
    2e22:	bc 83       	std	Y+4, r27	; 0x04
    2e24:	29 81       	ldd	r18, Y+1	; 0x01
    2e26:	3a 81       	ldd	r19, Y+2	; 0x02
    2e28:	4b 81       	ldd	r20, Y+3	; 0x03
    2e2a:	5c 81       	ldd	r21, Y+4	; 0x04
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	af 81       	ldd	r26, Y+7	; 0x07
    2e32:	b8 85       	ldd	r27, Y+8	; 0x08
    2e34:	28 17       	cp	r18, r24
    2e36:	39 07       	cpc	r19, r25
    2e38:	4a 07       	cpc	r20, r26
    2e3a:	5b 07       	cpc	r21, r27
    2e3c:	d8 f2       	brcs	.-74     	; 0x2df4 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1b4>
    2e3e:	89 85       	ldd	r24, Y+9	; 0x09
    2e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e42:	fc 01       	movw	r30, r24
    2e44:	20 89       	ldd	r18, Z+16	; 0x10
            FT_Trans::Transfer(*Src++);
         CmdFifoWp = (CmdFifoWp + Count) & 0xfff;
    2e46:	31 89       	ldd	r19, Z+17	; 0x11
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	82 0f       	add	r24, r18
    2e4e:	93 1f       	adc	r25, r19
    2e50:	9c 01       	movw	r18, r24
    2e52:	3f 70       	andi	r19, 0x0F	; 15
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	fc 01       	movw	r30, r24
    2e5a:	31 8b       	std	Z+17, r19	; 0x11
    2e5c:	20 8b       	std	Z+16, r18	; 0x10
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	fc 01       	movw	r30, r24
    2e64:	22 89       	ldd	r18, Z+18	; 0x12
         FreeSpace -= Count;
    2e66:	33 89       	ldd	r19, Z+19	; 0x13
    2e68:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6c:	28 1b       	sub	r18, r24
    2e6e:	39 0b       	sbc	r19, r25
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	fc 01       	movw	r30, r24
    2e76:	33 8b       	std	Z+19, r19	; 0x13
    2e78:	22 8b       	std	Z+18, r18	; 0x12
    2e7a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e7c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e7e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e80:	58 89       	ldd	r21, Y+16	; 0x10
         NBytes -= Count;
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	af 81       	ldd	r26, Y+7	; 0x07
    2e88:	b8 85       	ldd	r27, Y+8	; 0x08
    2e8a:	79 01       	movw	r14, r18
    2e8c:	8a 01       	movw	r16, r20
    2e8e:	e8 1a       	sub	r14, r24
    2e90:	f9 0a       	sbc	r15, r25
    2e92:	0a 0b       	sbc	r16, r26
    2e94:	1b 0b       	sbc	r17, r27
    2e96:	d8 01       	movw	r26, r16
    2e98:	c7 01       	movw	r24, r14
    2e9a:	8d 87       	std	Y+13, r24	; 0x0d
    2e9c:	9e 87       	std	Y+14, r25	; 0x0e
    2e9e:	af 87       	std	Y+15, r26	; 0x0f
    2ea0:	b8 8b       	std	Y+16, r27	; 0x10
    2ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea6:	af 85       	ldd	r26, Y+15	; 0x0f
    2ea8:	b8 89       	ldd	r27, Y+16	; 0x10
FT_GEStatus FT_GC<FT_Trans>::TransferCmd(uint8_t *Src, uint32_t NBytes) {
   uint32_t i, Count;
   //align the NBytes to multiple of 4
   NBytes = (NBytes + 3) & (~3);
   //transfer the whole buffer into command buffer
   while (NBytes) {
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	a1 05       	cpc	r26, r1
    2eae:	b1 05       	cpc	r27, r1
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x274>
    2eb2:	e9 ce       	rjmp	.-558    	; 0x2c86 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x46>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	60 96       	adiw	r28, 0x10	; 16
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
         CmdFifoWp = (CmdFifoWp + Count) & 0xfff;
         FreeSpace -= Count;
         NBytes -= Count;
      }
   }
   return FT_GE_OK;
    2ebc:	de bf       	out	0x3e, r29	; 62
}
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	08 95       	ret

00002ed0 <_ZN5FT_GCI16FT_Transport_SPIE19ActiveInternalClockEv>:
//delay(20);
//
//}
template<class FT_Trans>
/* API to set active command, set internal clock and download first DL */
void FT_GC<FT_Trans>::ActiveInternalClock(void) {
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	9e 87       	std	Y+14, r25	; 0x0e
    2eee:	8d 87       	std	Y+13, r24	; 0x0d
   uint8_t FT_DLCODE_BOOTUP[12] = { 0, 0, 0, 2,	//GPU instruction CLEAR_COLOR_RGB - black color
      7, 0, 0, 38, //GPU instruction CLEAR
      0, 0, 0, 0,  //GPU instruction DISPLAY
      };
    2ef0:	2c e0       	ldi	r18, 0x0C	; 12
    2ef2:	e3 eb       	ldi	r30, 0xB3	; 179
    2ef4:	f1 e0       	ldi	r31, 0x01	; 1
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	dc 01       	movw	r26, r24
    2efc:	01 90       	ld	r0, Z+
    2efe:	0d 92       	st	X+, r0
    2f00:	2a 95       	dec	r18
    2f02:	e1 f7       	brne	.-8      	; 0x2efc <_ZN5FT_GCI16FT_Transport_SPIE19ActiveInternalClockEv+0x2c>
   /* change the SPI clock to <11MHz */
   Serial.println("3.1");
    2f04:	63 ea       	ldi	r22, 0xA3	; 163
    2f06:	71 e0       	ldi	r23, 0x01	; 1
    2f08:	80 ef       	ldi	r24, 0xF0	; 240
    2f0a:	92 e0       	ldi	r25, 0x02	; 2
    2f0c:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
   FT_Trans::ChangeClock(FT_SPI_CLK_FREQ_MIN);
    2f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	52 e1       	ldi	r21, 0x12	; 18
    2f18:	6a e7       	ldi	r22, 0x7A	; 122
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN16FT_Transport_SPI11ChangeClockEm>
   Serial.println("3.2");
    2f20:	67 ea       	ldi	r22, 0xA7	; 167
    2f22:	71 e0       	ldi	r23, 0x01	; 1
    2f24:	80 ef       	ldi	r24, 0xF0	; 240
    2f26:	92 e0       	ldi	r25, 0x02	; 2
    2f28:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
   HostCommand(FT_ACTIVE);  //wake up the processor from sleep state
    2f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	ba 01       	movw	r22, r20
    2f36:	db dd       	rcall	.-1098   	; 0x2aee <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>
    2f38:	6b ea       	ldi	r22, 0xAB	; 171
   Serial.println("3.3");
    2f3a:	71 e0       	ldi	r23, 0x01	; 1
    2f3c:	80 ef       	ldi	r24, 0xF0	; 240
    2f3e:	92 e0       	ldi	r25, 0x02	; 2
    2f40:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    2f44:	64 e1       	ldi	r22, 0x14	; 20
   delay(20);
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	0e 94 23 0b 	call	0x1646	; 0x1646 <delay>
    2f50:	6f ea       	ldi	r22, 0xAF	; 175
   Serial.println("3.4");
    2f52:	71 e0       	ldi	r23, 0x01	; 1
    2f54:	80 ef       	ldi	r24, 0xF0	; 240
    2f56:	92 e0       	ldi	r25, 0x02	; 2
    2f58:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN5Print7printlnEPKc>
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
   /* download the first display list */
   FT_Trans::Write(FT_RAM_DL, FT_DLCODE_BOOTUP, 12);
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	1c e0       	ldi	r17, 0x0C	; 12
    2f62:	e1 2e       	mov	r14, r17
    2f64:	f1 2c       	mov	r15, r1
    2f66:	00 e0       	ldi	r16, 0x00	; 0
    2f68:	10 e0       	ldi	r17, 0x00	; 0
    2f6a:	9e 01       	movw	r18, r28
    2f6c:	2f 5f       	subi	r18, 0xFF	; 255
    2f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f70:	40 e0       	ldi	r20, 0x00	; 0
    2f72:	50 e0       	ldi	r21, 0x00	; 0
    2f74:	60 e1       	ldi	r22, 0x10	; 16
    2f76:	70 e0       	ldi	r23, 0x00	; 0
    2f78:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_ZN16FT_Transport_SPI5WriteEmPhm>
    2f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
   /* perform first swap command */
   FT_Trans::Write(REG_DLSWAP, FT_DLSWAP_FRAME);
    2f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f80:	22 e0       	ldi	r18, 0x02	; 2
    2f82:	40 e5       	ldi	r20, 0x50	; 80
    2f84:	54 e2       	ldi	r21, 0x24	; 36
    2f86:	60 e1       	ldi	r22, 0x10	; 16
    2f88:	70 e0       	ldi	r23, 0x00	; 0
    2f8a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN16FT_Transport_SPI5WriteEmh>
    2f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
   //make the cmd read write pointers to 0
   CmdFifoWp = 0;
    2f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f92:	fc 01       	movw	r30, r24
    2f94:	11 8a       	std	Z+17, r1	; 0x11
    2f96:	10 8a       	std	Z+16, r1	; 0x10
    2f98:	8d 85       	ldd	r24, Y+13	; 0x0d
   FreeSpace = FT_CMDFIFO_SIZE - 4;
    2f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9c:	2c ef       	ldi	r18, 0xFC	; 252
    2f9e:	3f e0       	ldi	r19, 0x0F	; 15
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	33 8b       	std	Z+19, r19	; 0x13
    2fa4:	22 8b       	std	Z+18, r18	; 0x12
    2fa6:	2e 96       	adiw	r28, 0x0e	; 14
}
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	ff 90       	pop	r15
    2fbc:	ef 90       	pop	r14
    2fbe:	08 95       	ret

00002fc0 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj>:
   }
   return FT_GE_OK;
}
template<class FT_Trans>
/* API related to coprocessor fifo write command */
FT_GEStatus FT_GC<FT_Trans>::ChkGetFreeSpace(uint16_t NBytes) {
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x6>
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x8>
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xa>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	9c 83       	std	Y+4, r25	; 0x04
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
    2fd2:	7e 83       	std	Y+6, r23	; 0x06
    2fd4:	6d 83       	std	Y+5, r22	; 0x05
   //return busy if no space
   if (FreeSpace < NBytes) {
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	fc 01       	movw	r30, r24
    2fdc:	22 89       	ldd	r18, Z+18	; 0x12
    2fde:	33 89       	ldd	r19, Z+19	; 0x13
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	28 17       	cp	r18, r24
    2fe6:	39 07       	cpc	r19, r25
    2fe8:	08 f0       	brcs	.+2      	; 0x2fec <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x2c>
    2fea:	62 c0       	rjmp	.+196    	; 0x30b0 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xf0>
      if (TrnsFlag) {
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	86 81       	ldd	r24, Z+6	; 0x06
    2ff4:	88 23       	and	r24, r24
    2ff6:	41 f0       	breq	.+16     	; 0x3008 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x48>
         EndTransferCmd();
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	c8 db       	rcall	.-2160   	; 0x278e <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
         TrnsFlag = 1;  //coz EndTransferCmd will make it 0
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	21 e0       	ldi	r18, 0x01	; 1
    3004:	fc 01       	movw	r30, r24
    3006:	26 83       	std	Z+6, r18	; 0x06
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
      }
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    300a:	9c 81       	ldd	r25, Y+4	; 0x04
    300c:	fc 01       	movw	r30, r24
    300e:	20 89       	ldd	r18, Z+16	; 0x10
    3010:	31 89       	ldd	r19, Z+17	; 0x11
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	9c 81       	ldd	r25, Y+4	; 0x04
    3016:	48 ee       	ldi	r20, 0xE8	; 232
    3018:	54 e2       	ldi	r21, 0x24	; 36
    301a:	60 e1       	ldi	r22, 0x10	; 16
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    3022:	33 c0       	rjmp	.+102    	; 0x308a <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xca>
      while (FreeSpace < NBytes) {
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
         uint16_t rdptr = FT_Trans::Read16(REG_CMD_READ);
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
    3028:	44 ee       	ldi	r20, 0xE4	; 228
    302a:	54 e2       	ldi	r21, 0x24	; 36
    302c:	60 e1       	ldi	r22, 0x10	; 16
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_ZN16FT_Transport_SPI6Read16Em>
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	89 81       	ldd	r24, Y+1	; 0x01
         if (rdptr == FT_COPRO_ERROR) {
    303a:	9a 81       	ldd	r25, Y+2	; 0x02
    303c:	8f 3f       	cpi	r24, 0xFF	; 255
    303e:	ff e0       	ldi	r31, 0x0F	; 15
    3040:	9f 07       	cpc	r25, r31
    3042:	11 f4       	brne	.+4      	; 0x3048 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x88>
    3044:	82 e3       	ldi	r24, 0x32	; 50
            return FT_GE_ERROR;
    3046:	35 c0       	rjmp	.+106    	; 0x30b2 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xf2>
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
         }
         //update the freespace by reading the register
         FreeSpace = ((CmdFifoWp - rdptr) & 0xffc);
    304a:	9c 81       	ldd	r25, Y+4	; 0x04
    304c:	fc 01       	movw	r30, r24
    304e:	20 89       	ldd	r18, Z+16	; 0x10
    3050:	31 89       	ldd	r19, Z+17	; 0x11
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	9a 81       	ldd	r25, Y+2	; 0x02
    3056:	a9 01       	movw	r20, r18
    3058:	48 1b       	sub	r20, r24
    305a:	59 0b       	sbc	r21, r25
    305c:	ca 01       	movw	r24, r20
    305e:	9c 01       	movw	r18, r24
    3060:	2c 7f       	andi	r18, 0xFC	; 252
    3062:	3f 70       	andi	r19, 0x0F	; 15
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	fc 01       	movw	r30, r24
    306a:	33 8b       	std	Z+19, r19	; 0x13
    306c:	22 8b       	std	Z+18, r18	; 0x12
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
         FreeSpace = (FT_CMDFIFO_SIZE - 4) - FreeSpace;
    3070:	9c 81       	ldd	r25, Y+4	; 0x04
    3072:	fc 01       	movw	r30, r24
    3074:	82 89       	ldd	r24, Z+18	; 0x12
    3076:	93 89       	ldd	r25, Z+19	; 0x13
    3078:	2c ef       	ldi	r18, 0xFC	; 252
    307a:	3f e0       	ldi	r19, 0x0F	; 15
    307c:	28 1b       	sub	r18, r24
    307e:	39 0b       	sbc	r19, r25
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	9c 81       	ldd	r25, Y+4	; 0x04
    3084:	fc 01       	movw	r30, r24
    3086:	33 8b       	std	Z+19, r19	; 0x13
    3088:	22 8b       	std	Z+18, r18	; 0x12
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
         EndTransferCmd();
         TrnsFlag = 1;  //coz EndTransferCmd will make it 0
      }
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
      while (FreeSpace < NBytes) {
    308c:	9c 81       	ldd	r25, Y+4	; 0x04
    308e:	fc 01       	movw	r30, r24
    3090:	22 89       	ldd	r18, Z+18	; 0x12
    3092:	33 89       	ldd	r19, Z+19	; 0x13
    3094:	8d 81       	ldd	r24, Y+5	; 0x05
    3096:	9e 81       	ldd	r25, Y+6	; 0x06
    3098:	28 17       	cp	r18, r24
    309a:	39 07       	cpc	r19, r25
    309c:	18 f2       	brcs	.-122    	; 0x3024 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x64>
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
         }
         //update the freespace by reading the register
         FreeSpace = ((CmdFifoWp - rdptr) & 0xffc);
         FreeSpace = (FT_CMDFIFO_SIZE - 4) - FreeSpace;
      }
      if (TrnsFlag) {
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	fc 01       	movw	r30, r24
    30a4:	86 81       	ldd	r24, Z+6	; 0x06
    30a6:	88 23       	and	r24, r24
    30a8:	19 f0       	breq	.+6      	; 0x30b0 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xf0>
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
         StartTransferCmd();
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	53 dd       	rcall	.-1370   	; 0x2b56 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	26 96       	adiw	r28, 0x06	; 6
      }
   }
   return FT_GE_OK;
    30b4:	0f b6       	in	r0, 0x3f	; 63
}
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv>:
   FT_Trans::Read(Addr);  //ideally sending 3 bytes is sufficient
   delay(20);  //worst scenario
}
template<class FT_Trans>
//void FT_GC<FT_Trans>::CheckIntFlag(uint8_t IntFlag){}
FT_GEStatus FT_GC<FT_Trans>::UpdateFreeSpace() {
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	00 d0       	rcall	.+0      	; 0x30ca <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv+0x6>
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	9a 83       	std	Y+2, r25	; 0x02
    30d0:	89 83       	std	Y+1, r24	; 0x01
   if (TrnsFlag) {
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	fc 01       	movw	r30, r24
    30d8:	86 81       	ldd	r24, Z+6	; 0x06
    30da:	88 23       	and	r24, r24
    30dc:	a1 f0       	breq	.+40     	; 0x3106 <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv+0x42>
      EndTransferCmd();
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	55 db       	rcall	.-2390   	; 0x278e <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	fc 01       	movw	r30, r24
    30ea:	20 89       	ldd	r18, Z+16	; 0x10
    30ec:	31 89       	ldd	r19, Z+17	; 0x11
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	48 ee       	ldi	r20, 0xE8	; 232
    30f4:	54 e2       	ldi	r21, 0x24	; 36
    30f6:	60 e1       	ldi	r22, 0x10	; 16
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
      StartTransferCmd();
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	29 dd       	rcall	.-1454   	; 0x2b56 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    3104:	0d c0       	rjmp	.+26     	; 0x3120 <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv+0x5c>
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
   } else {
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    310a:	fc 01       	movw	r30, r24
    310c:	20 89       	ldd	r18, Z+16	; 0x10
    310e:	31 89       	ldd	r19, Z+17	; 0x11
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	48 ee       	ldi	r20, 0xE8	; 232
    3116:	54 e2       	ldi	r21, 0x24	; 36
    3118:	60 e1       	ldi	r22, 0x10	; 16
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN16FT_Transport_SPI7Write16Emj>
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	0f 90       	pop	r0
   }
   return FT_GE_OK;
    3124:	0f 90       	pop	r0
}
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	08 95       	ret

0000312c <_Z41__static_initialization_and_destruction_0ii>:

   //FTImpl.Clear();

   while (1)
      ;
}
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	00 d0       	rcall	.+0      	; 0x3132 <_Z41__static_initialization_and_destruction_0ii+0x6>
    3132:	00 d0       	rcall	.+0      	; 0x3134 <_Z41__static_initialization_and_destruction_0ii+0x8>
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	9a 83       	std	Y+2, r25	; 0x02
    313a:	89 83       	std	Y+1, r24	; 0x01
    313c:	7c 83       	std	Y+4, r23	; 0x04
    313e:	6b 83       	std	Y+3, r22	; 0x03
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	9a 81       	ldd	r25, Y+2	; 0x02
    3144:	81 30       	cpi	r24, 0x01	; 1
    3146:	91 05       	cpc	r25, r1
    3148:	61 f4       	brne	.+24     	; 0x3162 <_Z41__static_initialization_and_destruction_0ii+0x36>
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	8f 3f       	cpi	r24, 0xFF	; 255
    3150:	2f ef       	ldi	r18, 0xFF	; 255
    3152:	92 07       	cpc	r25, r18
    3154:	31 f4       	brne	.+12     	; 0x3162 <_Z41__static_initialization_and_destruction_0ii+0x36>
 */

#include "FT_VM801P43_50.h"
#include "arduino/Arduino.h"

FT801IMPL_SPI FTImpl(FT_CS_PIN, FT_INT_PIN);
    3156:	47 e0       	ldi	r20, 0x07	; 7
    3158:	60 e0       	ldi	r22, 0x00	; 0
    315a:	84 e4       	ldi	r24, 0x44	; 68
    315c:	93 e0       	ldi	r25, 0x03	; 3
    315e:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh>
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	49 f4       	brne	.+18     	; 0x317c <_Z41__static_initialization_and_destruction_0ii+0x50>
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	9c 81       	ldd	r25, Y+4	; 0x04
    316e:	8f 3f       	cpi	r24, 0xFF	; 255
    3170:	2f ef       	ldi	r18, 0xFF	; 255
    3172:	92 07       	cpc	r25, r18
    3174:	19 f4       	brne	.+6      	; 0x317c <_Z41__static_initialization_and_destruction_0ii+0x50>
    3176:	84 e4       	ldi	r24, 0x44	; 68
    3178:	93 e0       	ldi	r25, 0x03	; 3
    317a:	07 d0       	rcall	.+14     	; 0x318a <_ZN9FT801ImplI16FT_Transport_SPIED1Ev>
    317c:	0f 90       	pop	r0

   //FTImpl.Clear();

   while (1)
      ;
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	08 95       	ret

0000318a <_ZN9FT801ImplI16FT_Transport_SPIED1Ev>:
	//all the three pins will be utilized
	FT_GC<FT_Trans>::CSPin = csPin;
	FT_GC<FT_Trans>::IntPin = IntPin;
}
template<class FT_Trans>
FT801Impl<FT_Trans>::~FT801Impl()
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	00 d0       	rcall	.+0      	; 0x3190 <_ZN9FT801ImplI16FT_Transport_SPIED1Ev+0x6>
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
{
	//do nothing
}
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	99 d9       	rcall	.-3278   	; 0x24d0 <_ZN5FT_GCI16FT_Transport_SPIED1Ev>
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	08 95       	ret

000031a8 <_GLOBAL__sub_I_FTImpl>:
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	6f ef       	ldi	r22, 0xFF	; 255
    31b2:	7f ef       	ldi	r23, 0xFF	; 255
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	b9 df       	rcall	.-142    	; 0x312c <_Z41__static_initialization_and_destruction_0ii>
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	08 95       	ret

000031c0 <_GLOBAL__sub_D_FTImpl>:
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	6f ef       	ldi	r22, 0xFF	; 255
    31ca:	7f ef       	ldi	r23, 0xFF	; 255
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	ad df       	rcall	.-166    	; 0x312c <_Z41__static_initialization_and_destruction_0ii>
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	08 95       	ret

000031d8 <__udivmodsi4>:
    31d8:	a1 e2       	ldi	r26, 0x21	; 33
    31da:	1a 2e       	mov	r1, r26
    31dc:	aa 1b       	sub	r26, r26
    31de:	bb 1b       	sub	r27, r27
    31e0:	fd 01       	movw	r30, r26
    31e2:	0d c0       	rjmp	.+26     	; 0x31fe <__udivmodsi4_ep>

000031e4 <__udivmodsi4_loop>:
    31e4:	aa 1f       	adc	r26, r26
    31e6:	bb 1f       	adc	r27, r27
    31e8:	ee 1f       	adc	r30, r30
    31ea:	ff 1f       	adc	r31, r31
    31ec:	a2 17       	cp	r26, r18
    31ee:	b3 07       	cpc	r27, r19
    31f0:	e4 07       	cpc	r30, r20
    31f2:	f5 07       	cpc	r31, r21
    31f4:	20 f0       	brcs	.+8      	; 0x31fe <__udivmodsi4_ep>
    31f6:	a2 1b       	sub	r26, r18
    31f8:	b3 0b       	sbc	r27, r19
    31fa:	e4 0b       	sbc	r30, r20
    31fc:	f5 0b       	sbc	r31, r21

000031fe <__udivmodsi4_ep>:
    31fe:	66 1f       	adc	r22, r22
    3200:	77 1f       	adc	r23, r23
    3202:	88 1f       	adc	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	1a 94       	dec	r1
    3208:	69 f7       	brne	.-38     	; 0x31e4 <__udivmodsi4_loop>
    320a:	60 95       	com	r22
    320c:	70 95       	com	r23
    320e:	80 95       	com	r24
    3210:	90 95       	com	r25
    3212:	9b 01       	movw	r18, r22
    3214:	ac 01       	movw	r20, r24
    3216:	bd 01       	movw	r22, r26
    3218:	cf 01       	movw	r24, r30
    321a:	08 95       	ret

0000321c <__muluhisi3>:
    321c:	0d d0       	rcall	.+26     	; 0x3238 <__umulhisi3>
    321e:	a5 9f       	mul	r26, r21
    3220:	90 0d       	add	r25, r0
    3222:	b4 9f       	mul	r27, r20
    3224:	90 0d       	add	r25, r0
    3226:	a4 9f       	mul	r26, r20
    3228:	80 0d       	add	r24, r0
    322a:	91 1d       	adc	r25, r1
    322c:	11 24       	eor	r1, r1
    322e:	08 95       	ret

00003230 <__tablejump_elpm__>:
    3230:	07 90       	elpm	r0, Z+
    3232:	f6 91       	elpm	r31, Z
    3234:	e0 2d       	mov	r30, r0
    3236:	09 94       	ijmp

00003238 <__umulhisi3>:
    3238:	a2 9f       	mul	r26, r18
    323a:	b0 01       	movw	r22, r0
    323c:	b3 9f       	mul	r27, r19
    323e:	c0 01       	movw	r24, r0
    3240:	a3 9f       	mul	r26, r19
    3242:	70 0d       	add	r23, r0
    3244:	81 1d       	adc	r24, r1
    3246:	11 24       	eor	r1, r1
    3248:	91 1d       	adc	r25, r1
    324a:	b2 9f       	mul	r27, r18
    324c:	70 0d       	add	r23, r0
    324e:	81 1d       	adc	r24, r1
    3250:	11 24       	eor	r1, r1
    3252:	91 1d       	adc	r25, r1
    3254:	08 95       	ret

00003256 <strlen>:
    3256:	fc 01       	movw	r30, r24
    3258:	01 90       	ld	r0, Z+
    325a:	00 20       	and	r0, r0
    325c:	e9 f7       	brne	.-6      	; 0x3258 <strlen+0x2>
    325e:	80 95       	com	r24
    3260:	90 95       	com	r25
    3262:	8e 0f       	add	r24, r30
    3264:	9f 1f       	adc	r25, r31
    3266:	08 95       	ret

00003268 <__do_global_dtors>:
    3268:	10 e0       	ldi	r17, 0x00	; 0
    326a:	c8 e9       	ldi	r28, 0x98	; 152
    326c:	d0 e0       	ldi	r29, 0x00	; 0
    326e:	00 e0       	ldi	r16, 0x00	; 0
    3270:	05 c0       	rjmp	.+10     	; 0x327c <__do_global_dtors+0x14>
    3272:	22 97       	sbiw	r28, 0x02	; 2
    3274:	01 09       	sbc	r16, r1
    3276:	fe 01       	movw	r30, r28
    3278:	0b bf       	out	0x3b, r16	; 59
    327a:	da df       	rcall	.-76     	; 0x3230 <__tablejump_elpm__>
    327c:	ca 39       	cpi	r28, 0x9A	; 154
    327e:	d1 07       	cpc	r29, r17
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	08 07       	cpc	r16, r24
    3284:	b1 f7       	brne	.-20     	; 0x3272 <__do_global_dtors+0xa>
    3286:	f8 94       	cli

00003288 <__stop_program>:
    3288:	ff cf       	rjmp	.-2      	; 0x3288 <__stop_program>
