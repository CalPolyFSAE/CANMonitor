
FE2015Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00002f20  00002fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  00800196  00800196  0000304a  2**0
                  ALLOC
  3 .stab         00007680  00000000  00000000  0000304c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007e44  00000000  00000000  0000a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012510  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c0  00000000  00000000  00012528  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a72  00000000  00000000  000126e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000118  00000000  00000000  0001315a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000559  00000000  00000000  00013272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__dtors_end>
       2:	00 00       	nop
       4:	d2 c7       	rjmp	.+4004   	; 0xfaa <__vector_1>
       6:	00 00       	nop
       8:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_2>
       c:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_3>
      10:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_4>
      14:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_5>
      18:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_6>
      1c:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__vector_7>
      20:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_8>
      24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
      32:	00 00       	nop
      34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
      36:	00 00       	nop
      38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_17>
      48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
      52:	00 00       	nop
      54:	e0 c0       	rjmp	.+448    	; 0x216 <__vector_21>
      56:	00 00       	nop
      58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__vector_32>
      82:	00 00       	nop
      84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
	...

00000094 <__ctors_start>:
      94:	fd 05       	cpc	r31, r13
      96:	1f 17       	cp	r17, r31

00000098 <__ctors_end>:
      98:	2b 17       	cp	r18, r27

0000009a <__dtors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e0 e2       	ldi	r30, 0x20	; 32
      ae:	ff e2       	ldi	r31, 0x2F	; 47
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a6 39       	cpi	r26, 0x96	; 150
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	23 e0       	ldi	r18, 0x03	; 3
      c2:	a6 e9       	ldi	r26, 0x96	; 150
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a6 30       	cpi	r26, 0x06	; 6
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>

000000d0 <__do_global_ctors>:
      d0:	10 e0       	ldi	r17, 0x00	; 0
      d2:	c8 e9       	ldi	r28, 0x98	; 152
      d4:	d0 e0       	ldi	r29, 0x00	; 0
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	06 c0       	rjmp	.+12     	; 0xe6 <__do_global_ctors+0x16>
      da:	22 97       	sbiw	r28, 0x02	; 2
      dc:	01 09       	sbc	r16, r1
      de:	fe 01       	movw	r30, r28
      e0:	0b bf       	out	0x3b, r16	; 59
      e2:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__tablejump_elpm__>
      e6:	c4 39       	cpi	r28, 0x94	; 148
      e8:	d1 07       	cpc	r29, r17
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	08 07       	cpc	r16, r24
      ee:	a9 f7       	brne	.-22     	; 0xda <__do_global_ctors+0xa>
      f0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <main>
      f4:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__do_global_dtors>

000000f8 <__bad_interrupt>:
      f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	00 d0       	rcall	.+0      	; 0x100 <_ZN5PrintC1Ev+0x6>
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	89 81       	ldd	r24, Y+1	; 0x01
     10a:	9a 81       	ldd	r25, Y+2	; 0x02
     10c:	21 e9       	ldi	r18, 0x91	; 145
     10e:	31 e0       	ldi	r19, 0x01	; 1
     110:	fc 01       	movw	r30, r24
     112:	31 83       	std	Z+1, r19	; 0x01
     114:	20 83       	st	Z, r18
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	9a 81       	ldd	r25, Y+2	; 0x02
     11a:	fc 01       	movw	r30, r24
     11c:	13 82       	std	Z+3, r1	; 0x03
     11e:	12 82       	std	Z+2, r1	; 0x02
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <_ZN6StreamC1Ev+0x6>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	9a 83       	std	Y+2, r25	; 0x02
     136:	89 83       	std	Y+1, r24	; 0x01
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	9a 81       	ldd	r25, Y+2	; 0x02
     13c:	de df       	rcall	.-68     	; 0xfa <_ZN5PrintC1Ev>
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	9a 81       	ldd	r25, Y+2	; 0x02
     142:	21 e8       	ldi	r18, 0x81	; 129
     144:	31 e0       	ldi	r19, 0x01	; 1
     146:	fc 01       	movw	r30, r24
     148:	31 83       	std	Z+1, r19	; 0x01
     14a:	20 83       	st	Z, r18
     14c:	29 81       	ldd	r18, Y+1	; 0x01
     14e:	3a 81       	ldd	r19, Y+2	; 0x02
     150:	88 ee       	ldi	r24, 0xE8	; 232
     152:	93 e0       	ldi	r25, 0x03	; 3
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	84 83       	std	Z+4, r24	; 0x04
     15c:	95 83       	std	Z+5, r25	; 0x05
     15e:	a6 83       	std	Z+6, r26	; 0x06
     160:	b7 83       	std	Z+7, r27	; 0x07
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <_ZN14HardwareSerial4peekEv>:
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *udr,
      uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x);
    void begin(long);
    int available(void);
    int peek(void) { return 0; } // SCL20121009 N.B - placeholder - needs to be implemented
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <_ZN14HardwareSerial4peekEv+0x6>
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <_Z10store_charhP11ring_buffer>:
ring_buffer rx_buffer = { { 0 }, 0, 0 };
ring_buffer rx_buffer1 = { { 0 }, 0, 0 };


inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	00 d0       	rcall	.+0      	; 0x18e <_Z10store_charhP11ring_buffer+0x6>
     18e:	00 d0       	rcall	.+0      	; 0x190 <_Z10store_charhP11ring_buffer+0x8>
     190:	1f 92       	push	r1
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	8b 83       	std	Y+3, r24	; 0x03
     198:	7d 83       	std	Y+5, r23	; 0x05
     19a:	6c 83       	std	Y+4, r22	; 0x04
  int i = (rx_buffer->head + 1) % RX_BUFFER_SIZE;
     19c:	8c 81       	ldd	r24, Y+4	; 0x04
     19e:	9d 81       	ldd	r25, Y+5	; 0x05
     1a0:	80 58       	subi	r24, 0x80	; 128
     1a2:	9f 4f       	sbci	r25, 0xFF	; 255
     1a4:	fc 01       	movw	r30, r24
     1a6:	80 81       	ld	r24, Z
     1a8:	91 81       	ldd	r25, Z+1	; 0x01
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	8f 77       	andi	r24, 0x7F	; 127
     1ae:	90 78       	andi	r25, 0x80	; 128
     1b0:	99 23       	and	r25, r25
     1b2:	24 f4       	brge	.+8      	; 0x1bc <_Z10store_charhP11ring_buffer+0x34>
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	80 68       	ori	r24, 0x80	; 128
     1b8:	9f 6f       	ori	r25, 0xFF	; 255
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	9d 81       	ldd	r25, Y+5	; 0x05
     1c4:	8e 57       	subi	r24, 0x7E	; 126
     1c6:	9f 4f       	sbci	r25, 0xFF	; 255
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 81       	ld	r18, Z
     1cc:	31 81       	ldd	r19, Z+1	; 0x01
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	9a 81       	ldd	r25, Y+2	; 0x02
     1d2:	28 17       	cp	r18, r24
     1d4:	39 07       	cpc	r19, r25
     1d6:	b9 f0       	breq	.+46     	; 0x206 <_Z10store_charhP11ring_buffer+0x7e>
    rx_buffer->buffer[rx_buffer->head] = c;
     1d8:	8c 81       	ldd	r24, Y+4	; 0x04
     1da:	9d 81       	ldd	r25, Y+5	; 0x05
     1dc:	80 58       	subi	r24, 0x80	; 128
     1de:	9f 4f       	sbci	r25, 0xFF	; 255
     1e0:	fc 01       	movw	r30, r24
     1e2:	80 81       	ld	r24, Z
     1e4:	91 81       	ldd	r25, Z+1	; 0x01
     1e6:	2c 81       	ldd	r18, Y+4	; 0x04
     1e8:	3d 81       	ldd	r19, Y+5	; 0x05
     1ea:	82 0f       	add	r24, r18
     1ec:	93 1f       	adc	r25, r19
     1ee:	2b 81       	ldd	r18, Y+3	; 0x03
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
    rx_buffer->head = i;
     1f4:	8c 81       	ldd	r24, Y+4	; 0x04
     1f6:	9d 81       	ldd	r25, Y+5	; 0x05
     1f8:	80 58       	subi	r24, 0x80	; 128
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	3a 81       	ldd	r19, Y+2	; 0x02
     200:	fc 01       	movw	r30, r24
     202:	31 83       	std	Z+1, r19	; 0x01
     204:	20 83       	st	Z, r18
  }
}
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <__vector_21>:


SIGNAL(SIG_USART0_RECV)
{
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	00 90 5f 00 	lds	r0, 0x005F
     21e:	0f 92       	push	r0
     220:	11 24       	eor	r1, r1
     222:	00 90 5b 00 	lds	r0, 0x005B
     226:	0f 92       	push	r0
     228:	2f 93       	push	r18
     22a:	3f 93       	push	r19
     22c:	4f 93       	push	r20
     22e:	5f 93       	push	r21
     230:	6f 93       	push	r22
     232:	7f 93       	push	r23
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	af 93       	push	r26
     23a:	bf 93       	push	r27
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	1f 92       	push	r1
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
  unsigned char c = UDR0;
     24a:	86 ec       	ldi	r24, 0xC6	; 198
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	89 83       	std	Y+1, r24	; 0x01
  store_char(c, &rx_buffer);
     254:	66 e9       	ldi	r22, 0x96	; 150
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	96 df       	rcall	.-212    	; 0x188 <_Z10store_charhP11ring_buffer>
     25c:	0f 90       	pop	r0
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	ff 91       	pop	r31
     264:	ef 91       	pop	r30
     266:	bf 91       	pop	r27
     268:	af 91       	pop	r26
     26a:	9f 91       	pop	r25
     26c:	8f 91       	pop	r24
     26e:	7f 91       	pop	r23
     270:	6f 91       	pop	r22
     272:	5f 91       	pop	r21
     274:	4f 91       	pop	r20
     276:	3f 91       	pop	r19
     278:	2f 91       	pop	r18
     27a:	0f 90       	pop	r0
     27c:	00 92 5b 00 	sts	0x005B, r0
     280:	0f 90       	pop	r0
     282:	00 92 5f 00 	sts	0x005F, r0
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <__vector_32>:

SIGNAL(SIG_USART1_RECV)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	00 90 5f 00 	lds	r0, 0x005F
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	00 90 5b 00 	lds	r0, 0x005B
     29c:	0f 92       	push	r0
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
  unsigned char c = UDR1;
     2c0:	8e ec       	ldi	r24, 0xCE	; 206
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	89 83       	std	Y+1, r24	; 0x01
  store_char(c, &rx_buffer1);
     2ca:	6a e1       	ldi	r22, 0x1A	; 26
     2cc:	72 e0       	ldi	r23, 0x02	; 2
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	5b df       	rcall	.-330    	; 0x188 <_Z10store_charhP11ring_buffer>
     2d2:	0f 90       	pop	r0
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	bf 91       	pop	r27
     2de:	af 91       	pop	r26
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	7f 91       	pop	r23
     2e6:	6f 91       	pop	r22
     2e8:	5f 91       	pop	r21
     2ea:	4f 91       	pop	r20
     2ec:	3f 91       	pop	r19
     2ee:	2f 91       	pop	r18
     2f0:	0f 90       	pop	r0
     2f2:	00 92 5b 00 	sts	0x005B, r0
     2f6:	0f 90       	pop	r0
     2f8:	00 92 5f 00 	sts	0x005F, r0
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
     302:	8f 92       	push	r8
     304:	af 92       	push	r10
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	60 97       	sbiw	r28, 0x10	; 16
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	9a 83       	std	Y+2, r25	; 0x02
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	7c 83       	std	Y+4, r23	; 0x04
     32c:	6b 83       	std	Y+3, r22	; 0x03
     32e:	5e 83       	std	Y+6, r21	; 0x06
     330:	4d 83       	std	Y+5, r20	; 0x05
     332:	38 87       	std	Y+8, r19	; 0x08
     334:	2f 83       	std	Y+7, r18	; 0x07
     336:	1a 87       	std	Y+10, r17	; 0x0a
     338:	09 87       	std	Y+9, r16	; 0x09
     33a:	fc 86       	std	Y+12, r15	; 0x0c
     33c:	eb 86       	std	Y+11, r14	; 0x0b
     33e:	de 86       	std	Y+14, r13	; 0x0e
     340:	cd 86       	std	Y+13, r12	; 0x0d
     342:	af 86       	std	Y+15, r10	; 0x0f
     344:	88 8a       	std	Y+16, r8	; 0x10
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	9a 81       	ldd	r25, Y+2	; 0x02
     34a:	ef de       	rcall	.-546    	; 0x12a <_ZN6StreamC1Ev>
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	21 e7       	ldi	r18, 0x71	; 113
     352:	31 e0       	ldi	r19, 0x01	; 1
     354:	fc 01       	movw	r30, r24
     356:	31 83       	std	Z+1, r19	; 0x01
     358:	20 83       	st	Z, r18
     35a:	89 81       	ldd	r24, Y+1	; 0x01
{
  _rx_buffer = rx_buffer;
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	2b 81       	ldd	r18, Y+3	; 0x03
     360:	3c 81       	ldd	r19, Y+4	; 0x04
     362:	fc 01       	movw	r30, r24
     364:	35 87       	std	Z+13, r19	; 0x0d
     366:	24 87       	std	Z+12, r18	; 0x0c
     368:	89 81       	ldd	r24, Y+1	; 0x01
  _ubrrh = ubrrh;
     36a:	9a 81       	ldd	r25, Y+2	; 0x02
     36c:	2d 81       	ldd	r18, Y+5	; 0x05
     36e:	3e 81       	ldd	r19, Y+6	; 0x06
     370:	fc 01       	movw	r30, r24
     372:	37 87       	std	Z+15, r19	; 0x0f
     374:	26 87       	std	Z+14, r18	; 0x0e
     376:	89 81       	ldd	r24, Y+1	; 0x01
  _ubrrl = ubrrl;
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	2f 81       	ldd	r18, Y+7	; 0x07
     37c:	38 85       	ldd	r19, Y+8	; 0x08
     37e:	fc 01       	movw	r30, r24
     380:	31 8b       	std	Z+17, r19	; 0x11
     382:	20 8b       	std	Z+16, r18	; 0x10
     384:	89 81       	ldd	r24, Y+1	; 0x01
  _ucsra = ucsra;
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	29 85       	ldd	r18, Y+9	; 0x09
     38a:	3a 85       	ldd	r19, Y+10	; 0x0a
     38c:	fc 01       	movw	r30, r24
     38e:	33 8b       	std	Z+19, r19	; 0x13
     390:	22 8b       	std	Z+18, r18	; 0x12
     392:	89 81       	ldd	r24, Y+1	; 0x01
  _ucsrb = ucsrb;
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	2b 85       	ldd	r18, Y+11	; 0x0b
     398:	3c 85       	ldd	r19, Y+12	; 0x0c
     39a:	fc 01       	movw	r30, r24
     39c:	35 8b       	std	Z+21, r19	; 0x15
     39e:	24 8b       	std	Z+20, r18	; 0x14
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
  _udr = udr;
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	2d 85       	ldd	r18, Y+13	; 0x0d
     3a6:	3e 85       	ldd	r19, Y+14	; 0x0e
     3a8:	fc 01       	movw	r30, r24
     3aa:	37 8b       	std	Z+23, r19	; 0x17
     3ac:	26 8b       	std	Z+22, r18	; 0x16
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
  _rxen = rxen;
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	2f 85       	ldd	r18, Y+15	; 0x0f
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 8f       	std	Z+24, r18	; 0x18
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
  _txen = txen;
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	28 89       	ldd	r18, Y+16	; 0x10
     3be:	fc 01       	movw	r30, r24
     3c0:	21 8f       	std	Z+25, r18	; 0x19
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
  _rxcie = rxcie;
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3c8:	fc 01       	movw	r30, r24
     3ca:	22 8f       	std	Z+26, r18	; 0x1a
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
  _udre = udre;
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	2e 8d       	ldd	r18, Y+30	; 0x1e
     3d2:	fc 01       	movw	r30, r24
     3d4:	23 8f       	std	Z+27, r18	; 0x1b
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
  _u2x = u2x;
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	2f 8d       	ldd	r18, Y+31	; 0x1f
     3dc:	fc 01       	movw	r30, r24
     3de:	24 8f       	std	Z+28, r18	; 0x1c
     3e0:	60 96       	adiw	r28, 0x10	; 16
}
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	af 90       	pop	r10
     3fe:	8f 90       	pop	r8
     400:	08 95       	ret

00000402 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	cb 55       	subi	r28, 0x5B	; 91
     40c:	d1 09       	sbc	r29, r1
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	9f 83       	std	Y+7, r25	; 0x07
     41a:	8e 83       	std	Y+6, r24	; 0x06
     41c:	48 87       	std	Y+8, r20	; 0x08
     41e:	59 87       	std	Y+9, r21	; 0x09
     420:	6a 87       	std	Y+10, r22	; 0x0a
     422:	7b 87       	std	Y+11, r23	; 0x0b
  uint16_t baud_setting;
  bool use_u2x;

  // U2X mode is needed for baud rates higher than (CPU Hz / 16)
  if (baud > F_CPU / 16) {
     424:	88 85       	ldd	r24, Y+8	; 0x08
     426:	99 85       	ldd	r25, Y+9	; 0x09
     428:	aa 85       	ldd	r26, Y+10	; 0x0a
     42a:	bb 85       	ldd	r27, Y+11	; 0x0b
     42c:	85 32       	cpi	r24, 0x25	; 37
     42e:	24 ef       	ldi	r18, 0xF4	; 244
     430:	92 07       	cpc	r25, r18
     432:	a1 05       	cpc	r26, r1
     434:	b1 05       	cpc	r27, r1
     436:	18 f0       	brcs	.+6      	; 0x43e <_ZN14HardwareSerial5beginEl+0x3c>
    use_u2x = true;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	8b 83       	std	Y+3, r24	; 0x03
     43c:	c1 c1       	rjmp	.+898    	; 0x7c0 <_ZN14HardwareSerial5beginEl+0x3be>
  } else {
    // figure out if U2X mode would allow for a better connection
    
    // calculate the percent difference between the baud-rate specified and
    // the real baud rate for both U2X and non-U2X mode (0-255 error percent)
    uint8_t nonu2x_baud_error = abs((int)(255-((F_CPU/(16*(((F_CPU/8/baud-1)/2)+1))*255)/baud)));
     43e:	28 85       	ldd	r18, Y+8	; 0x08
     440:	39 85       	ldd	r19, Y+9	; 0x09
     442:	4a 85       	ldd	r20, Y+10	; 0x0a
     444:	5b 85       	ldd	r21, Y+11	; 0x0b
     446:	88 e4       	ldi	r24, 0x48	; 72
     448:	98 ee       	ldi	r25, 0xE8	; 232
     44a:	a1 e0       	ldi	r26, 0x01	; 1
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	bc 01       	movw	r22, r24
     450:	cd 01       	movw	r24, r26
     452:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     456:	da 01       	movw	r26, r20
     458:	c9 01       	movw	r24, r18
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	a1 09       	sbc	r26, r1
     45e:	b1 09       	sbc	r27, r1
     460:	b6 95       	lsr	r27
     462:	a7 95       	ror	r26
     464:	97 95       	ror	r25
     466:	87 95       	ror	r24
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	a1 1d       	adc	r26, r1
     46c:	b1 1d       	adc	r27, r1
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	aa 1f       	adc	r26, r26
     474:	bb 1f       	adc	r27, r27
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	aa 1f       	adc	r26, r26
     47c:	bb 1f       	adc	r27, r27
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	aa 1f       	adc	r26, r26
     484:	bb 1f       	adc	r27, r27
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	aa 1f       	adc	r26, r26
     48c:	bb 1f       	adc	r27, r27
     48e:	9c 01       	movw	r18, r24
     490:	ad 01       	movw	r20, r26
     492:	80 e4       	ldi	r24, 0x40	; 64
     494:	92 e4       	ldi	r25, 0x42	; 66
     496:	af e0       	ldi	r26, 0x0F	; 15
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	bc 01       	movw	r22, r24
     49c:	cd 01       	movw	r24, r26
     49e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     4a2:	da 01       	movw	r26, r20
     4a4:	c9 01       	movw	r24, r18
     4a6:	9c 01       	movw	r18, r24
     4a8:	ad 01       	movw	r20, r26
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	dc 01       	movw	r26, r24
     4b0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__muluhisi3>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	28 85       	ldd	r18, Y+8	; 0x08
     4ba:	39 85       	ldd	r19, Y+9	; 0x09
     4bc:	4a 85       	ldd	r20, Y+10	; 0x0a
     4be:	5b 85       	ldd	r21, Y+11	; 0x0b
     4c0:	bc 01       	movw	r22, r24
     4c2:	cd 01       	movw	r24, r26
     4c4:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     4c8:	da 01       	movw	r26, r20
     4ca:	c9 01       	movw	r24, r18
     4cc:	2f ef       	ldi	r18, 0xFF	; 255
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	a9 01       	movw	r20, r18
     4d2:	48 1b       	sub	r20, r24
     4d4:	59 0b       	sbc	r21, r25
     4d6:	ca 01       	movw	r24, r20
     4d8:	18 16       	cp	r1, r24
     4da:	19 06       	cpc	r1, r25
     4dc:	0c f0       	brlt	.+2      	; 0x4e0 <_ZN14HardwareSerial5beginEl+0xde>
     4de:	49 c0       	rjmp	.+146    	; 0x572 <_ZN14HardwareSerial5beginEl+0x170>
     4e0:	28 85       	ldd	r18, Y+8	; 0x08
     4e2:	39 85       	ldd	r19, Y+9	; 0x09
     4e4:	4a 85       	ldd	r20, Y+10	; 0x0a
     4e6:	5b 85       	ldd	r21, Y+11	; 0x0b
     4e8:	88 e4       	ldi	r24, 0x48	; 72
     4ea:	98 ee       	ldi	r25, 0xE8	; 232
     4ec:	a1 e0       	ldi	r26, 0x01	; 1
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	bc 01       	movw	r22, r24
     4f2:	cd 01       	movw	r24, r26
     4f4:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     4f8:	da 01       	movw	r26, r20
     4fa:	c9 01       	movw	r24, r18
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	a1 09       	sbc	r26, r1
     500:	b1 09       	sbc	r27, r1
     502:	b6 95       	lsr	r27
     504:	a7 95       	ror	r26
     506:	97 95       	ror	r25
     508:	87 95       	ror	r24
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	a1 1d       	adc	r26, r1
     50e:	b1 1d       	adc	r27, r1
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	aa 1f       	adc	r26, r26
     516:	bb 1f       	adc	r27, r27
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	aa 1f       	adc	r26, r26
     51e:	bb 1f       	adc	r27, r27
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	aa 1f       	adc	r26, r26
     526:	bb 1f       	adc	r27, r27
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	aa 1f       	adc	r26, r26
     52e:	bb 1f       	adc	r27, r27
     530:	9c 01       	movw	r18, r24
     532:	ad 01       	movw	r20, r26
     534:	80 e4       	ldi	r24, 0x40	; 64
     536:	92 e4       	ldi	r25, 0x42	; 66
     538:	af e0       	ldi	r26, 0x0F	; 15
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	bc 01       	movw	r22, r24
     53e:	cd 01       	movw	r24, r26
     540:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     544:	da 01       	movw	r26, r20
     546:	c9 01       	movw	r24, r18
     548:	9c 01       	movw	r18, r24
     54a:	ad 01       	movw	r20, r26
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	dc 01       	movw	r26, r24
     552:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__muluhisi3>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	28 85       	ldd	r18, Y+8	; 0x08
     55c:	39 85       	ldd	r19, Y+9	; 0x09
     55e:	4a 85       	ldd	r20, Y+10	; 0x0a
     560:	5b 85       	ldd	r21, Y+11	; 0x0b
     562:	bc 01       	movw	r22, r24
     564:	cd 01       	movw	r24, r26
     566:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     56a:	da 01       	movw	r26, r20
     56c:	c9 01       	movw	r24, r18
     56e:	80 95       	com	r24
     570:	48 c0       	rjmp	.+144    	; 0x602 <_ZN14HardwareSerial5beginEl+0x200>
     572:	28 85       	ldd	r18, Y+8	; 0x08
     574:	39 85       	ldd	r19, Y+9	; 0x09
     576:	4a 85       	ldd	r20, Y+10	; 0x0a
     578:	5b 85       	ldd	r21, Y+11	; 0x0b
     57a:	88 e4       	ldi	r24, 0x48	; 72
     57c:	98 ee       	ldi	r25, 0xE8	; 232
     57e:	a1 e0       	ldi	r26, 0x01	; 1
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	bc 01       	movw	r22, r24
     584:	cd 01       	movw	r24, r26
     586:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     58a:	da 01       	movw	r26, r20
     58c:	c9 01       	movw	r24, r18
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	a1 09       	sbc	r26, r1
     592:	b1 09       	sbc	r27, r1
     594:	b6 95       	lsr	r27
     596:	a7 95       	ror	r26
     598:	97 95       	ror	r25
     59a:	87 95       	ror	r24
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	a1 1d       	adc	r26, r1
     5a0:	b1 1d       	adc	r27, r1
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	aa 1f       	adc	r26, r26
     5a8:	bb 1f       	adc	r27, r27
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	aa 1f       	adc	r26, r26
     5b0:	bb 1f       	adc	r27, r27
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	aa 1f       	adc	r26, r26
     5b8:	bb 1f       	adc	r27, r27
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	aa 1f       	adc	r26, r26
     5c0:	bb 1f       	adc	r27, r27
     5c2:	9c 01       	movw	r18, r24
     5c4:	ad 01       	movw	r20, r26
     5c6:	80 e4       	ldi	r24, 0x40	; 64
     5c8:	92 e4       	ldi	r25, 0x42	; 66
     5ca:	af e0       	ldi	r26, 0x0F	; 15
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	bc 01       	movw	r22, r24
     5d0:	cd 01       	movw	r24, r26
     5d2:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     5d6:	da 01       	movw	r26, r20
     5d8:	c9 01       	movw	r24, r18
     5da:	9c 01       	movw	r18, r24
     5dc:	ad 01       	movw	r20, r26
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	dc 01       	movw	r26, r24
     5e4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__muluhisi3>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	28 85       	ldd	r18, Y+8	; 0x08
     5ee:	39 85       	ldd	r19, Y+9	; 0x09
     5f0:	4a 85       	ldd	r20, Y+10	; 0x0a
     5f2:	5b 85       	ldd	r21, Y+11	; 0x0b
     5f4:	bc 01       	movw	r22, r24
     5f6:	cd 01       	movw	r24, r26
     5f8:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     5fc:	da 01       	movw	r26, r20
     5fe:	c9 01       	movw	r24, r18
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t u2x_baud_error = abs((int)(255-((F_CPU/(8*(((F_CPU/4/baud-1)/2)+1))*255)/baud)));
     604:	28 85       	ldd	r18, Y+8	; 0x08
     606:	39 85       	ldd	r19, Y+9	; 0x09
     608:	4a 85       	ldd	r20, Y+10	; 0x0a
     60a:	5b 85       	ldd	r21, Y+11	; 0x0b
     60c:	80 e9       	ldi	r24, 0x90	; 144
     60e:	90 ed       	ldi	r25, 0xD0	; 208
     610:	a3 e0       	ldi	r26, 0x03	; 3
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	bc 01       	movw	r22, r24
     616:	cd 01       	movw	r24, r26
     618:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     61c:	da 01       	movw	r26, r20
     61e:	c9 01       	movw	r24, r18
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	a1 09       	sbc	r26, r1
     624:	b1 09       	sbc	r27, r1
     626:	b6 95       	lsr	r27
     628:	a7 95       	ror	r26
     62a:	97 95       	ror	r25
     62c:	87 95       	ror	r24
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	a1 1d       	adc	r26, r1
     632:	b1 1d       	adc	r27, r1
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	aa 1f       	adc	r26, r26
     63a:	bb 1f       	adc	r27, r27
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	aa 1f       	adc	r26, r26
     642:	bb 1f       	adc	r27, r27
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	aa 1f       	adc	r26, r26
     64a:	bb 1f       	adc	r27, r27
     64c:	9c 01       	movw	r18, r24
     64e:	ad 01       	movw	r20, r26
     650:	80 e4       	ldi	r24, 0x40	; 64
     652:	92 e4       	ldi	r25, 0x42	; 66
     654:	af e0       	ldi	r26, 0x0F	; 15
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	bc 01       	movw	r22, r24
     65a:	cd 01       	movw	r24, r26
     65c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     660:	da 01       	movw	r26, r20
     662:	c9 01       	movw	r24, r18
     664:	9c 01       	movw	r18, r24
     666:	ad 01       	movw	r20, r26
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	dc 01       	movw	r26, r24
     66e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__muluhisi3>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	28 85       	ldd	r18, Y+8	; 0x08
     678:	39 85       	ldd	r19, Y+9	; 0x09
     67a:	4a 85       	ldd	r20, Y+10	; 0x0a
     67c:	5b 85       	ldd	r21, Y+11	; 0x0b
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     686:	da 01       	movw	r26, r20
     688:	c9 01       	movw	r24, r18
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	e8 1b       	sub	r30, r24
     692:	f9 0b       	sbc	r31, r25
     694:	cf 01       	movw	r24, r30
     696:	18 16       	cp	r1, r24
     698:	19 06       	cpc	r1, r25
     69a:	0c f0       	brlt	.+2      	; 0x69e <_ZN14HardwareSerial5beginEl+0x29c>
     69c:	45 c0       	rjmp	.+138    	; 0x728 <_ZN14HardwareSerial5beginEl+0x326>
     69e:	28 85       	ldd	r18, Y+8	; 0x08
     6a0:	39 85       	ldd	r19, Y+9	; 0x09
     6a2:	4a 85       	ldd	r20, Y+10	; 0x0a
     6a4:	5b 85       	ldd	r21, Y+11	; 0x0b
     6a6:	80 e9       	ldi	r24, 0x90	; 144
     6a8:	90 ed       	ldi	r25, 0xD0	; 208
     6aa:	a3 e0       	ldi	r26, 0x03	; 3
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     6b6:	da 01       	movw	r26, r20
     6b8:	c9 01       	movw	r24, r18
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	a1 09       	sbc	r26, r1
     6be:	b1 09       	sbc	r27, r1
     6c0:	b6 95       	lsr	r27
     6c2:	a7 95       	ror	r26
     6c4:	97 95       	ror	r25
     6c6:	87 95       	ror	r24
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	a1 1d       	adc	r26, r1
     6cc:	b1 1d       	adc	r27, r1
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	aa 1f       	adc	r26, r26
     6dc:	bb 1f       	adc	r27, r27
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	aa 1f       	adc	r26, r26
     6e4:	bb 1f       	adc	r27, r27
     6e6:	9c 01       	movw	r18, r24
     6e8:	ad 01       	movw	r20, r26
     6ea:	80 e4       	ldi	r24, 0x40	; 64
     6ec:	92 e4       	ldi	r25, 0x42	; 66
     6ee:	af e0       	ldi	r26, 0x0F	; 15
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	bc 01       	movw	r22, r24
     6f4:	cd 01       	movw	r24, r26
     6f6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     6fa:	da 01       	movw	r26, r20
     6fc:	c9 01       	movw	r24, r18
     6fe:	9c 01       	movw	r18, r24
     700:	ad 01       	movw	r20, r26
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	dc 01       	movw	r26, r24
     708:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__muluhisi3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	28 85       	ldd	r18, Y+8	; 0x08
     712:	39 85       	ldd	r19, Y+9	; 0x09
     714:	4a 85       	ldd	r20, Y+10	; 0x0a
     716:	5b 85       	ldd	r21, Y+11	; 0x0b
     718:	bc 01       	movw	r22, r24
     71a:	cd 01       	movw	r24, r26
     71c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     720:	da 01       	movw	r26, r20
     722:	c9 01       	movw	r24, r18
     724:	80 95       	com	r24
     726:	44 c0       	rjmp	.+136    	; 0x7b0 <_ZN14HardwareSerial5beginEl+0x3ae>
     728:	28 85       	ldd	r18, Y+8	; 0x08
     72a:	39 85       	ldd	r19, Y+9	; 0x09
     72c:	4a 85       	ldd	r20, Y+10	; 0x0a
     72e:	5b 85       	ldd	r21, Y+11	; 0x0b
     730:	80 e9       	ldi	r24, 0x90	; 144
     732:	90 ed       	ldi	r25, 0xD0	; 208
     734:	a3 e0       	ldi	r26, 0x03	; 3
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	a1 09       	sbc	r26, r1
     748:	b1 09       	sbc	r27, r1
     74a:	b6 95       	lsr	r27
     74c:	a7 95       	ror	r26
     74e:	97 95       	ror	r25
     750:	87 95       	ror	r24
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	a1 1d       	adc	r26, r1
     756:	b1 1d       	adc	r27, r1
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	aa 1f       	adc	r26, r26
     75e:	bb 1f       	adc	r27, r27
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	aa 1f       	adc	r26, r26
     766:	bb 1f       	adc	r27, r27
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	aa 1f       	adc	r26, r26
     76e:	bb 1f       	adc	r27, r27
     770:	9c 01       	movw	r18, r24
     772:	ad 01       	movw	r20, r26
     774:	80 e4       	ldi	r24, 0x40	; 64
     776:	92 e4       	ldi	r25, 0x42	; 66
     778:	af e0       	ldi	r26, 0x0F	; 15
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	bc 01       	movw	r22, r24
     77e:	cd 01       	movw	r24, r26
     780:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     784:	da 01       	movw	r26, r20
     786:	c9 01       	movw	r24, r18
     788:	9c 01       	movw	r18, r24
     78a:	ad 01       	movw	r20, r26
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	dc 01       	movw	r26, r24
     792:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__muluhisi3>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	28 85       	ldd	r18, Y+8	; 0x08
     79c:	39 85       	ldd	r19, Y+9	; 0x09
     79e:	4a 85       	ldd	r20, Y+10	; 0x0a
     7a0:	5b 85       	ldd	r21, Y+11	; 0x0b
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     7aa:	da 01       	movw	r26, r20
     7ac:	c9 01       	movw	r24, r18
     7ae:	8f 5f       	subi	r24, 0xFF	; 255
     7b0:	8d 83       	std	Y+5, r24	; 0x05
    
    // prefer non-U2X mode because it handles clock skew better
    use_u2x = (nonu2x_baud_error > u2x_baud_error);
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	2c 81       	ldd	r18, Y+4	; 0x04
     7b6:	9d 81       	ldd	r25, Y+5	; 0x05
     7b8:	92 17       	cp	r25, r18
     7ba:	08 f0       	brcs	.+2      	; 0x7be <_ZN14HardwareSerial5beginEl+0x3bc>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	8b 83       	std	Y+3, r24	; 0x03
  }
  
  if (use_u2x) {
     7c0:	8b 81       	ldd	r24, Y+3	; 0x03
     7c2:	88 23       	and	r24, r24
     7c4:	61 f1       	breq	.+88     	; 0x81e <_ZN14HardwareSerial5beginEl+0x41c>
    *_ucsra = 1 << _u2x;
     7c6:	8e 81       	ldd	r24, Y+6	; 0x06
     7c8:	9f 81       	ldd	r25, Y+7	; 0x07
     7ca:	fc 01       	movw	r30, r24
     7cc:	82 89       	ldd	r24, Z+18	; 0x12
     7ce:	93 89       	ldd	r25, Z+19	; 0x13
     7d0:	2e 81       	ldd	r18, Y+6	; 0x06
     7d2:	3f 81       	ldd	r19, Y+7	; 0x07
     7d4:	f9 01       	movw	r30, r18
     7d6:	24 8d       	ldd	r18, Z+28	; 0x1c
     7d8:	42 2f       	mov	r20, r18
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <_ZN14HardwareSerial5beginEl+0x3e4>
     7e2:	22 0f       	add	r18, r18
     7e4:	33 1f       	adc	r19, r19
     7e6:	4a 95       	dec	r20
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <_ZN14HardwareSerial5beginEl+0x3e0>
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     7ee:	28 85       	ldd	r18, Y+8	; 0x08
     7f0:	39 85       	ldd	r19, Y+9	; 0x09
     7f2:	4a 85       	ldd	r20, Y+10	; 0x0a
     7f4:	5b 85       	ldd	r21, Y+11	; 0x0b
     7f6:	80 e9       	ldi	r24, 0x90	; 144
     7f8:	90 ed       	ldi	r25, 0xD0	; 208
     7fa:	a3 e0       	ldi	r26, 0x03	; 3
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	bc 01       	movw	r22, r24
     800:	cd 01       	movw	r24, r26
     802:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     806:	da 01       	movw	r26, r20
     808:	c9 01       	movw	r24, r18
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	a1 09       	sbc	r26, r1
     80e:	b1 09       	sbc	r27, r1
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	1e c0       	rjmp	.+60     	; 0x85a <_ZN14HardwareSerial5beginEl+0x458>
  } else {
    *_ucsra = 0;
     81e:	8e 81       	ldd	r24, Y+6	; 0x06
     820:	9f 81       	ldd	r25, Y+7	; 0x07
     822:	fc 01       	movw	r30, r24
     824:	82 89       	ldd	r24, Z+18	; 0x12
     826:	93 89       	ldd	r25, Z+19	; 0x13
     828:	fc 01       	movw	r30, r24
     82a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     82c:	28 85       	ldd	r18, Y+8	; 0x08
     82e:	39 85       	ldd	r19, Y+9	; 0x09
     830:	4a 85       	ldd	r20, Y+10	; 0x0a
     832:	5b 85       	ldd	r21, Y+11	; 0x0b
     834:	88 e4       	ldi	r24, 0x48	; 72
     836:	98 ee       	ldi	r25, 0xE8	; 232
     838:	a1 e0       	ldi	r26, 0x01	; 1
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     844:	da 01       	movw	r26, r20
     846:	c9 01       	movw	r24, r18
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	a1 09       	sbc	r26, r1
     84c:	b1 09       	sbc	r27, r1
     84e:	b6 95       	lsr	r27
     850:	a7 95       	ror	r26
     852:	97 95       	ror	r25
     854:	87 95       	ror	r24
     856:	9a 83       	std	Y+2, r25	; 0x02
     858:	89 83       	std	Y+1, r24	; 0x01
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     85a:	8e 81       	ldd	r24, Y+6	; 0x06
     85c:	9f 81       	ldd	r25, Y+7	; 0x07
     85e:	fc 01       	movw	r30, r24
     860:	86 85       	ldd	r24, Z+14	; 0x0e
     862:	97 85       	ldd	r25, Z+15	; 0x0f
     864:	29 81       	ldd	r18, Y+1	; 0x01
     866:	3a 81       	ldd	r19, Y+2	; 0x02
     868:	23 2f       	mov	r18, r19
     86a:	33 27       	eor	r19, r19
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
  *_ubrrl = baud_setting;
     870:	8e 81       	ldd	r24, Y+6	; 0x06
     872:	9f 81       	ldd	r25, Y+7	; 0x07
     874:	fc 01       	movw	r30, r24
     876:	80 89       	ldd	r24, Z+16	; 0x10
     878:	91 89       	ldd	r25, Z+17	; 0x11
     87a:	29 81       	ldd	r18, Y+1	; 0x01
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     880:	8e 81       	ldd	r24, Y+6	; 0x06
     882:	9f 81       	ldd	r25, Y+7	; 0x07
     884:	fc 01       	movw	r30, r24
     886:	84 89       	ldd	r24, Z+20	; 0x14
     888:	95 89       	ldd	r25, Z+21	; 0x15
     88a:	2e 81       	ldd	r18, Y+6	; 0x06
     88c:	3f 81       	ldd	r19, Y+7	; 0x07
     88e:	f9 01       	movw	r30, r18
     890:	24 89       	ldd	r18, Z+20	; 0x14
     892:	35 89       	ldd	r19, Z+21	; 0x15
     894:	f9 01       	movw	r30, r18
     896:	20 81       	ld	r18, Z
     898:	62 2f       	mov	r22, r18
     89a:	2e 81       	ldd	r18, Y+6	; 0x06
     89c:	3f 81       	ldd	r19, Y+7	; 0x07
     89e:	f9 01       	movw	r30, r18
     8a0:	20 8d       	ldd	r18, Z+24	; 0x18
     8a2:	42 2f       	mov	r20, r18
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <_ZN14HardwareSerial5beginEl+0x4ae>
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	4a 95       	dec	r20
     8b2:	e2 f7       	brpl	.-8      	; 0x8ac <_ZN14HardwareSerial5beginEl+0x4aa>
     8b4:	26 2b       	or	r18, r22
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
     8ba:	8e 81       	ldd	r24, Y+6	; 0x06
     8bc:	9f 81       	ldd	r25, Y+7	; 0x07
     8be:	fc 01       	movw	r30, r24
     8c0:	84 89       	ldd	r24, Z+20	; 0x14
     8c2:	95 89       	ldd	r25, Z+21	; 0x15
     8c4:	2e 81       	ldd	r18, Y+6	; 0x06
     8c6:	3f 81       	ldd	r19, Y+7	; 0x07
     8c8:	f9 01       	movw	r30, r18
     8ca:	24 89       	ldd	r18, Z+20	; 0x14
     8cc:	35 89       	ldd	r19, Z+21	; 0x15
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	62 2f       	mov	r22, r18
     8d4:	2e 81       	ldd	r18, Y+6	; 0x06
     8d6:	3f 81       	ldd	r19, Y+7	; 0x07
     8d8:	f9 01       	movw	r30, r18
     8da:	21 8d       	ldd	r18, Z+25	; 0x19
     8dc:	42 2f       	mov	r20, r18
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <_ZN14HardwareSerial5beginEl+0x4e8>
     8e6:	22 0f       	add	r18, r18
     8e8:	33 1f       	adc	r19, r19
     8ea:	4a 95       	dec	r20
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <_ZN14HardwareSerial5beginEl+0x4e4>
     8ee:	26 2b       	or	r18, r22
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
     8f4:	8e 81       	ldd	r24, Y+6	; 0x06
     8f6:	9f 81       	ldd	r25, Y+7	; 0x07
     8f8:	fc 01       	movw	r30, r24
     8fa:	84 89       	ldd	r24, Z+20	; 0x14
     8fc:	95 89       	ldd	r25, Z+21	; 0x15
     8fe:	2e 81       	ldd	r18, Y+6	; 0x06
     900:	3f 81       	ldd	r19, Y+7	; 0x07
     902:	f9 01       	movw	r30, r18
     904:	24 89       	ldd	r18, Z+20	; 0x14
     906:	35 89       	ldd	r19, Z+21	; 0x15
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	62 2f       	mov	r22, r18
     90e:	2e 81       	ldd	r18, Y+6	; 0x06
     910:	3f 81       	ldd	r19, Y+7	; 0x07
     912:	f9 01       	movw	r30, r18
     914:	22 8d       	ldd	r18, Z+26	; 0x1a
     916:	42 2f       	mov	r20, r18
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	21 e0       	ldi	r18, 0x01	; 1
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	04 2e       	mov	r0, r20
     920:	02 c0       	rjmp	.+4      	; 0x926 <_ZN14HardwareSerial5beginEl+0x524>
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	0a 94       	dec	r0
     928:	e2 f7       	brpl	.-8      	; 0x922 <_ZN14HardwareSerial5beginEl+0x520>
     92a:	26 2b       	or	r18, r22
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
}
     930:	c5 5a       	subi	r28, 0xA5	; 165
     932:	df 4f       	sbci	r29, 0xFF	; 255
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <_ZN14HardwareSerial9availableEv+0x6>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	9a 83       	std	Y+2, r25	; 0x02
     950:	89 83       	std	Y+1, r24	; 0x01
  return (int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	fc 01       	movw	r30, r24
     958:	84 85       	ldd	r24, Z+12	; 0x0c
     95a:	95 85       	ldd	r25, Z+13	; 0x0d
     95c:	80 58       	subi	r24, 0x80	; 128
     95e:	9f 4f       	sbci	r25, 0xFF	; 255
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	9c 01       	movw	r18, r24
     968:	20 58       	subi	r18, 0x80	; 128
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	9a 81       	ldd	r25, Y+2	; 0x02
     970:	fc 01       	movw	r30, r24
     972:	84 85       	ldd	r24, Z+12	; 0x0c
     974:	95 85       	ldd	r25, Z+13	; 0x0d
     976:	8e 57       	subi	r24, 0x7E	; 126
     978:	9f 4f       	sbci	r25, 0xFF	; 255
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	a9 01       	movw	r20, r18
     982:	48 1b       	sub	r20, r24
     984:	59 0b       	sbc	r21, r25
     986:	ca 01       	movw	r24, r20
     988:	8f 77       	andi	r24, 0x7F	; 127
     98a:	90 78       	andi	r25, 0x80	; 128
     98c:	99 23       	and	r25, r25
     98e:	24 f4       	brge	.+8      	; 0x998 <_ZN14HardwareSerial9availableEv+0x54>
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	80 68       	ori	r24, 0x80	; 128
     994:	9f 6f       	ori	r25, 0xFF	; 255
     996:	01 96       	adiw	r24, 0x01	; 1
}
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <_ZN14HardwareSerial4readEv+0x6>
     9a8:	1f 92       	push	r1
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	9b 83       	std	Y+3, r25	; 0x03
     9b0:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	9b 81       	ldd	r25, Y+3	; 0x03
     9b6:	fc 01       	movw	r30, r24
     9b8:	84 85       	ldd	r24, Z+12	; 0x0c
     9ba:	95 85       	ldd	r25, Z+13	; 0x0d
     9bc:	80 58       	subi	r24, 0x80	; 128
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 81       	ld	r18, Z
     9c4:	31 81       	ldd	r19, Z+1	; 0x01
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ca:	fc 01       	movw	r30, r24
     9cc:	84 85       	ldd	r24, Z+12	; 0x0c
     9ce:	95 85       	ldd	r25, Z+13	; 0x0d
     9d0:	8e 57       	subi	r24, 0x7E	; 126
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	fc 01       	movw	r30, r24
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	28 17       	cp	r18, r24
     9dc:	39 07       	cpc	r19, r25
     9de:	19 f4       	brne	.+6      	; 0x9e6 <_ZN14HardwareSerial4readEv+0x44>
    return -1;
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	9f ef       	ldi	r25, 0xFF	; 255
     9e4:	36 c0       	rjmp	.+108    	; 0xa52 <_ZN14HardwareSerial4readEv+0xb0>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     9e6:	8a 81       	ldd	r24, Y+2	; 0x02
     9e8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ea:	fc 01       	movw	r30, r24
     9ec:	24 85       	ldd	r18, Z+12	; 0x0c
     9ee:	35 85       	ldd	r19, Z+13	; 0x0d
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	9b 81       	ldd	r25, Y+3	; 0x03
     9f4:	fc 01       	movw	r30, r24
     9f6:	84 85       	ldd	r24, Z+12	; 0x0c
     9f8:	95 85       	ldd	r25, Z+13	; 0x0d
     9fa:	8e 57       	subi	r24, 0x7E	; 126
     9fc:	9f 4f       	sbci	r25, 0xFF	; 255
     9fe:	fc 01       	movw	r30, r24
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	82 0f       	add	r24, r18
     a06:	93 1f       	adc	r25, r19
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	9b 81       	ldd	r25, Y+3	; 0x03
     a12:	fc 01       	movw	r30, r24
     a14:	44 85       	ldd	r20, Z+12	; 0x0c
     a16:	55 85       	ldd	r21, Z+13	; 0x0d
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	9b 81       	ldd	r25, Y+3	; 0x03
     a1c:	fc 01       	movw	r30, r24
     a1e:	84 85       	ldd	r24, Z+12	; 0x0c
     a20:	95 85       	ldd	r25, Z+13	; 0x0d
     a22:	8e 57       	subi	r24, 0x7E	; 126
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	fc 01       	movw	r30, r24
     a28:	80 81       	ld	r24, Z
     a2a:	91 81       	ldd	r25, Z+1	; 0x01
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	8f 77       	andi	r24, 0x7F	; 127
     a30:	90 78       	andi	r25, 0x80	; 128
     a32:	99 23       	and	r25, r25
     a34:	24 f4       	brge	.+8      	; 0xa3e <_ZN14HardwareSerial4readEv+0x9c>
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	80 68       	ori	r24, 0x80	; 128
     a3a:	9f 6f       	ori	r25, 0xFF	; 255
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	9c 01       	movw	r18, r24
     a40:	ca 01       	movw	r24, r20
     a42:	8e 57       	subi	r24, 0x7E	; 126
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	fc 01       	movw	r30, r24
     a48:	31 83       	std	Z+1, r19	; 0x01
     a4a:	20 83       	st	Z, r18
    return c;
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	88 2f       	mov	r24, r24
     a50:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	00 d0       	rcall	.+0      	; 0xa64 <_ZN14HardwareSerial5flushEv+0x6>
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	9a 83       	std	Y+2, r25	; 0x02
     a6a:	89 83       	std	Y+1, r24	; 0x01
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	fc 01       	movw	r30, r24
     a72:	84 85       	ldd	r24, Z+12	; 0x0c
     a74:	95 85       	ldd	r25, Z+13	; 0x0d
     a76:	29 81       	ldd	r18, Y+1	; 0x01
     a78:	3a 81       	ldd	r19, Y+2	; 0x02
     a7a:	f9 01       	movw	r30, r18
     a7c:	24 85       	ldd	r18, Z+12	; 0x0c
     a7e:	35 85       	ldd	r19, Z+13	; 0x0d
     a80:	2e 57       	subi	r18, 0x7E	; 126
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	31 81       	ldd	r19, Z+1	; 0x01
     a8a:	80 58       	subi	r24, 0x80	; 128
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	fc 01       	movw	r30, r24
     a90:	31 83       	std	Z+1, r19	; 0x01
     a92:	20 83       	st	Z, r18
}
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <_ZN14HardwareSerial5writeEh+0x6>
     aa4:	1f 92       	push	r1
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	9a 83       	std	Y+2, r25	; 0x02
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	6b 83       	std	Y+3, r22	; 0x03
  while (!((*_ucsra) & (1 << _udre)))
     ab0:	00 00       	nop
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	fc 01       	movw	r30, r24
     ab8:	82 89       	ldd	r24, Z+18	; 0x12
     aba:	93 89       	ldd	r25, Z+19	; 0x13
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	29 81       	ldd	r18, Y+1	; 0x01
     ac6:	3a 81       	ldd	r19, Y+2	; 0x02
     ac8:	f9 01       	movw	r30, r18
     aca:	23 8d       	ldd	r18, Z+27	; 0x1b
     acc:	22 2f       	mov	r18, r18
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <_ZN14HardwareSerial5writeEh+0x38>
     ad2:	95 95       	asr	r25
     ad4:	87 95       	ror	r24
     ad6:	2a 95       	dec	r18
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <_ZN14HardwareSerial5writeEh+0x34>
     ada:	81 70       	andi	r24, 0x01	; 1
     adc:	99 27       	eor	r25, r25
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	09 f0       	breq	.+2      	; 0xae6 <_ZN14HardwareSerial5writeEh+0x48>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	22 23       	and	r18, r18
     ae8:	21 f7       	brne	.-56     	; 0xab2 <_ZN14HardwareSerial5writeEh+0x14>
    ;

  *_udr = c;
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	fc 01       	movw	r30, r24
     af0:	86 89       	ldd	r24, Z+22	; 0x16
     af2:	97 89       	ldd	r25, Z+23	; 0x17
     af4:	2b 81       	ldd	r18, Y+3	; 0x03
     af6:	fc 01       	movw	r30, r24
     af8:	20 83       	st	Z, r18

  return 1;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
}
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////


HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
HardwareSerial Serial1(&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
     b0a:	8f 92       	push	r8
     b0c:	af 92       	push	r10
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <_Z41__static_initialization_and_destruction_0ii+0x16>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <_Z41__static_initialization_and_destruction_0ii+0x18>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	7c 83       	std	Y+4, r23	; 0x04
     b2c:	6b 83       	std	Y+3, r22	; 0x03
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	91 05       	cpc	r25, r1
     b36:	09 f0       	breq	.+2      	; 0xb3a <_Z41__static_initialization_and_destruction_0ii+0x30>
     b38:	51 c0       	rjmp	.+162    	; 0xbdc <_Z41__static_initialization_and_destruction_0ii+0xd2>
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	8f 3f       	cpi	r24, 0xFF	; 255
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	92 07       	cpc	r25, r18
     b44:	09 f0       	breq	.+2      	; 0xb48 <_Z41__static_initialization_and_destruction_0ii+0x3e>
     b46:	4a c0       	rjmp	.+148    	; 0xbdc <_Z41__static_initialization_and_destruction_0ii+0xd2>
}

// Preinstantiate Objects //////////////////////////////////////////////////////


HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	8f 93       	push	r24
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	8f 93       	push	r24
     b50:	87 e0       	ldi	r24, 0x07	; 7
     b52:	8f 93       	push	r24
     b54:	0f 2e       	mov	r0, r31
     b56:	f3 e0       	ldi	r31, 0x03	; 3
     b58:	8f 2e       	mov	r8, r31
     b5a:	f0 2d       	mov	r31, r0
     b5c:	68 94       	set
     b5e:	aa 24       	eor	r10, r10
     b60:	a2 f8       	bld	r10, 2
     b62:	0f 2e       	mov	r0, r31
     b64:	f6 ec       	ldi	r31, 0xC6	; 198
     b66:	cf 2e       	mov	r12, r31
     b68:	d1 2c       	mov	r13, r1
     b6a:	f0 2d       	mov	r31, r0
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f1 ec       	ldi	r31, 0xC1	; 193
     b70:	ef 2e       	mov	r14, r31
     b72:	f1 2c       	mov	r15, r1
     b74:	f0 2d       	mov	r31, r0
     b76:	00 ec       	ldi	r16, 0xC0	; 192
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	24 ec       	ldi	r18, 0xC4	; 196
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	45 ec       	ldi	r20, 0xC5	; 197
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	66 e9       	ldi	r22, 0x96	; 150
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	8e e9       	ldi	r24, 0x9E	; 158
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	bb db       	rcall	.-2186   	; 0x302 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	81 e0       	ldi	r24, 0x01	; 1
HardwareSerial Serial1(&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
     b94:	8f 93       	push	r24
     b96:	85 e0       	ldi	r24, 0x05	; 5
     b98:	8f 93       	push	r24
     b9a:	87 e0       	ldi	r24, 0x07	; 7
     b9c:	8f 93       	push	r24
     b9e:	0f 2e       	mov	r0, r31
     ba0:	f3 e0       	ldi	r31, 0x03	; 3
     ba2:	8f 2e       	mov	r8, r31
     ba4:	f0 2d       	mov	r31, r0
     ba6:	68 94       	set
     ba8:	aa 24       	eor	r10, r10
     baa:	a2 f8       	bld	r10, 2
     bac:	0f 2e       	mov	r0, r31
     bae:	fe ec       	ldi	r31, 0xCE	; 206
     bb0:	cf 2e       	mov	r12, r31
     bb2:	d1 2c       	mov	r13, r1
     bb4:	f0 2d       	mov	r31, r0
     bb6:	0f 2e       	mov	r0, r31
     bb8:	f9 ec       	ldi	r31, 0xC9	; 201
     bba:	ef 2e       	mov	r14, r31
     bbc:	f1 2c       	mov	r15, r1
     bbe:	f0 2d       	mov	r31, r0
     bc0:	08 ec       	ldi	r16, 0xC8	; 200
     bc2:	10 e0       	ldi	r17, 0x00	; 0
     bc4:	2c ec       	ldi	r18, 0xCC	; 204
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4d ec       	ldi	r20, 0xCD	; 205
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	6a e1       	ldi	r22, 0x1A	; 26
     bce:	72 e0       	ldi	r23, 0x02	; 2
     bd0:	8b eb       	ldi	r24, 0xBB	; 187
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	96 db       	rcall	.-2260   	; 0x302 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	af 90       	pop	r10
     bf6:	8f 90       	pop	r8
     bf8:	08 95       	ret

00000bfa <_GLOBAL__sub_I_rx_buffer>:
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	6f ef       	ldi	r22, 0xFF	; 255
     c04:	7f ef       	ldi	r23, 0xFF	; 255
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	7f df       	rcall	.-258    	; 0xb0a <_Z41__static_initialization_and_destruction_0ii>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <_ZN5Print5writeEPKc+0xa>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <_ZN5Print5writeEPKc+0xc>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	7c 83       	std	Y+4, r23	; 0x04
     c28:	6b 83       	std	Y+3, r22	; 0x03
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	02 96       	adiw	r24, 0x02	; 2
     c36:	fc 01       	movw	r30, r24
     c38:	00 81       	ld	r16, Z
     c3a:	11 81       	ldd	r17, Z+1	; 0x01
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	0e 94 76 17 	call	0x2eec	; 0x2eec <strlen>
     c44:	ac 01       	movw	r20, r24
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	b9 01       	movw	r22, r18
     c50:	f8 01       	movw	r30, r16
     c52:	09 95       	icall
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	28 97       	sbiw	r28, 0x08	; 8
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	9c 83       	std	Y+4, r25	; 0x04
     c7c:	8b 83       	std	Y+3, r24	; 0x03
     c7e:	7e 83       	std	Y+6, r23	; 0x06
     c80:	6d 83       	std	Y+5, r22	; 0x05
     c82:	58 87       	std	Y+8, r21	; 0x08
     c84:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = 0;
     c86:	1a 82       	std	Y+2, r1	; 0x02
     c88:	19 82       	std	Y+1, r1	; 0x01
  while (size--) {
     c8a:	1c c0       	rjmp	.+56     	; 0xcc4 <_ZN5Print5writeEPKhj+0x5e>
    n += write(*buffer++);
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	fc 01       	movw	r30, r24
     c98:	20 81       	ld	r18, Z
     c9a:	31 81       	ldd	r19, Z+1	; 0x01
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	ac 01       	movw	r20, r24
     ca2:	4f 5f       	subi	r20, 0xFF	; 255
     ca4:	5f 4f       	sbci	r21, 0xFF	; 255
     ca6:	5e 83       	std	Y+6, r21	; 0x06
     ca8:	4d 83       	std	Y+5, r20	; 0x05
     caa:	fc 01       	movw	r30, r24
     cac:	40 81       	ld	r20, Z
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	64 2f       	mov	r22, r20
     cb4:	f9 01       	movw	r30, r18
     cb6:	09 95       	icall
     cb8:	29 81       	ldd	r18, Y+1	; 0x01
     cba:	3a 81       	ldd	r19, Y+2	; 0x02
     cbc:	82 0f       	add	r24, r18
     cbe:	93 1f       	adc	r25, r19
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     cc4:	8f 81       	ldd	r24, Y+7	; 0x07
     cc6:	98 85       	ldd	r25, Y+8	; 0x08
     cc8:	9c 01       	movw	r18, r24
     cca:	21 50       	subi	r18, 0x01	; 1
     ccc:	31 09       	sbc	r19, r1
     cce:	38 87       	std	Y+8, r19	; 0x08
     cd0:	2f 83       	std	Y+7, r18	; 0x07
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	09 f4       	brne	.+2      	; 0xcda <_ZN5Print5writeEPKhj+0x74>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	22 23       	and	r18, r18
     cdc:	b9 f6       	brne	.-82     	; 0xc8c <_ZN5Print5writeEPKhj+0x26>
    n += write(*buffer++);
  }
  return n;
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ce2:	28 96       	adiw	r28, 0x08	; 8
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <_ZN5Print5printEPKc>:
  }
  return n;
}

size_t Print::print(const char str[])
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <_ZN5Print5printEPKc+0x6>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <_ZN5Print5printEPKc+0x8>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9a 83       	std	Y+2, r25	; 0x02
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	7c 83       	std	Y+4, r23	; 0x04
     d06:	6b 83       	std	Y+3, r22	; 0x03
  return write(str);
     d08:	2b 81       	ldd	r18, Y+3	; 0x03
     d0a:	3c 81       	ldd	r19, Y+4	; 0x04
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	b9 01       	movw	r22, r18
     d12:	7f df       	rcall	.-258    	; 0xc12 <_ZN5Print5writeEPKc>
     d14:	0f 90       	pop	r0
}
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	00 d0       	rcall	.+0      	; 0xd28 <_ZN5Print5printEc+0x6>
     d28:	1f 92       	push	r1
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	6b 83       	std	Y+3, r22	; 0x03
  return write(c);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	fc 01       	movw	r30, r24
     d40:	20 81       	ld	r18, Z
     d42:	31 81       	ldd	r19, Z+1	; 0x01
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	6b 81       	ldd	r22, Y+3	; 0x03
     d4a:	f9 01       	movw	r30, r18
     d4c:	09 95       	icall
}
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	28 97       	sbiw	r28, 0x08	; 8
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	4b 83       	std	Y+3, r20	; 0x03
     d74:	5c 83       	std	Y+4, r21	; 0x04
     d76:	6d 83       	std	Y+5, r22	; 0x05
     d78:	7e 83       	std	Y+6, r23	; 0x06
     d7a:	38 87       	std	Y+8, r19	; 0x08
     d7c:	2f 83       	std	Y+7, r18	; 0x07
  if (base == 0) return write(n);
     d7e:	8f 81       	ldd	r24, Y+7	; 0x07
     d80:	98 85       	ldd	r25, Y+8	; 0x08
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	79 f4       	brne	.+30     	; 0xda4 <_ZN5Print5printEmi+0x4a>
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	fc 01       	movw	r30, r24
     d8c:	80 81       	ld	r24, Z
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
     d90:	fc 01       	movw	r30, r24
     d92:	20 81       	ld	r18, Z
     d94:	31 81       	ldd	r19, Z+1	; 0x01
     d96:	4b 81       	ldd	r20, Y+3	; 0x03
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	64 2f       	mov	r22, r20
     d9e:	f9 01       	movw	r30, r18
     da0:	09 95       	icall
     da2:	0b c0       	rjmp	.+22     	; 0xdba <_ZN5Print5printEmi+0x60>
  else return printNumber(n, base);
     da4:	2f 81       	ldd	r18, Y+7	; 0x07
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	ad 81       	ldd	r26, Y+5	; 0x05
     dac:	be 81       	ldd	r27, Y+6	; 0x06
     dae:	e9 81       	ldd	r30, Y+1	; 0x01
     db0:	fa 81       	ldd	r31, Y+2	; 0x02
     db2:	ac 01       	movw	r20, r24
     db4:	bd 01       	movw	r22, r26
     db6:	cf 01       	movw	r24, r30
     db8:	85 d0       	rcall	.+266    	; 0xec4 <_ZN5Print11printNumberEmh>
     dba:	28 96       	adiw	r28, 0x08	; 8
}
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <_ZN5Print7printlnEv+0x6>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <_ZN5Print7printlnEv+0x8>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
  size_t n = print('\r');
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	6d e0       	ldi	r22, 0x0D	; 13
     de2:	9f df       	rcall	.-194    	; 0xd22 <_ZN5Print5printEc>
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
  n += print('\n');
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	6a e0       	ldi	r22, 0x0A	; 10
     dee:	99 df       	rcall	.-206    	; 0xd22 <_ZN5Print5printEc>
     df0:	29 81       	ldd	r18, Y+1	; 0x01
     df2:	3a 81       	ldd	r19, Y+2	; 0x02
     df4:	82 0f       	add	r24, r18
     df6:	93 1f       	adc	r25, r19
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
  return n;
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	00 d0       	rcall	.+0      	; 0xe14 <_ZN5Print7printlnEPKc+0x6>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <_ZN5Print7printlnEPKc+0x8>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <_ZN5Print7printlnEPKc+0xa>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	8b 83       	std	Y+3, r24	; 0x03
     e20:	7e 83       	std	Y+6, r23	; 0x06
     e22:	6d 83       	std	Y+5, r22	; 0x05
  size_t n = print(c);
     e24:	2d 81       	ldd	r18, Y+5	; 0x05
     e26:	3e 81       	ldd	r19, Y+6	; 0x06
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	b9 01       	movw	r22, r18
     e2e:	62 df       	rcall	.-316    	; 0xcf4 <_ZN5Print5printEPKc>
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
  n += println();
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	c9 df       	rcall	.-110    	; 0xdcc <_ZN5Print7printlnEv>
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	82 0f       	add	r24, r18
     e40:	93 1f       	adc	r25, r19
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
  return n;
     e4a:	26 96       	adiw	r28, 0x06	; 6
     e4c:	0f b6       	in	r0, 0x3f	; 63
}
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	2a 97       	sbiw	r28, 0x0a	; 10
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03
     e74:	4d 83       	std	Y+5, r20	; 0x05
     e76:	5e 83       	std	Y+6, r21	; 0x06
     e78:	6f 83       	std	Y+7, r22	; 0x07
     e7a:	78 87       	std	Y+8, r23	; 0x08
     e7c:	3a 87       	std	Y+10, r19	; 0x0a
     e7e:	29 87       	std	Y+9, r18	; 0x09
  size_t n = print(num, base);
     e80:	29 85       	ldd	r18, Y+9	; 0x09
     e82:	3a 85       	ldd	r19, Y+10	; 0x0a
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	af 81       	ldd	r26, Y+7	; 0x07
     e8a:	b8 85       	ldd	r27, Y+8	; 0x08
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	ac 01       	movw	r20, r24
     e92:	bd 01       	movw	r22, r26
     e94:	cf 01       	movw	r24, r30
     e96:	61 df       	rcall	.-318    	; 0xd5a <_ZN5Print5printEmi>
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
  n += println();
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	95 df       	rcall	.-214    	; 0xdcc <_ZN5Print7printlnEv>
     ea2:	29 81       	ldd	r18, Y+1	; 0x01
     ea4:	3a 81       	ldd	r19, Y+2	; 0x02
     ea6:	82 0f       	add	r24, r18
     ea8:	93 1f       	adc	r25, r19
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
  return n;
     eb2:	2a 96       	adiw	r28, 0x0a	; 10
     eb4:	0f b6       	in	r0, 0x3f	; 63
}
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	e3 97       	sbiw	r28, 0x33	; 51
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	9a a7       	std	Y+42, r25	; 0x2a
     eda:	89 a7       	std	Y+41, r24	; 0x29
     edc:	4b a7       	std	Y+43, r20	; 0x2b
     ede:	5c a7       	std	Y+44, r21	; 0x2c
     ee0:	6d a7       	std	Y+45, r22	; 0x2d
     ee2:	7e a7       	std	Y+46, r23	; 0x2e
     ee4:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9e 01       	movw	r18, r28
     eec:	28 5f       	subi	r18, 0xF8	; 248
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	fc 01       	movw	r30, r24
     efe:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     f00:	8f a5       	ldd	r24, Y+47	; 0x2f
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	10 f4       	brcc	.+4      	; 0xf0a <_ZN5Print11printNumberEmh+0x46>
     f06:	8a e0       	ldi	r24, 0x0A	; 10
     f08:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
     f0a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f0c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f0e:	ad a5       	ldd	r26, Y+45	; 0x2d
     f10:	be a5       	ldd	r27, Y+46	; 0x2e
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	ad 83       	std	Y+5, r26	; 0x05
     f18:	be 83       	std	Y+6, r27	; 0x06
    n /= base;
     f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	8b a5       	ldd	r24, Y+43	; 0x2b
     f26:	9c a5       	ldd	r25, Y+44	; 0x2c
     f28:	ad a5       	ldd	r26, Y+45	; 0x2d
     f2a:	be a5       	ldd	r27, Y+46	; 0x2e
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodsi4>
     f34:	da 01       	movw	r26, r20
     f36:	c9 01       	movw	r24, r18
     f38:	8b a7       	std	Y+43, r24	; 0x2b
     f3a:	9c a7       	std	Y+44, r25	; 0x2c
     f3c:	ad a7       	std	Y+45, r26	; 0x2d
     f3e:	be a7       	std	Y+46, r27	; 0x2e
    char c = m - base * n;
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	2b a5       	ldd	r18, Y+43	; 0x2b
     f44:	8f a5       	ldd	r24, Y+47	; 0x2f
     f46:	28 9f       	mul	r18, r24
     f48:	80 2d       	mov	r24, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	f9 2f       	mov	r31, r25
     f4e:	f8 1b       	sub	r31, r24
     f50:	8f 2f       	mov	r24, r31
     f52:	8f 83       	std	Y+7, r24	; 0x07
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	8f 81       	ldd	r24, Y+7	; 0x07
     f60:	8a 30       	cpi	r24, 0x0A	; 10
     f62:	20 f4       	brcc	.+8      	; 0xf6c <_ZN5Print11printNumberEmh+0xa8>
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	20 e3       	ldi	r18, 0x30	; 48
     f68:	28 0f       	add	r18, r24
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <_ZN5Print11printNumberEmh+0xae>
     f6c:	8f 81       	ldd	r24, Y+7	; 0x07
     f6e:	27 e3       	ldi	r18, 0x37	; 55
     f70:	28 0f       	add	r18, r24
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	fc 01       	movw	r30, r24
     f78:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     f7a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f7c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f7e:	ad a5       	ldd	r26, Y+45	; 0x2d
     f80:	be a5       	ldd	r27, Y+46	; 0x2e
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	09 f0       	breq	.+2      	; 0xf8c <_ZN5Print11printNumberEmh+0xc8>
     f8a:	bf cf       	rjmp	.-130    	; 0xf0a <_ZN5Print11printNumberEmh+0x46>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     f8c:	29 81       	ldd	r18, Y+1	; 0x01
     f8e:	3a 81       	ldd	r19, Y+2	; 0x02
     f90:	89 a5       	ldd	r24, Y+41	; 0x29
     f92:	9a a5       	ldd	r25, Y+42	; 0x2a
     f94:	b9 01       	movw	r22, r18
     f96:	3d de       	rcall	.-902    	; 0xc12 <_ZN5Print5writeEPKc>
     f98:	e3 96       	adiw	r28, 0x33	; 51
}
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <__vector_1>:
  twiIntFunc = userFunc;
}
*/


SIGNAL(INT0_vect) {
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	00 90 5f 00 	lds	r0, 0x005F
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	00 90 5b 00 	lds	r0, 0x005B
     fba:	0f 92       	push	r0
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
     fdc:	80 91 d8 02 	lds	r24, 0x02D8
     fe0:	90 91 d9 02 	lds	r25, 0x02D9
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	31 f0       	breq	.+12     	; 0xff4 <__vector_1+0x4a>
    intFunc[EXTERNAL_INT_0]();
     fe8:	80 91 d8 02 	lds	r24, 0x02D8
     fec:	90 91 d9 02 	lds	r25, 0x02D9
     ff0:	fc 01       	movw	r30, r24
     ff2:	09 95       	icall
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	ff 91       	pop	r31
     ffa:	ef 91       	pop	r30
     ffc:	bf 91       	pop	r27
     ffe:	af 91       	pop	r26
    1000:	9f 91       	pop	r25
    1002:	8f 91       	pop	r24
    1004:	7f 91       	pop	r23
    1006:	6f 91       	pop	r22
    1008:	5f 91       	pop	r21
    100a:	4f 91       	pop	r20
    100c:	3f 91       	pop	r19
    100e:	2f 91       	pop	r18
    1010:	0f 90       	pop	r0
    1012:	00 92 5b 00 	sts	0x005B, r0
    1016:	0f 90       	pop	r0
    1018:	00 92 5f 00 	sts	0x005F, r0
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_2>:

SIGNAL(INT1_vect) {
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	00 90 5f 00 	lds	r0, 0x005F
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	00 90 5b 00 	lds	r0, 0x005B
    1032:	0f 92       	push	r0
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
    1054:	80 91 da 02 	lds	r24, 0x02DA
    1058:	90 91 db 02 	lds	r25, 0x02DB
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	31 f0       	breq	.+12     	; 0x106c <__vector_2+0x4a>
    intFunc[EXTERNAL_INT_1]();
    1060:	80 91 da 02 	lds	r24, 0x02DA
    1064:	90 91 db 02 	lds	r25, 0x02DB
    1068:	fc 01       	movw	r30, r24
    106a:	09 95       	icall
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	00 92 5b 00 	sts	0x005B, r0
    108e:	0f 90       	pop	r0
    1090:	00 92 5f 00 	sts	0x005F, r0
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__vector_3>:

SIGNAL(INT2_vect) {
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	00 90 5f 00 	lds	r0, 0x005F
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	00 90 5b 00 	lds	r0, 0x005B
    10aa:	0f 92       	push	r0
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_2])
    10cc:	80 91 dc 02 	lds	r24, 0x02DC
    10d0:	90 91 dd 02 	lds	r25, 0x02DD
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	31 f0       	breq	.+12     	; 0x10e4 <__vector_3+0x4a>
    intFunc[EXTERNAL_INT_2]();
    10d8:	80 91 dc 02 	lds	r24, 0x02DC
    10dc:	90 91 dd 02 	lds	r25, 0x02DD
    10e0:	fc 01       	movw	r30, r24
    10e2:	09 95       	icall
}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	00 92 5b 00 	sts	0x005B, r0
    1106:	0f 90       	pop	r0
    1108:	00 92 5f 00 	sts	0x005F, r0
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <__vector_4>:

SIGNAL(INT3_vect) {
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	00 90 5f 00 	lds	r0, 0x005F
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	00 90 5b 00 	lds	r0, 0x005B
    1122:	0f 92       	push	r0
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_3])
    1144:	80 91 de 02 	lds	r24, 0x02DE
    1148:	90 91 df 02 	lds	r25, 0x02DF
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	31 f0       	breq	.+12     	; 0x115c <__vector_4+0x4a>
    intFunc[EXTERNAL_INT_3]();
    1150:	80 91 de 02 	lds	r24, 0x02DE
    1154:	90 91 df 02 	lds	r25, 0x02DF
    1158:	fc 01       	movw	r30, r24
    115a:	09 95       	icall
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	00 92 5b 00 	sts	0x005B, r0
    117e:	0f 90       	pop	r0
    1180:	00 92 5f 00 	sts	0x005F, r0
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_5>:

SIGNAL(INT4_vect) {
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	00 90 5f 00 	lds	r0, 0x005F
    1192:	0f 92       	push	r0
    1194:	11 24       	eor	r1, r1
    1196:	00 90 5b 00 	lds	r0, 0x005B
    119a:	0f 92       	push	r0
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_4])
    11bc:	80 91 e0 02 	lds	r24, 0x02E0
    11c0:	90 91 e1 02 	lds	r25, 0x02E1
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <__vector_5+0x4a>
    intFunc[EXTERNAL_INT_4]();
    11c8:	80 91 e0 02 	lds	r24, 0x02E0
    11cc:	90 91 e1 02 	lds	r25, 0x02E1
    11d0:	fc 01       	movw	r30, r24
    11d2:	09 95       	icall
}
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	0f 90       	pop	r0
    11f2:	00 92 5b 00 	sts	0x005B, r0
    11f6:	0f 90       	pop	r0
    11f8:	00 92 5f 00 	sts	0x005F, r0
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_6>:

SIGNAL(INT5_vect) {
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	00 90 5f 00 	lds	r0, 0x005F
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	00 90 5b 00 	lds	r0, 0x005B
    1212:	0f 92       	push	r0
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_5])
    1234:	80 91 e2 02 	lds	r24, 0x02E2
    1238:	90 91 e3 02 	lds	r25, 0x02E3
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	31 f0       	breq	.+12     	; 0x124c <__vector_6+0x4a>
    intFunc[EXTERNAL_INT_5]();
    1240:	80 91 e2 02 	lds	r24, 0x02E2
    1244:	90 91 e3 02 	lds	r25, 0x02E3
    1248:	fc 01       	movw	r30, r24
    124a:	09 95       	icall
}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	00 92 5b 00 	sts	0x005B, r0
    126e:	0f 90       	pop	r0
    1270:	00 92 5f 00 	sts	0x005F, r0
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti

0000127a <__vector_7>:

SIGNAL(INT6_vect) {
    127a:	1f 92       	push	r1
    127c:	0f 92       	push	r0
    127e:	00 90 5f 00 	lds	r0, 0x005F
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	00 90 5b 00 	lds	r0, 0x005B
    128a:	0f 92       	push	r0
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_6])
    12ac:	80 91 e4 02 	lds	r24, 0x02E4
    12b0:	90 91 e5 02 	lds	r25, 0x02E5
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	31 f0       	breq	.+12     	; 0x12c4 <__vector_7+0x4a>
    intFunc[EXTERNAL_INT_6]();
    12b8:	80 91 e4 02 	lds	r24, 0x02E4
    12bc:	90 91 e5 02 	lds	r25, 0x02E5
    12c0:	fc 01       	movw	r30, r24
    12c2:	09 95       	icall
}
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	ff 91       	pop	r31
    12ca:	ef 91       	pop	r30
    12cc:	bf 91       	pop	r27
    12ce:	af 91       	pop	r26
    12d0:	9f 91       	pop	r25
    12d2:	8f 91       	pop	r24
    12d4:	7f 91       	pop	r23
    12d6:	6f 91       	pop	r22
    12d8:	5f 91       	pop	r21
    12da:	4f 91       	pop	r20
    12dc:	3f 91       	pop	r19
    12de:	2f 91       	pop	r18
    12e0:	0f 90       	pop	r0
    12e2:	00 92 5b 00 	sts	0x005B, r0
    12e6:	0f 90       	pop	r0
    12e8:	00 92 5f 00 	sts	0x005F, r0
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <__vector_8>:

SIGNAL(INT7_vect) {
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	00 90 5f 00 	lds	r0, 0x005F
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	00 90 5b 00 	lds	r0, 0x005B
    1302:	0f 92       	push	r0
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_7])
    1324:	80 91 e6 02 	lds	r24, 0x02E6
    1328:	90 91 e7 02 	lds	r25, 0x02E7
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	31 f0       	breq	.+12     	; 0x133c <__vector_8+0x4a>
    intFunc[EXTERNAL_INT_7]();
    1330:	80 91 e6 02 	lds	r24, 0x02E6
    1334:	90 91 e7 02 	lds	r25, 0x02E7
    1338:	fc 01       	movw	r30, r24
    133a:	09 95       	icall
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	00 92 5b 00 	sts	0x005B, r0
    135e:	0f 90       	pop	r0
    1360:	00 92 5f 00 	sts	0x005F, r0
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <__vector_17>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	00 90 5f 00 	lds	r0, 0x005F
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	25 97       	sbiw	r28, 0x05	; 5
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	cd bf       	out	0x3d, r28	; 61
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    139a:	80 91 ec 02 	lds	r24, 0x02EC
    139e:	90 91 ed 02 	lds	r25, 0x02ED
    13a2:	a0 91 ee 02 	lds	r26, 0x02EE
    13a6:	b0 91 ef 02 	lds	r27, 0x02EF
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	ab 83       	std	Y+3, r26	; 0x03
    13b0:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char f = timer0_fract;
    13b2:	80 91 f0 02 	lds	r24, 0x02F0
    13b6:	8d 83       	std	Y+5, r24	; 0x05

	m += MILLIS_INC;
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	ab 81       	ldd	r26, Y+3	; 0x03
    13be:	bc 81       	ldd	r27, Y+4	; 0x04
    13c0:	40 96       	adiw	r24, 0x10	; 16
    13c2:	a1 1d       	adc	r26, r1
    13c4:	b1 1d       	adc	r27, r1
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	ab 83       	std	Y+3, r26	; 0x03
    13cc:	bc 83       	std	Y+4, r27	; 0x04
	f += FRACT_INC;
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	80 5d       	subi	r24, 0xD0	; 208
    13d2:	8d 83       	std	Y+5, r24	; 0x05
	if (f >= FRACT_MAX) {
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	8d 37       	cpi	r24, 0x7D	; 125
    13d8:	70 f0       	brcs	.+28     	; 0x13f6 <__vector_17+0x7e>
		f -= FRACT_MAX;
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	8d 57       	subi	r24, 0x7D	; 125
    13de:	8d 83       	std	Y+5, r24	; 0x05
		m += 1;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	ab 81       	ldd	r26, Y+3	; 0x03
    13e6:	bc 81       	ldd	r27, Y+4	; 0x04
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	a1 1d       	adc	r26, r1
    13ec:	b1 1d       	adc	r27, r1
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	ab 83       	std	Y+3, r26	; 0x03
    13f4:	bc 83       	std	Y+4, r27	; 0x04
	}

	timer0_fract = f;
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	80 93 f0 02 	sts	0x02F0, r24
	timer0_millis = m;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	ab 81       	ldd	r26, Y+3	; 0x03
    1402:	bc 81       	ldd	r27, Y+4	; 0x04
    1404:	80 93 ec 02 	sts	0x02EC, r24
    1408:	90 93 ed 02 	sts	0x02ED, r25
    140c:	a0 93 ee 02 	sts	0x02EE, r26
    1410:	b0 93 ef 02 	sts	0x02EF, r27
	timer0_overflow_count++;
    1414:	80 91 e8 02 	lds	r24, 0x02E8
    1418:	90 91 e9 02 	lds	r25, 0x02E9
    141c:	a0 91 ea 02 	lds	r26, 0x02EA
    1420:	b0 91 eb 02 	lds	r27, 0x02EB
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	a1 1d       	adc	r26, r1
    1428:	b1 1d       	adc	r27, r1
    142a:	80 93 e8 02 	sts	0x02E8, r24
    142e:	90 93 e9 02 	sts	0x02E9, r25
    1432:	a0 93 ea 02 	sts	0x02EA, r26
    1436:	b0 93 eb 02 	sts	0x02EB, r27
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	0f 90       	pop	r0
    1452:	00 92 5f 00 	sts	0x005F, r0
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <millis>:

unsigned long millis()
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <millis+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <millis+0x8>
    1464:	1f 92       	push	r1
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG;
    146a:	8f e5       	ldi	r24, 0x5F	; 95
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	89 83       	std	Y+1, r24	; 0x01

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1474:	f8 94       	cli
	m = timer0_millis;
    1476:	80 91 ec 02 	lds	r24, 0x02EC
    147a:	90 91 ed 02 	lds	r25, 0x02ED
    147e:	a0 91 ee 02 	lds	r26, 0x02EE
    1482:	b0 91 ef 02 	lds	r27, 0x02EF
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	9b 83       	std	Y+3, r25	; 0x03
    148a:	ac 83       	std	Y+4, r26	; 0x04
    148c:	bd 83       	std	Y+5, r27	; 0x05
	SREG = oldSREG;
    148e:	8f e5       	ldi	r24, 0x5F	; 95
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	29 81       	ldd	r18, Y+1	; 0x01
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18

	return m;
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	9b 81       	ldd	r25, Y+3	; 0x03
    149c:	ac 81       	ldd	r26, Y+4	; 0x04
    149e:	bd 81       	ldd	r27, Y+5	; 0x05
}
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	28 97       	sbiw	r28, 0x08	; 8
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	6d 83       	std	Y+5, r22	; 0x05
    14ca:	7e 83       	std	Y+6, r23	; 0x06
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	98 87       	std	Y+8, r25	; 0x08
	unsigned long start = millis();
    14d0:	c5 df       	rcall	.-118    	; 0x145c <millis>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	ab 83       	std	Y+3, r26	; 0x03
    14dc:	bc 83       	std	Y+4, r27	; 0x04
    14de:	00 00       	nop
	
	while (millis() - start <= ms)
    14e0:	bd df       	rcall	.-134    	; 0x145c <millis>
    14e2:	9b 01       	movw	r18, r22
    14e4:	ac 01       	movw	r20, r24
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	ab 81       	ldd	r26, Y+3	; 0x03
    14ec:	bc 81       	ldd	r27, Y+4	; 0x04
    14ee:	28 1b       	sub	r18, r24
    14f0:	39 0b       	sbc	r19, r25
    14f2:	4a 0b       	sbc	r20, r26
    14f4:	5b 0b       	sbc	r21, r27
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	af 81       	ldd	r26, Y+7	; 0x07
    14fc:	b8 85       	ldd	r27, Y+8	; 0x08
    14fe:	82 17       	cp	r24, r18
    1500:	93 07       	cpc	r25, r19
    1502:	a4 07       	cpc	r26, r20
    1504:	b5 07       	cpc	r27, r21
    1506:	60 f7       	brcc	.-40     	; 0x14e0 <delay+0x2c>
    1508:	28 96       	adiw	r28, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
		;
}
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <_ZN8SPIClass5beginEv>:
#define MOSIPin PB2
#define SCKPin PB1


void SPIClass::begin()
{
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	1f 92       	push	r1
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
  uint8_t sreg = SREG;
    1524:	8f e5       	ldi	r24, 0x5F	; 95
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    152e:	f8 94       	cli
  if (!initialized) {
    1530:	80 91 f1 02 	lds	r24, 0x02F1
    1534:	88 23       	and	r24, r24
    1536:	b1 f5       	brne	.+108    	; 0x15a4 <_ZN8SPIClass5beginEv+0x8a>
    // Set SS to high so a connected chip will be "deselected" by default
    SPIPort |= _BV(SSPin);
    1538:	85 e2       	ldi	r24, 0x25	; 37
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	25 e2       	ldi	r18, 0x25	; 37
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	f9 01       	movw	r30, r18
    1542:	20 81       	ld	r18, Z
    1544:	21 60       	ori	r18, 0x01	; 1
    1546:	fc 01       	movw	r30, r24
    1548:	20 83       	st	Z, r18

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    SPIDDR |= _BV(SSPin);
    154a:	84 e2       	ldi	r24, 0x24	; 36
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	24 e2       	ldi	r18, 0x24	; 36
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	f9 01       	movw	r30, r18
    1554:	20 81       	ld	r18, Z
    1556:	21 60       	ori	r18, 0x01	; 1
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    155c:	8c e4       	ldi	r24, 0x4C	; 76
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	2c e4       	ldi	r18, 0x4C	; 76
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	f9 01       	movw	r30, r18
    1566:	20 81       	ld	r18, Z
    1568:	20 61       	ori	r18, 0x10	; 16
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    156e:	8c e4       	ldi	r24, 0x4C	; 76
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	2c e4       	ldi	r18, 0x4C	; 76
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	20 81       	ld	r18, Z
    157a:	20 64       	ori	r18, 0x40	; 64
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    //pinMode(SCK, OUTPUT);
    //pinMode(MOSI, OUTPUT);
	SPIDDR |= _BV(SCKPin);
    1580:	84 e2       	ldi	r24, 0x24	; 36
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	24 e2       	ldi	r18, 0x24	; 36
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	f9 01       	movw	r30, r18
    158a:	20 81       	ld	r18, Z
    158c:	22 60       	ori	r18, 0x02	; 2
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
	SPIDDR |= _BV(MOSIPin);
    1592:	84 e2       	ldi	r24, 0x24	; 36
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	24 e2       	ldi	r18, 0x24	; 36
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	24 60       	ori	r18, 0x04	; 4
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
  }
  initialized++; // reference count
    15a4:	80 91 f1 02 	lds	r24, 0x02F1
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	80 93 f1 02 	sts	0x02F1, r24
  SREG = sreg;
    15ae:	8f e5       	ldi	r24, 0x5F	; 95
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	29 81       	ldd	r18, Y+1	; 0x01
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 83       	st	Z, r18
}
    15b8:	0f 90       	pop	r0
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <_ZN8SPIClass8transferEh>:
    SPCR = settings.spcr;
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	1f 92       	push	r1
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    15cc:	8e e4       	ldi	r24, 0x4E	; 78
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	29 81       	ldd	r18, Y+1	; 0x01
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    15d6:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    15d8:	00 00       	nop
    15da:	8d e4       	ldi	r24, 0x4D	; 77
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	fc 01       	movw	r30, r24
    15e0:	80 81       	ld	r24, Z
    15e2:	80 95       	com	r24
    15e4:	88 1f       	adc	r24, r24
    15e6:	88 27       	eor	r24, r24
    15e8:	88 1f       	adc	r24, r24
    15ea:	88 23       	and	r24, r24
    15ec:	b1 f7       	brne	.-20     	; 0x15da <_ZN8SPIClass8transferEh+0x1a>
    return SPDR;
    15ee:	8e e4       	ldi	r24, 0x4E	; 78
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	fc 01       	movw	r30, r24
    15f4:	80 81       	ld	r24, Z
  }
    15f6:	0f 90       	pop	r0
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <_ZN8SPIClass11setBitOrderEh>:
  // Disable the SPI bus
  static void end();

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	1f 92       	push	r1
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	89 83       	std	Y+1, r24	; 0x01
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	88 23       	and	r24, r24
    160e:	51 f4       	brne	.+20     	; 0x1624 <_ZN8SPIClass11setBitOrderEh+0x26>
    1610:	8c e4       	ldi	r24, 0x4C	; 76
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	2c e4       	ldi	r18, 0x4C	; 76
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	f9 01       	movw	r30, r18
    161a:	20 81       	ld	r18, Z
    161c:	20 62       	ori	r18, 0x20	; 32
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
    1622:	09 c0       	rjmp	.+18     	; 0x1636 <_ZN8SPIClass11setBitOrderEh+0x38>
    else SPCR &= ~(_BV(DORD));
    1624:	8c e4       	ldi	r24, 0x4C	; 76
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	2c e4       	ldi	r18, 0x4C	; 76
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	f9 01       	movw	r30, r18
    162e:	20 81       	ld	r18, Z
    1630:	2f 7d       	andi	r18, 0xDF	; 223
    1632:	fc 01       	movw	r30, r24
    1634:	20 83       	st	Z, r18
  }
    1636:	0f 90       	pop	r0
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <_ZN8SPIClass11setDataModeEh>:
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	1f 92       	push	r1
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
    164a:	8c e4       	ldi	r24, 0x4C	; 76
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	2c e4       	ldi	r18, 0x4C	; 76
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	f9 01       	movw	r30, r18
    1654:	20 81       	ld	r18, Z
    1656:	32 2f       	mov	r19, r18
    1658:	33 7f       	andi	r19, 0xF3	; 243
    165a:	29 81       	ldd	r18, Y+1	; 0x01
    165c:	23 2b       	or	r18, r19
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
  }
    1662:	0f 90       	pop	r0
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <_ZN8SPIClass15setClockDividerEh>:
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	1f 92       	push	r1
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
    1676:	8c e4       	ldi	r24, 0x4C	; 76
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	2c e4       	ldi	r18, 0x4C	; 76
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	f9 01       	movw	r30, r18
    1680:	20 81       	ld	r18, Z
    1682:	32 2f       	mov	r19, r18
    1684:	3c 7f       	andi	r19, 0xFC	; 252
    1686:	29 81       	ldd	r18, Y+1	; 0x01
    1688:	23 70       	andi	r18, 0x03	; 3
    168a:	23 2b       	or	r18, r19
    168c:	fc 01       	movw	r30, r24
    168e:	20 83       	st	Z, r18
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
    1690:	8d e4       	ldi	r24, 0x4D	; 77
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	2d e4       	ldi	r18, 0x4D	; 77
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	f9 01       	movw	r30, r18
    169a:	20 81       	ld	r18, Z
    169c:	42 2f       	mov	r20, r18
    169e:	4e 7f       	andi	r20, 0xFE	; 254
    16a0:	29 81       	ldd	r18, Y+1	; 0x01
    16a2:	22 2f       	mov	r18, r18
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	35 95       	asr	r19
    16a8:	27 95       	ror	r18
    16aa:	35 95       	asr	r19
    16ac:	27 95       	ror	r18
    16ae:	21 70       	andi	r18, 0x01	; 1
    16b0:	24 2b       	or	r18, r20
    16b2:	fc 01       	movw	r30, r24
    16b4:	20 83       	st	Z, r18
  }
    16b6:	0f 90       	pop	r0
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	08 95       	ret

000016be <_ZN16FT_Transport_SPIC1Ev>:
class FT_Transport_SPI
{
	public:
	/* Constructor and destructor methods */
	//initialize spi library
	FT_Transport_SPI()
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <_ZN16FT_Transport_SPIC1Ev+0x6>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
	{
		//CSPin = cspin; //new library interface
	}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <_ZN16FT_Transport_SPI8SetCSpinEPVhS1_h>:
	
	//api to set the cs pin number 
	void SetCSpin(volatile uint8_t *csport, volatile uint8_t *csddr, uint8_t cspin)
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	27 97       	sbiw	r28, 0x07	; 7
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	7c 83       	std	Y+4, r23	; 0x04
    16f0:	6b 83       	std	Y+3, r22	; 0x03
    16f2:	5e 83       	std	Y+6, r21	; 0x06
    16f4:	4d 83       	std	Y+5, r20	; 0x05
    16f6:	2f 83       	std	Y+7, r18	; 0x07
	{
		CSPin = cspin;
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	2f 81       	ldd	r18, Y+7	; 0x07
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
		CSPort = csport;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	fc 01       	movw	r30, r24
    170c:	32 83       	std	Z+2, r19	; 0x02
    170e:	21 83       	std	Z+1, r18	; 0x01
		CSDdr = csddr;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	2d 81       	ldd	r18, Y+5	; 0x05
    1716:	3e 81       	ldd	r19, Y+6	; 0x06
    1718:	fc 01       	movw	r30, r24
    171a:	34 83       	std	Z+4, r19	; 0x04
    171c:	23 83       	std	Z+3, r18	; 0x03
	}
    171e:	27 96       	adiw	r28, 0x07	; 7
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <_ZN16FT_Transport_SPID1Ev>:
	
	~FT_Transport_SPI(void){}//exit spi library
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	00 d0       	rcall	.+0      	; 0x1736 <_ZN16FT_Transport_SPID1Ev+0x6>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <_ZN16FT_Transport_SPI4InitEv>:
	void Init()
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	00 d0       	rcall	.+0      	; 0x174e <_ZN16FT_Transport_SPI4InitEv+0x6>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Initialize SPI library */
		//pinMode(CSPin, OUTPUT);
		//digitalWrite(CSPin, HIGH);   
		*CSDdr |= CSPin;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	fc 01       	movw	r30, r24
    175c:	83 81       	ldd	r24, Z+3	; 0x03
    175e:	94 81       	ldd	r25, Z+4	; 0x04
    1760:	29 81       	ldd	r18, Y+1	; 0x01
    1762:	3a 81       	ldd	r19, Y+2	; 0x02
    1764:	f9 01       	movw	r30, r18
    1766:	23 81       	ldd	r18, Z+3	; 0x03
    1768:	34 81       	ldd	r19, Z+4	; 0x04
    176a:	f9 01       	movw	r30, r18
    176c:	40 81       	ld	r20, Z
    176e:	29 81       	ldd	r18, Y+1	; 0x01
    1770:	3a 81       	ldd	r19, Y+2	; 0x02
    1772:	f9 01       	movw	r30, r18
    1774:	20 81       	ld	r18, Z
    1776:	24 2b       	or	r18, r20
    1778:	fc 01       	movw	r30, r24
    177a:	20 83       	st	Z, r18
		*CSPort |= CSPin; 
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	fc 01       	movw	r30, r24
    1782:	81 81       	ldd	r24, Z+1	; 0x01
    1784:	92 81       	ldd	r25, Z+2	; 0x02
    1786:	29 81       	ldd	r18, Y+1	; 0x01
    1788:	3a 81       	ldd	r19, Y+2	; 0x02
    178a:	f9 01       	movw	r30, r18
    178c:	21 81       	ldd	r18, Z+1	; 0x01
    178e:	32 81       	ldd	r19, Z+2	; 0x02
    1790:	f9 01       	movw	r30, r18
    1792:	40 81       	ld	r20, Z
    1794:	29 81       	ldd	r18, Y+1	; 0x01
    1796:	3a 81       	ldd	r19, Y+2	; 0x02
    1798:	f9 01       	movw	r30, r18
    179a:	20 81       	ld	r18, Z
    179c:	24 2b       	or	r18, r20
    179e:	fc 01       	movw	r30, r24
    17a0:	20 83       	st	Z, r18

		/* SPI library specific */
		SPI.begin();
    17a2:	bb de       	rcall	.-650    	; 0x151a <_ZN8SPIClass5beginEv>
    17a4:	84 e0       	ldi	r24, 0x04	; 4
/* handle due, yue, galileo and other hardware */
#if defined(__SAM3X8E__)
		SPI.setClockDivider(4);//hardcoding for due board
#else	
		/* Other Arduino boards */
		SPI.setClockDivider(SPI_CLOCK_DIV2);//for galileo this value should be fine
    17a6:	61 df       	rcall	.-318    	; 0x166a <_ZN8SPIClass15setClockDividerEh>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	29 df       	rcall	.-430    	; 0x15fe <_ZN8SPIClass11setBitOrderEh>
#endif	

		SPI.setBitOrder(MSBFIRST);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	47 df       	rcall	.-370    	; 0x163e <_ZN8SPIClass11setDataModeEh>
    17b0:	0f 90       	pop	r0
		SPI.setDataMode(SPI_MODE0);
    17b2:	0f 90       	pop	r0
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28

	}
    17b8:	08 95       	ret

000017ba <_ZN16FT_Transport_SPI11ChangeClockEm>:
	void Exit()
	{
		/* close the spi channel */
		SPI.end();
	}
	void ChangeClock(uint32_t ClockValue)
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <_ZN16FT_Transport_SPI11ChangeClockEm+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <_ZN16FT_Transport_SPI11ChangeClockEm+0x8>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <_ZN16FT_Transport_SPI11ChangeClockEm+0xa>
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	4b 83       	std	Y+3, r20	; 0x03
    17ce:	5c 83       	std	Y+4, r21	; 0x04
    17d0:	6d 83       	std	Y+5, r22	; 0x05
    17d2:	7e 83       	std	Y+6, r23	; 0x06
		/* For due it is straight forward, for others only a switch */
#if defined(__SAM3X8E__)
		SPI.setClockDivider((uint32_t)(84*1000000/ClockValue));//hardcoding for due board
#else	
		/* Other Arduino boards */
		if(ClockValue < 1000000)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	ad 81       	ldd	r26, Y+5	; 0x05
    17da:	be 81       	ldd	r27, Y+6	; 0x06
    17dc:	80 34       	cpi	r24, 0x40	; 64
    17de:	22 e4       	ldi	r18, 0x42	; 66
    17e0:	92 07       	cpc	r25, r18
    17e2:	2f e0       	ldi	r18, 0x0F	; 15
    17e4:	a2 07       	cpc	r26, r18
    17e6:	b1 05       	cpc	r27, r1
    17e8:	18 f4       	brcc	.+6      	; 0x17f0 <_ZN16FT_Transport_SPI11ChangeClockEm+0x36>
			SPI.setClockDivider(SPI_CLOCK_DIV32);//for galileo this value should be fine
    17ea:	86 e0       	ldi	r24, 0x06	; 6
    17ec:	3e df       	rcall	.-388    	; 0x166a <_ZN8SPIClass15setClockDividerEh>
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <_ZN16FT_Transport_SPI11ChangeClockEm+0x3a>
    17f0:	84 e0       	ldi	r24, 0x04	; 4
		else
			SPI.setClockDivider(SPI_CLOCK_DIV2);//for galileo this value should be fine
    17f2:	3b df       	rcall	.-394    	; 0x166a <_ZN8SPIClass15setClockDividerEh>
    17f4:	26 96       	adiw	r28, 0x06	; 6
    17f6:	0f b6       	in	r0, 0x3f	; 63
#endif			
	}
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <_ZN16FT_Transport_SPI9StartReadEm>:
	/* APIs related to memory read & write/transport */
	void StartRead(uint32_t Addr)
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	2a 97       	sbiw	r28, 0x0a	; 10
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	4f 83       	std	Y+7, r20	; 0x07
    1820:	58 87       	std	Y+8, r21	; 0x08
    1822:	69 87       	std	Y+9, r22	; 0x09
    1824:	7a 87       	std	Y+10, r23	; 0x0a
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Addr;
    1826:	8f 81       	ldd	r24, Y+7	; 0x07
    1828:	98 85       	ldd	r25, Y+8	; 0x08
    182a:	a9 85       	ldd	r26, Y+9	; 0x09
    182c:	ba 85       	ldd	r27, Y+10	; 0x0a
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	ab 83       	std	Y+3, r26	; 0x03
    1834:	bc 83       	std	Y+4, r27	; 0x04
		//digitalWrite(CSPin, LOW);
		*CSPort &= ~CSPin;
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	fc 01       	movw	r30, r24
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	92 81       	ldd	r25, Z+2	; 0x02
    1840:	2d 81       	ldd	r18, Y+5	; 0x05
    1842:	3e 81       	ldd	r19, Y+6	; 0x06
    1844:	f9 01       	movw	r30, r18
    1846:	21 81       	ldd	r18, Z+1	; 0x01
    1848:	32 81       	ldd	r19, Z+2	; 0x02
    184a:	f9 01       	movw	r30, r18
    184c:	20 81       	ld	r18, Z
    184e:	42 2f       	mov	r20, r18
    1850:	2d 81       	ldd	r18, Y+5	; 0x05
    1852:	3e 81       	ldd	r19, Y+6	; 0x06
    1854:	f9 01       	movw	r30, r18
    1856:	20 81       	ld	r18, Z
    1858:	20 95       	com	r18
    185a:	24 23       	and	r18, r20
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18
		
		SPI.transfer(A[2]);
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	ae de       	rcall	.-676    	; 0x15c0 <_ZN8SPIClass8transferEh>
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
		SPI.transfer(A[1]);
    1866:	ac de       	rcall	.-680    	; 0x15c0 <_ZN8SPIClass8transferEh>
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	aa de       	rcall	.-684    	; 0x15c0 <_ZN8SPIClass8transferEh>
		SPI.transfer(A[0]);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	a8 de       	rcall	.-688    	; 0x15c0 <_ZN8SPIClass8transferEh>
    1870:	2a 96       	adiw	r28, 0x0a	; 10
		SPI.transfer(0x00);//dummy byte for read
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
	}
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <_ZN16FT_Transport_SPI10StartWriteEm>:
	void StartWrite(uint32_t Addr)
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	2a 97       	sbiw	r28, 0x0a	; 10
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	4f 83       	std	Y+7, r20	; 0x07
    189c:	58 87       	std	Y+8, r21	; 0x08
    189e:	69 87       	std	Y+9, r22	; 0x09
    18a0:	7a 87       	std	Y+10, r23	; 0x0a
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Addr;
    18a2:	8f 81       	ldd	r24, Y+7	; 0x07
    18a4:	98 85       	ldd	r25, Y+8	; 0x08
    18a6:	a9 85       	ldd	r26, Y+9	; 0x09
    18a8:	ba 85       	ldd	r27, Y+10	; 0x0a
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	ab 83       	std	Y+3, r26	; 0x03
    18b0:	bc 83       	std	Y+4, r27	; 0x04
		//digitalWrite(CSPin, LOW);
		*CSPort &= ~CSPin;
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	fc 01       	movw	r30, r24
    18b8:	81 81       	ldd	r24, Z+1	; 0x01
    18ba:	92 81       	ldd	r25, Z+2	; 0x02
    18bc:	2d 81       	ldd	r18, Y+5	; 0x05
    18be:	3e 81       	ldd	r19, Y+6	; 0x06
    18c0:	f9 01       	movw	r30, r18
    18c2:	21 81       	ldd	r18, Z+1	; 0x01
    18c4:	32 81       	ldd	r19, Z+2	; 0x02
    18c6:	f9 01       	movw	r30, r18
    18c8:	20 81       	ld	r18, Z
    18ca:	42 2f       	mov	r20, r18
    18cc:	2d 81       	ldd	r18, Y+5	; 0x05
    18ce:	3e 81       	ldd	r19, Y+6	; 0x06
    18d0:	f9 01       	movw	r30, r18
    18d2:	20 81       	ld	r18, Z
    18d4:	20 95       	com	r18
    18d6:	24 23       	and	r18, r20
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18
		
		SPI.transfer(A[2] | 0x80);
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	6f de       	rcall	.-802    	; 0x15c0 <_ZN8SPIClass8transferEh>
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
		SPI.transfer(A[1]);
    18e4:	6d de       	rcall	.-806    	; 0x15c0 <_ZN8SPIClass8transferEh>
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	6b de       	rcall	.-810    	; 0x15c0 <_ZN8SPIClass8transferEh>
		SPI.transfer(A[0]);
    18ea:	2a 96       	adiw	r28, 0x0a	; 10
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
	}
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <_ZN16FT_Transport_SPI4ReadEm>:
	
	//Read a byte from Addr location
	uint8_t Read(uint32_t Addr)
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	27 97       	sbiw	r28, 0x07	; 7
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	9b 83       	std	Y+3, r25	; 0x03
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	4c 83       	std	Y+4, r20	; 0x04
    1916:	5d 83       	std	Y+5, r21	; 0x05
    1918:	6e 83       	std	Y+6, r22	; 0x06
    191a:	7f 83       	std	Y+7, r23	; 0x07
	{
		uint8_t ReadByte;
		StartRead(Addr);
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	ae 81       	ldd	r26, Y+6	; 0x06
    1922:	bf 81       	ldd	r27, Y+7	; 0x07
    1924:	2a 81       	ldd	r18, Y+2	; 0x02
    1926:	3b 81       	ldd	r19, Y+3	; 0x03
    1928:	ac 01       	movw	r20, r24
    192a:	bd 01       	movw	r22, r26
    192c:	c9 01       	movw	r24, r18
    192e:	6b df       	rcall	.-298    	; 0x1806 <_ZN16FT_Transport_SPI9StartReadEm>
    1930:	80 e0       	ldi	r24, 0x00	; 0
		ReadByte = SPI.transfer(0x00);
    1932:	46 de       	rcall	.-884    	; 0x15c0 <_ZN8SPIClass8transferEh>
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
		EndTransfer();
    193a:	62 d1       	rcall	.+708    	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	27 96       	adiw	r28, 0x07	; 7
    1940:	0f b6       	in	r0, 0x3f	; 63
		return (ReadByte);
    1942:	f8 94       	cli
	}
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <_ZN16FT_Transport_SPI6Read16Em>:
	
	//read a short from Addr location
	uint16_t Read16(uint32_t Addr)
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	28 97       	sbiw	r28, 0x08	; 8
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	9c 83       	std	Y+4, r25	; 0x04
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	4d 83       	std	Y+5, r20	; 0x05
    196a:	5e 83       	std	Y+6, r21	; 0x06
    196c:	6f 83       	std	Y+7, r22	; 0x07
    196e:	78 87       	std	Y+8, r23	; 0x08
		{
			uint16_t UUint16;
			uint8_t  A[2];
		};
		///little endian read
		StartRead(Addr);
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	af 81       	ldd	r26, Y+7	; 0x07
    1976:	b8 85       	ldd	r27, Y+8	; 0x08
    1978:	2b 81       	ldd	r18, Y+3	; 0x03
    197a:	3c 81       	ldd	r19, Y+4	; 0x04
    197c:	ac 01       	movw	r20, r24
    197e:	bd 01       	movw	r22, r26
    1980:	c9 01       	movw	r24, r18
    1982:	41 df       	rcall	.-382    	; 0x1806 <_ZN16FT_Transport_SPI9StartReadEm>
    1984:	80 e0       	ldi	r24, 0x00	; 0
		A[0] = SPI.transfer(0x00);
    1986:	1c de       	rcall	.-968    	; 0x15c0 <_ZN8SPIClass8transferEh>
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	19 de       	rcall	.-974    	; 0x15c0 <_ZN8SPIClass8transferEh>
		A[1] = SPI.transfer(0x00);		
    198e:	8a 83       	std	Y+2, r24	; 0x02
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	35 d1       	rcall	.+618    	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
		EndTransfer();
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	28 96       	adiw	r28, 0x08	; 8
    199c:	0f b6       	in	r0, 0x3f	; 63
		return (UUint16);
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
	}
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <_ZN16FT_Transport_SPI6Read32Em>:
	//read a word from Addr location
	uint32_t Read32(uint32_t Addr)
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	2a 97       	sbiw	r28, 0x0a	; 10
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	4f 83       	std	Y+7, r20	; 0x07
    19c6:	58 87       	std	Y+8, r21	; 0x08
    19c8:	69 87       	std	Y+9, r22	; 0x09
    19ca:	7a 87       	std	Y+10, r23	; 0x0a
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		//little endian read
		StartRead(Addr);		
    19cc:	8f 81       	ldd	r24, Y+7	; 0x07
    19ce:	98 85       	ldd	r25, Y+8	; 0x08
    19d0:	a9 85       	ldd	r26, Y+9	; 0x09
    19d2:	ba 85       	ldd	r27, Y+10	; 0x0a
    19d4:	2d 81       	ldd	r18, Y+5	; 0x05
    19d6:	3e 81       	ldd	r19, Y+6	; 0x06
    19d8:	ac 01       	movw	r20, r24
    19da:	bd 01       	movw	r22, r26
    19dc:	c9 01       	movw	r24, r18
    19de:	13 df       	rcall	.-474    	; 0x1806 <_ZN16FT_Transport_SPI9StartReadEm>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
		A[0] = SPI.transfer(0x00);
    19e2:	ee dd       	rcall	.-1060   	; 0x15c0 <_ZN8SPIClass8transferEh>
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	eb dd       	rcall	.-1066   	; 0x15c0 <_ZN8SPIClass8transferEh>
		A[1] = SPI.transfer(0x00);		
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	e8 dd       	rcall	.-1072   	; 0x15c0 <_ZN8SPIClass8transferEh>
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		A[2] = SPI.transfer(0x00);
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	e5 dd       	rcall	.-1078   	; 0x15c0 <_ZN8SPIClass8transferEh>
    19f6:	8c 83       	std	Y+4, r24	; 0x04
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
		A[3] = SPI.transfer(0x00);		
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	01 d1       	rcall	.+514    	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
		EndTransfer();
    1a02:	ab 81       	ldd	r26, Y+3	; 0x03
    1a04:	bc 81       	ldd	r27, Y+4	; 0x04
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
		return (UUint32);
    1a0a:	2a 96       	adiw	r28, 0x0a	; 10
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
	}
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <_ZN16FT_Transport_SPI5WriteEmh>:
			*Src++ = SPI.transfer(0x00);
		EndTransfer();
	}
	
	//write a byte to Addr location
	void Write(uint32_t Addr, uint8_t Value8)
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	27 97       	sbiw	r28, 0x07	; 7
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	4b 83       	std	Y+3, r20	; 0x03
    1a36:	5c 83       	std	Y+4, r21	; 0x04
    1a38:	6d 83       	std	Y+5, r22	; 0x05
    1a3a:	7e 83       	std	Y+6, r23	; 0x06
    1a3c:	2f 83       	std	Y+7, r18	; 0x07
	{	
		StartWrite(Addr);
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	ad 81       	ldd	r26, Y+5	; 0x05
    1a44:	be 81       	ldd	r27, Y+6	; 0x06
    1a46:	29 81       	ldd	r18, Y+1	; 0x01
    1a48:	3a 81       	ldd	r19, Y+2	; 0x02
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	bd 01       	movw	r22, r26
    1a4e:	c9 01       	movw	r24, r18
    1a50:	18 df       	rcall	.-464    	; 0x1882 <_ZN16FT_Transport_SPI10StartWriteEm>
    1a52:	8f 81       	ldd	r24, Y+7	; 0x07
		SPI.transfer(Value8);
    1a54:	b5 dd       	rcall	.-1174   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
		EndTransfer();
    1a5a:	d2 d0       	rcall	.+420    	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
    1a5c:	27 96       	adiw	r28, 0x07	; 7
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
	}
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <_ZN16FT_Transport_SPI7Write16Emj>:
	//write a short to Addr location
	void Write16(uint32_t Addr, uint16_t Value16)
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	2a 97       	sbiw	r28, 0x0a	; 10
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	9c 83       	std	Y+4, r25	; 0x04
    1a84:	8b 83       	std	Y+3, r24	; 0x03
    1a86:	4d 83       	std	Y+5, r20	; 0x05
    1a88:	5e 83       	std	Y+6, r21	; 0x06
    1a8a:	6f 83       	std	Y+7, r22	; 0x07
    1a8c:	78 87       	std	Y+8, r23	; 0x08
    1a8e:	3a 87       	std	Y+10, r19	; 0x0a
    1a90:	29 87       	std	Y+9, r18	; 0x09
		union
		{
			uint16_t UUint16;
			uint8_t  A[2];
		};
		UUint16 = Value16;
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
		///little endian read
		StartWrite(Addr);
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	af 81       	ldd	r26, Y+7	; 0x07
    1aa0:	b8 85       	ldd	r27, Y+8	; 0x08
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	bd 01       	movw	r22, r26
    1aaa:	c9 01       	movw	r24, r18
    1aac:	ea de       	rcall	.-556    	; 0x1882 <_ZN16FT_Transport_SPI10StartWriteEm>
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
		SPI.transfer(A[0]);
    1ab0:	87 dd       	rcall	.-1266   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	85 dd       	rcall	.-1270   	; 0x15c0 <_ZN8SPIClass8transferEh>
		SPI.transfer(A[1]);		
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	a2 d0       	rcall	.+324    	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
		EndTransfer();
    1abc:	2a 96       	adiw	r28, 0x0a	; 10
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
	}	
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	08 95       	ret

00001ace <_ZN16FT_Transport_SPI7Write32Emm>:
	//write a word to Addr location
	void Write32(uint32_t Addr, uint32_t Value32)
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	2e 97       	sbiw	r28, 0x0e	; 14
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	4f 83       	std	Y+7, r20	; 0x07
    1aec:	58 87       	std	Y+8, r21	; 0x08
    1aee:	69 87       	std	Y+9, r22	; 0x09
    1af0:	7a 87       	std	Y+10, r23	; 0x0a
    1af2:	0b 87       	std	Y+11, r16	; 0x0b
    1af4:	1c 87       	std	Y+12, r17	; 0x0c
    1af6:	2d 87       	std	Y+13, r18	; 0x0d
    1af8:	3e 87       	std	Y+14, r19	; 0x0e
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Value32;
    1afa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1afc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1afe:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b00:	be 85       	ldd	r27, Y+14	; 0x0e
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	ab 83       	std	Y+3, r26	; 0x03
    1b08:	bc 83       	std	Y+4, r27	; 0x04
		///little endian read
		StartWrite(Addr);
    1b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0c:	98 85       	ldd	r25, Y+8	; 0x08
    1b0e:	a9 85       	ldd	r26, Y+9	; 0x09
    1b10:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b12:	2d 81       	ldd	r18, Y+5	; 0x05
    1b14:	3e 81       	ldd	r19, Y+6	; 0x06
    1b16:	ac 01       	movw	r20, r24
    1b18:	bd 01       	movw	r22, r26
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	b2 de       	rcall	.-668    	; 0x1882 <_ZN16FT_Transport_SPI10StartWriteEm>
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
		SPI.transfer(A[0]);
    1b20:	4f dd       	rcall	.-1378   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	4d dd       	rcall	.-1382   	; 0x15c0 <_ZN8SPIClass8transferEh>
		SPI.transfer(A[1]);		
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	4b dd       	rcall	.-1386   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1b2a:	8c 81       	ldd	r24, Y+4	; 0x04
		SPI.transfer(A[2]);
    1b2c:	49 dd       	rcall	.-1390   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
		SPI.transfer(A[3]);		
    1b32:	66 d0       	rcall	.+204    	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
    1b34:	2e 96       	adiw	r28, 0x0e	; 14
    1b36:	0f b6       	in	r0, 0x3f	; 63
		EndTransfer();
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
	}	
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

00001b4a <_ZN16FT_Transport_SPI5WriteEmPhm>:
	
	void Write(uint32_t Addr, uint8_t *Src, uint32_t NBytes)
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	60 97       	sbiw	r28, 0x10	; 16
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	4f 83       	std	Y+7, r20	; 0x07
    1b6c:	58 87       	std	Y+8, r21	; 0x08
    1b6e:	69 87       	std	Y+9, r22	; 0x09
    1b70:	7a 87       	std	Y+10, r23	; 0x0a
    1b72:	3c 87       	std	Y+12, r19	; 0x0c
    1b74:	2b 87       	std	Y+11, r18	; 0x0b
    1b76:	ed 86       	std	Y+13, r14	; 0x0d
    1b78:	fe 86       	std	Y+14, r15	; 0x0e
    1b7a:	0f 87       	std	Y+15, r16	; 0x0f
    1b7c:	18 8b       	std	Y+16, r17	; 0x10
	{
		uint32_t i;
		StartWrite(Addr);
    1b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b80:	98 85       	ldd	r25, Y+8	; 0x08
    1b82:	a9 85       	ldd	r26, Y+9	; 0x09
    1b84:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b86:	2d 81       	ldd	r18, Y+5	; 0x05
    1b88:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	bd 01       	movw	r22, r26
    1b8e:	c9 01       	movw	r24, r18
    1b90:	78 de       	rcall	.-784    	; 0x1882 <_ZN16FT_Transport_SPI10StartWriteEm>
    1b92:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<NBytes;i++)
    1b94:	1a 82       	std	Y+2, r1	; 0x02
    1b96:	1b 82       	std	Y+3, r1	; 0x03
    1b98:	1c 82       	std	Y+4, r1	; 0x04
    1b9a:	15 c0       	rjmp	.+42     	; 0x1bc6 <_ZN16FT_Transport_SPI5WriteEmPhm+0x7c>
    1b9c:	8b 85       	ldd	r24, Y+11	; 0x0b
			SPI.transfer(*Src++);
    1b9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	2f 5f       	subi	r18, 0xFF	; 255
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba6:	3c 87       	std	Y+12, r19	; 0x0c
    1ba8:	2b 87       	std	Y+11, r18	; 0x0b
    1baa:	fc 01       	movw	r30, r24
    1bac:	80 81       	ld	r24, Z
    1bae:	08 dd       	rcall	.-1520   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
	
	void Write(uint32_t Addr, uint8_t *Src, uint32_t NBytes)
	{
		uint32_t i;
		StartWrite(Addr);
		for(i=0;i<NBytes;i++)
    1bb4:	ab 81       	ldd	r26, Y+3	; 0x03
    1bb6:	bc 81       	ldd	r27, Y+4	; 0x04
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	ab 83       	std	Y+3, r26	; 0x03
    1bc4:	bc 83       	std	Y+4, r27	; 0x04
    1bc6:	29 81       	ldd	r18, Y+1	; 0x01
    1bc8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bca:	4b 81       	ldd	r20, Y+3	; 0x03
    1bcc:	5c 81       	ldd	r21, Y+4	; 0x04
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	af 85       	ldd	r26, Y+15	; 0x0f
    1bd4:	b8 89       	ldd	r27, Y+16	; 0x10
    1bd6:	28 17       	cp	r18, r24
    1bd8:	39 07       	cpc	r19, r25
    1bda:	4a 07       	cpc	r20, r26
    1bdc:	5b 07       	cpc	r21, r27
    1bde:	f0 f2       	brcs	.-68     	; 0x1b9c <_ZN16FT_Transport_SPI5WriteEmPhm+0x52>
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
			SPI.transfer(*Src++);
		EndTransfer();
    1be4:	0d d0       	rcall	.+26     	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
    1be6:	60 96       	adiw	r28, 0x10	; 16
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
	}
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	08 95       	ret

00001c00 <_ZN16FT_Transport_SPI11EndTransferEv>:
		SPI.transfer(A[1]);
		SPI.transfer(A[0]);
	}

	//de assert CSpin
	void EndTransfer(void)
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <_ZN16FT_Transport_SPI11EndTransferEv+0x6>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	{
		//digitalWrite(CSPin, HIGH);
		*CSPort |= CSPin;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	fc 01       	movw	r30, r24
    1c14:	81 81       	ldd	r24, Z+1	; 0x01
    1c16:	92 81       	ldd	r25, Z+2	; 0x02
    1c18:	29 81       	ldd	r18, Y+1	; 0x01
    1c1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c1c:	f9 01       	movw	r30, r18
    1c1e:	21 81       	ldd	r18, Z+1	; 0x01
    1c20:	32 81       	ldd	r19, Z+2	; 0x02
    1c22:	f9 01       	movw	r30, r18
    1c24:	40 81       	ld	r20, Z
    1c26:	29 81       	ldd	r18, Y+1	; 0x01
    1c28:	3a 81       	ldd	r19, Y+2	; 0x02
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	20 81       	ld	r18, Z
    1c2e:	24 2b       	or	r18, r20
    1c30:	fc 01       	movw	r30, r24
    1c32:	20 83       	st	Z, r18
	}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	08 95       	ret

00001c3e <_ZN16FT_Transport_SPI8TransferEh>:
	//transfer a single byte
	void Transfer(uint8_t Value8)
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <_ZN16FT_Transport_SPI8TransferEh+0x6>
    1c44:	1f 92       	push	r1
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	6b 83       	std	Y+3, r22	; 0x03
	{
		SPI.transfer(Value8);
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	b6 dc       	rcall	.-1684   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1c54:	0f 90       	pop	r0
	}
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	08 95       	ret

00001c60 <_ZN16FT_Transport_SPI10Transfer32Em>:
		UUint16 = Value16;
		A[0] = SPI.transfer(A[0]);
		A[1] = SPI.transfer(A[1]);		
	}
	//transfer 4 bytes
	void Transfer32(uint32_t Value32)
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	2a 97       	sbiw	r28, 0x0a	; 10
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	4f 83       	std	Y+7, r20	; 0x07
    1c7a:	58 87       	std	Y+8, r21	; 0x08
    1c7c:	69 87       	std	Y+9, r22	; 0x09
    1c7e:	7a 87       	std	Y+10, r23	; 0x0a
		union
		{
			uint32_t UUint32;
			uint8_t  A[4];
		};
		UUint32 = Value32;		
    1c80:	8f 81       	ldd	r24, Y+7	; 0x07
    1c82:	98 85       	ldd	r25, Y+8	; 0x08
    1c84:	a9 85       	ldd	r26, Y+9	; 0x09
    1c86:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	ab 83       	std	Y+3, r26	; 0x03
    1c8e:	bc 83       	std	Y+4, r27	; 0x04
		SPI.transfer(A[0]);
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	96 dc       	rcall	.-1748   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
		SPI.transfer(A[1]);
    1c96:	94 dc       	rcall	.-1752   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	92 dc       	rcall	.-1756   	; 0x15c0 <_ZN8SPIClass8transferEh>
		SPI.transfer(A[2]);
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	90 dc       	rcall	.-1760   	; 0x15c0 <_ZN8SPIClass8transferEh>
    1ca0:	2a 96       	adiw	r28, 0x0a	; 10
		SPI.transfer(A[3]);		
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
	}
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <_Z15BootupConfigurev>:

FT801IMPL_SPI FTImpl(FT_CS_PIN, FT_INT_PIN);

/* Api to bootup FT801, verify FT801 hardware and configure display/audio pins */
/* Returns 0 in case of success and 1 in case of failure */
int16_t BootupConfigure() {
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <_Z15BootupConfigurev+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <_Z15BootupConfigurev+0x8>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
   uint32_t chipid = 0;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
    1cc0:	1a 82       	std	Y+2, r1	; 0x02
    1cc2:	1b 82       	std	Y+3, r1	; 0x03
    1cc4:	1c 82       	std	Y+4, r1	; 0x04
   FTImpl.Init(FT_DISPLAY_RESOLUTION); //configure the display to the WQVGA
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	82 ef       	ldi	r24, 0xF2	; 242
    1cce:	92 e0       	ldi	r25, 0x02	; 2
    1cd0:	cd d0       	rcall	.+410    	; 0x1e6c <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj>
    1cd2:	64 e1       	ldi	r22, 0x14	; 20

   delay(20); //for safer side
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	ec db       	rcall	.-2088   	; 0x14b4 <delay>
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	50 e0       	ldi	r21, 0x00	; 0
   chipid = FTImpl.Read32(FT_ROM_CHIPID);
    1ce0:	6c e0       	ldi	r22, 0x0C	; 12
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	82 ef       	ldi	r24, 0xF2	; 242
    1ce6:	92 e0       	ldi	r25, 0x02	; 2
    1ce8:	61 de       	rcall	.-830    	; 0x19ac <_ZN16FT_Transport_SPI6Read32Em>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	ab 83       	std	Y+3, r26	; 0x03
    1cf4:	bc 83       	std	Y+4, r27	; 0x04
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfa:	ab 81       	ldd	r26, Y+3	; 0x03

   /* Identify the chip */
   if (FT801_CHIPID != chipid) {
    1cfc:	bc 81       	ldd	r27, Y+4	; 0x04
    1cfe:	88 30       	cpi	r24, 0x08	; 8
    1d00:	21 e0       	ldi	r18, 0x01	; 1
    1d02:	92 07       	cpc	r25, r18
    1d04:	a2 07       	cpc	r26, r18
    1d06:	b1 05       	cpc	r27, r1
    1d08:	a1 f0       	breq	.+40     	; 0x1d32 <_Z15BootupConfigurev+0x80>
    1d0a:	6a e0       	ldi	r22, 0x0A	; 10
    1d0c:	71 e0       	ldi	r23, 0x01	; 1
    1d0e:	8e e9       	ldi	r24, 0x9E	; 158
      Serial.print("Error in chip id read ");
    1d10:	92 e0       	ldi	r25, 0x02	; 2
    1d12:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5Print5printEPKc>
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	ab 81       	ldd	r26, Y+3	; 0x03
      Serial.println(chipid, HEX);
    1d1c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d1e:	20 e1       	ldi	r18, 0x10	; 16
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	ac 01       	movw	r20, r24
    1d24:	bd 01       	movw	r22, r26
    1d26:	8e e9       	ldi	r24, 0x9E	; 158
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	98 d8       	rcall	.-3792   	; 0xe5c <_ZN5Print7printlnEmi>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <_Z15BootupConfigurev+0x8a>
    1d32:	82 ef       	ldi	r24, 0xF2	; 242
      return 1;
    1d34:	92 e0       	ldi	r25, 0x02	; 2
    1d36:	b5 d0       	rcall	.+362    	; 0x1ea2 <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
   }

   /* Set the Display & audio pins */
   //FTImpl.SetDisplayEnablePin(FT_DISPENABLE_PIN);
   // FTImpl.SetAudioEnablePin(FT_AUDIOENABLE_PIN);
   FTImpl.DisplayOn();
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
   //FTImpl.AudioOn();
   return 0;
    1d42:	0f 90       	pop	r0
    1d44:	df 91       	pop	r29
}
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <_Z10HelloWorldv>:

/* API to display Hello World string on the screen */
void HelloWorld() {
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	66 97       	sbiw	r28, 0x16	; 22
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
   /* Change the below string for experimentation */
   const char Display_string[] = "Formula Electric 2015";
    1d66:	26 e1       	ldi	r18, 0x16	; 22
    1d68:	e1 e2       	ldi	r30, 0x21	; 33
    1d6a:	f1 e0       	ldi	r31, 0x01	; 1
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	dc 01       	movw	r26, r24
    1d72:	01 90       	ld	r0, Z+
    1d74:	0d 92       	st	X+, r0
    1d76:	2a 95       	dec	r18
    1d78:	e1 f7       	brne	.-8      	; 0x1d72 <_Z10HelloWorldv+0x28>

   /* Display list to display "Hello World" at the centre of display area */
   FTImpl.DLStart(); //start the display list. Note DLStart and DLEnd are helper apis, Cmd_DLStart() and Display() can also be utilized.
    1d7a:	82 ef       	ldi	r24, 0xF2	; 242
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	bd d0       	rcall	.+378    	; 0x1efa <_ZN5FT_GCI16FT_Transport_SPIE7DLStartEv>
    1d80:	2f ef       	ldi	r18, 0xFF	; 255
   FTImpl.ColorRGB(0xFF, 0xFF, 0xFF); //set the color of the string to white color
    1d82:	4f ef       	ldi	r20, 0xFF	; 255
    1d84:	6f ef       	ldi	r22, 0xFF	; 255
    1d86:	82 ef       	ldi	r24, 0xF2	; 242
    1d88:	92 e0       	ldi	r25, 0x02	; 2
    1d8a:	cc d0       	rcall	.+408    	; 0x1f24 <_ZN5FT_GCI16FT_Transport_SPIE8ColorRGBEhhh>
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	01 96       	adiw	r24, 0x01	; 1
   FTImpl.Cmd_Text(FT_DISPLAYWIDTH / 2, FT_DISPLAYHEIGHT / 2, 29, FT_OPT_CENTER,
      Display_string); //display "Hello World at the center of the screen using inbuilt font handle 29 "
    1d90:	7c 01       	movw	r14, r24
    1d92:	00 e0       	ldi	r16, 0x00	; 0
    1d94:	16 e0       	ldi	r17, 0x06	; 6
    1d96:	2d e1       	ldi	r18, 0x1D	; 29
    1d98:	48 e8       	ldi	r20, 0x88	; 136
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	60 ef       	ldi	r22, 0xF0	; 240
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	82 ef       	ldi	r24, 0xF2	; 242
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	e9 d0       	rcall	.+466    	; 0x1f78 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_TextEiihjPKc>
    1da6:	82 ef       	ldi	r24, 0xF2	; 242
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	58 d1       	rcall	.+688    	; 0x205c <_ZN5FT_GCI16FT_Transport_SPIE5DLEndEv>
   FTImpl.DLEnd();   //end the display list
    1dac:	82 ef       	ldi	r24, 0xF2	; 242
    1dae:	92 e0       	ldi	r25, 0x02	; 2
    1db0:	67 d1       	rcall	.+718    	; 0x2080 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv>
    1db2:	66 96       	adiw	r28, 0x16	; 22
   FTImpl.Finish(); //render the display list and wait for the completion of the DL
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
}
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	08 95       	ret

00001dcc <setup>:

/* bootup the module and display "Hello World" on screen */
void setup() {
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
   /* Initialize serial print related functionality */
   Serial.begin(9600);
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	55 e2       	ldi	r21, 0x25	; 37
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	8e e9       	ldi	r24, 0x9E	; 158
    1dde:	92 e0       	ldi	r25, 0x02	; 2
    1de0:	0e 94 01 02 	call	0x402	; 0x402 <_ZN14HardwareSerial5beginEl>

   /* Set the Display Enable pin*/
   Serial.println("--Start Application--");
    1de4:	67 e3       	ldi	r22, 0x37	; 55
    1de6:	71 e0       	ldi	r23, 0x01	; 1
    1de8:	8e e9       	ldi	r24, 0x9E	; 158
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	10 d8       	rcall	.-4064   	; 0xe0e <_ZN5Print7printlnEPKc>
    1dee:	61 df       	rcall	.-318    	; 0x1cb2 <_Z15BootupConfigurev>
   if (BootupConfigure()) {
    1df0:	21 e0       	ldi	r18, 0x01	; 1
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <setup+0x2c>
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	22 23       	and	r18, r18
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <setup+0x32>
    1dfc:	a6 df       	rcall	.-180    	; 0x1d4a <_Z10HelloWorldv>
    1dfe:	6d e4       	ldi	r22, 0x4D	; 77
      //error case - do not do any thing
   } else {
      HelloWorld();
    1e00:	71 e0       	ldi	r23, 0x01	; 1
    1e02:	8e e9       	ldi	r24, 0x9E	; 158
   }
   Serial.println("--End Application--");
    1e04:	92 e0       	ldi	r25, 0x02	; 2
    1e06:	03 d8       	rcall	.-4090   	; 0xe0e <_ZN5Print7printlnEPKc>
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	08 95       	ret

00001e0e <main>:
}

int main() {
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
   setup();
    1e16:	da df       	rcall	.-76     	; 0x1dcc <setup>
    1e18:	60 ed       	ldi	r22, 0xD0	; 208

   delay(2000);
    1e1a:	77 e0       	ldi	r23, 0x07	; 7
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	49 db       	rcall	.-2414   	; 0x14b4 <delay>
    1e22:	82 ef       	ldi	r24, 0xF2	; 242
    1e24:	92 e0       	ldi	r25, 0x02	; 2

   FTImpl.Clear();
    1e26:	71 d1       	rcall	.+738    	; 0x210a <_ZN5FT_GCI16FT_Transport_SPIE5ClearEv>
    1e28:	ff cf       	rjmp	.-2      	; 0x1e28 <main+0x1a>

00001e2a <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh>:
FT801Impl<FT_Trans>::FT801Impl(void)
{
	
}
template<class FT_Trans>
FT801Impl<FT_Trans>::FT801Impl(uint8_t csPin, uint8_t IntPin)
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	6b 83       	std	Y+3, r22	; 0x03
    1e3c:	4c 83       	std	Y+4, r20	; 0x04
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	9a 81       	ldd	r25, Y+2	; 0x02
    1e42:	76 d1       	rcall	.+748    	; 0x2130 <_ZN5FT_GCI16FT_Transport_SPIEC1Ev>
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
{
	//all the three pins will be utilized
	FT_GC<FT_Trans>::CSPin = csPin;
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	20 83       	st	Z, r18
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
	FT_GC<FT_Trans>::IntPin = IntPin;
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	fc 01       	movw	r30, r24
    1e5a:	34 87       	std	Z+12, r19	; 0x0c
    1e5c:	23 87       	std	Z+11, r18	; 0x0b
    1e5e:	0f 90       	pop	r0
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj>:
{
	//do nothing
}
/* api to set the resolution of output display */
template<class FT_Trans>
FT_Status FT801Impl<FT_Trans>::Init(uint8_t ResType, uint16_t options1=0)
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <_ZN9FT801ImplI16FT_Transport_SPIE4InitEhj+0x8>
    1e74:	1f 92       	push	r1
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6b 83       	std	Y+3, r22	; 0x03
    1e80:	5d 83       	std	Y+5, r21	; 0x05
    1e82:	4c 83       	std	Y+4, r20	; 0x04
{
	return (FT_GC<FT_Trans>::Init(ResType,options1) );
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e90:	ab d1       	rcall	.+854    	; 0x21e8 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj>
    1e92:	0f 90       	pop	r0
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv>:
      (1 << AudioGpioPin) | FT_Trans::Read(REG_GPIO_DIR));
}

template<class FT_Trans>
/* Apis to enable/disable backlight */
void FT_GC<FT_Trans>::DisplayOn(void) {
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv+0x8>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
   /* switch on the display, 1 means enable and 0 means disable */
   FT_Trans::Write(REG_GPIO, (1 << DispGpioPin) | FT_Trans::Read(REG_GPIO));
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	85 85       	ldd	r24, Z+13	; 0x0d
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv+0x26>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	2a 95       	dec	r18
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <_ZN5FT_GCI16FT_Transport_SPIE9DisplayOnEv+0x22>
    1ecc:	18 2f       	mov	r17, r24
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed2:	40 e9       	ldi	r20, 0x90	; 144
    1ed4:	54 e2       	ldi	r21, 0x24	; 36
    1ed6:	60 e1       	ldi	r22, 0x10	; 16
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	10 dd       	rcall	.-1504   	; 0x18fc <_ZN16FT_Transport_SPI4ReadEm>
    1edc:	81 2b       	or	r24, r17
    1ede:	28 2f       	mov	r18, r24
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	40 e9       	ldi	r20, 0x90	; 144
    1ee6:	54 e2       	ldi	r21, 0x24	; 36
    1ee8:	60 e1       	ldi	r22, 0x10	; 16
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	97 dd       	rcall	.-1234   	; 0x1a1c <_ZN16FT_Transport_SPI5WriteEmh>
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0

}
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	08 95       	ret

00001efa <_ZN5FT_GCI16FT_Transport_SPIE7DLStartEv>:

template<class FT_Trans>
/* Special apis */
//apis for ease of usage in FT_GC
//inserts cmd_dlstart() followed by clear(1,1,1) graphics command
void FT_GC<FT_Trans>::DLStart(void) {
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <_ZN5FT_GCI16FT_Transport_SPIE7DLStartEv+0x6>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
   Cmd_DLStart();
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	ba d1       	rcall	.+884    	; 0x2282 <_ZN5FT_GCI16FT_Transport_SPIE11Cmd_DLStartEv>
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
   Clear(1, 1, 1);
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	21 e0       	ldi	r18, 0x01	; 1
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	c7 d1       	rcall	.+910    	; 0x22a8 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh>
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
}
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	08 95       	ret

00001f24 <_ZN5FT_GCI16FT_Transport_SPIE8ColorRGBEhhh>:
   return (WriteCmd(
      (32UL << 24) | ((r & 1L) << 3) | ((g & 1L) << 2) | ((b & 1L) << 1)
         | ((a & 1L) << 0)));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::ColorRGB(uint8_t red, uint8_t green,
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	29 97       	sbiw	r28, 0x09	; 9
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	6f 83       	std	Y+7, r22	; 0x07
    1f3e:	48 87       	std	Y+8, r20	; 0x08
    1f40:	29 87       	std	Y+9, r18	; 0x09
   // WriteCmd((4UL << 24) | ((red & 0xFFL) << 16) | ((green & 0xFFL) << 8) | ((blue & 0xFFL) << 0)) );
   union {
      uint32_t UUInt32;
      uint8_t A[4];
   };
   A[0] = blue;
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	89 83       	std	Y+1, r24	; 0x01
   A[1] = green;
    1f46:	88 85       	ldd	r24, Y+8	; 0x08
    1f48:	8a 83       	std	Y+2, r24	; 0x02
   A[2] = red;
    1f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
   A[3] = 4;
    1f4e:	84 e0       	ldi	r24, 0x04	; 4
    1f50:	8c 83       	std	Y+4, r24	; 0x04
   return (WriteCmd(UUInt32));
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	ab 81       	ldd	r26, Y+3	; 0x03
    1f58:	bc 81       	ldd	r27, Y+4	; 0x04
    1f5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f5e:	ac 01       	movw	r20, r24
    1f60:	bd 01       	movw	r22, r26
    1f62:	c9 01       	movw	r24, r18
    1f64:	d4 d1       	rcall	.+936    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    1f66:	29 96       	adiw	r28, 0x09	; 9
}
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	08 95       	ret

00001f78 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_TextEiihjPKc>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Swap(void) {
   return (WriteCmd(CMD_SWAP));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Text(int16_t x, int16_t y, uint8_t Font,
    1f78:	ef 92       	push	r14
    1f7a:	ff 92       	push	r15
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	2c 97       	sbiw	r28, 0x0c	; 12
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	7d 83       	std	Y+5, r23	; 0x05
    1f9a:	6c 83       	std	Y+4, r22	; 0x04
    1f9c:	5f 83       	std	Y+7, r21	; 0x07
    1f9e:	4e 83       	std	Y+6, r20	; 0x06
    1fa0:	28 87       	std	Y+8, r18	; 0x08
    1fa2:	1a 87       	std	Y+10, r17	; 0x0a
    1fa4:	09 87       	std	Y+9, r16	; 0x09
    1fa6:	fc 86       	std	Y+12, r15	; 0x0c
    1fa8:	eb 86       	std	Y+11, r14	; 0x0b
   uint16_t Options, const char *s) {
   FT_GEStatus Status;
   WriteCmd(CMD_TEXT);
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	4c e0       	ldi	r20, 0x0C	; 12
    1fb0:	5f ef       	ldi	r21, 0xFF	; 255
    1fb2:	6f ef       	ldi	r22, 0xFF	; 255
    1fb4:	7f ef       	ldi	r23, 0xFF	; 255
    1fb6:	ab d1       	rcall	.+854    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
   WriteCmd(((y & 0xFFFFL) << 16) | (x & 0xFFFFL));
    1fba:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbc:	aa 27       	eor	r26, r26
    1fbe:	97 fd       	sbrc	r25, 7
    1fc0:	a0 95       	com	r26
    1fc2:	ba 2f       	mov	r27, r26
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	33 27       	eor	r19, r19
    1fc8:	22 27       	eor	r18, r18
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fce:	aa 27       	eor	r26, r26
    1fd0:	97 fd       	sbrc	r25, 7
    1fd2:	a0 95       	com	r26
    1fd4:	ba 2f       	mov	r27, r26
    1fd6:	aa 27       	eor	r26, r26
    1fd8:	bb 27       	eor	r27, r27
    1fda:	82 2b       	or	r24, r18
    1fdc:	93 2b       	or	r25, r19
    1fde:	a4 2b       	or	r26, r20
    1fe0:	b5 2b       	or	r27, r21
    1fe2:	2a 81       	ldd	r18, Y+2	; 0x02
    1fe4:	3b 81       	ldd	r19, Y+3	; 0x03
    1fe6:	ac 01       	movw	r20, r24
    1fe8:	bd 01       	movw	r22, r26
    1fea:	c9 01       	movw	r24, r18
    1fec:	90 d1       	rcall	.+800    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
   WriteCmd(((Options & 0xFFFFL) << 16) | (Font & 0xFFFFL));
    1ff2:	cc 01       	movw	r24, r24
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	ac 01       	movw	r20, r24
    1ffa:	33 27       	eor	r19, r19
    1ffc:	22 27       	eor	r18, r18
    1ffe:	88 85       	ldd	r24, Y+8	; 0x08
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	aa 27       	eor	r26, r26
    200a:	bb 27       	eor	r27, r27
    200c:	82 2b       	or	r24, r18
    200e:	93 2b       	or	r25, r19
    2010:	a4 2b       	or	r26, r20
    2012:	b5 2b       	or	r27, r21
    2014:	2a 81       	ldd	r18, Y+2	; 0x02
    2016:	3b 81       	ldd	r19, Y+3	; 0x03
    2018:	ac 01       	movw	r20, r24
    201a:	bd 01       	movw	r22, r26
    201c:	c9 01       	movw	r24, r18
    201e:	77 d1       	rcall	.+750    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    2020:	8b 85       	ldd	r24, Y+11	; 0x0b
    2022:	9c 85       	ldd	r25, Y+12	; 0x0c
    2024:	63 d7       	rcall	.+3782   	; 0x2eec <strlen>
   Status = WriteCmd((uint8_t *) s, strlen((const char *) s) + 1);
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	cc 01       	movw	r24, r24
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2030:	7c 85       	ldd	r23, Y+12	; 0x0c
    2032:	ea 81       	ldd	r30, Y+2	; 0x02
    2034:	fb 81       	ldd	r31, Y+3	; 0x03
    2036:	9c 01       	movw	r18, r24
    2038:	ad 01       	movw	r20, r26
    203a:	cf 01       	movw	r24, r30
    203c:	a5 d1       	rcall	.+842    	; 0x2388 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm>
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	2c 96       	adiw	r28, 0x0c	; 12
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62

   return Status;
    204a:	0f be       	out	0x3f, r0	; 63
}
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	08 95       	ret

0000205c <_ZN5FT_GCI16FT_Transport_SPIE5DLEndEv>:
   Clear(1, 1, 1);
}

template<class FT_Trans>
//inserts display() gpu instruction at the end and inserts cmd_swap() command
void FT_GC<FT_Trans>::DLEnd(void) {
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	00 d0       	rcall	.+0      	; 0x2062 <_ZN5FT_GCI16FT_Transport_SPIE5DLEndEv+0x6>
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
   Display();
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	9a 81       	ldd	r25, Y+2	; 0x02
    206e:	cf d1       	rcall	.+926    	; 0x240e <_ZN5FT_GCI16FT_Transport_SPIE7DisplayEv>
    2070:	89 81       	ldd	r24, Y+1	; 0x01
   Cmd_Swap();
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	de d1       	rcall	.+956    	; 0x2432 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_SwapEv>
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
}
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	08 95       	ret

00002080 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv>:
   return FT_GE_OK;
}

template<class FT_Trans>
//flushes out all the commands to FT_GC and waits for the completion of execution
FT_GEStatus FT_GC<FT_Trans>::Finish(void) {
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	00 d0       	rcall	.+0      	; 0x2086 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x6>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x8>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9c 83       	std	Y+4, r25	; 0x04
    208e:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t ReadPrt;

   if (TrnsFlag) {
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	fc 01       	movw	r30, r24
    2096:	86 81       	ldd	r24, Z+6	; 0x06
    2098:	88 23       	and	r24, r24
    209a:	19 f0       	breq	.+6      	; 0x20a2 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x22>
      EndTransferCmd();
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	db d1       	rcall	.+950    	; 0x2458 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
   }
   FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	fc 01       	movw	r30, r24
    20a8:	20 89       	ldd	r18, Z+16	; 0x10
    20aa:	31 89       	ldd	r19, Z+17	; 0x11
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	48 ee       	ldi	r20, 0xE8	; 232
    20b2:	54 e2       	ldi	r21, 0x24	; 36
    20b4:	60 e1       	ldi	r22, 0x10	; 16
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	da dc       	rcall	.-1612   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x4c>
    20bc:	89 81       	ldd	r24, Y+1	; 0x01

   while ((ReadPrt = FT_Trans::Read16(REG_CMD_READ)) != CmdFifoWp) {
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
      if (FT_COPRO_ERROR == ReadPrt) {
    20c0:	8f 3f       	cpi	r24, 0xFF	; 255
    20c2:	ff e0       	ldi	r31, 0x0F	; 15
    20c4:	9f 07       	cpc	r25, r31
    20c6:	11 f4       	brne	.+4      	; 0x20cc <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x4c>
    20c8:	82 e3       	ldi	r24, 0x32	; 50
    20ca:	18 c0       	rjmp	.+48     	; 0x20fc <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x7c>
         return FT_GE_ERROR;
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
   if (TrnsFlag) {
      EndTransferCmd();
   }
   FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);

   while ((ReadPrt = FT_Trans::Read16(REG_CMD_READ)) != CmdFifoWp) {
    20d0:	44 ee       	ldi	r20, 0xE4	; 228
    20d2:	54 e2       	ldi	r21, 0x24	; 36
    20d4:	60 e1       	ldi	r22, 0x10	; 16
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	3b dc       	rcall	.-1930   	; 0x1950 <_ZN16FT_Transport_SPI6Read16Em>
    20da:	9a 83       	std	Y+2, r25	; 0x02
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	fc 01       	movw	r30, r24
    20e4:	80 89       	ldd	r24, Z+16	; 0x10
    20e6:	91 89       	ldd	r25, Z+17	; 0x11
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	29 81       	ldd	r18, Y+1	; 0x01
    20ec:	3a 81       	ldd	r19, Y+2	; 0x02
    20ee:	28 17       	cp	r18, r24
    20f0:	39 07       	cpc	r19, r25
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x76>
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	44 23       	and	r20, r20
    20f8:	09 f7       	brne	.-62     	; 0x20bc <_ZN5FT_GCI16FT_Transport_SPIE6FinishEv+0x3c>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
      if (FT_COPRO_ERROR == ReadPrt) {
         return FT_GE_ERROR;
      }
   }
   return FT_GE_OK;
    2100:	0f 90       	pop	r0
}
    2102:	0f 90       	pop	r0
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <_ZN5FT_GCI16FT_Transport_SPIE5ClearEv>:
FT_GEStatus FT_GC<FT_Trans>::Clear(uint8_t c, uint8_t s, uint8_t t) {
   uint8_t m = (c << 2) | (s << 1) | t;
   return (WriteCmd((38UL << 24) | m));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Clear(void) {
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	00 d0       	rcall	.+0      	; 0x2110 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEv+0x6>
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd((38UL << 24) | 7));
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	47 e0       	ldi	r20, 0x07	; 7
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	76 e2       	ldi	r23, 0x26	; 38
    2124:	f4 d0       	rcall	.+488    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    2126:	0f 90       	pop	r0
}
    2128:	0f 90       	pop	r0
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	08 95       	ret

00002130 <_ZN5FT_GCI16FT_Transport_SPIEC1Ev>:

   uint16_t CmdFifoWp, FreeSpace;	//command fifo write pointer
};
/* Api to set cs, pdn, int pin. CS pin is mandatory. If PDN and INT pins are set then gpios are initialized */
template<class FT_Trans>
FT_GC<FT_Trans>::FT_GC() {
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	00 d0       	rcall	.+0      	; 0x2136 <_ZN5FT_GCI16FT_Transport_SPIEC1Ev+0x6>
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	bd da       	rcall	.-2694   	; 0x16be <_ZN16FT_Transport_SPIC1Ev>
    2144:	89 81       	ldd	r24, Y+1	; 0x01
   /* initialize context parameters - update with the default values */
   GInit = 0;/*CSPin = FT_CS_PIN;*/
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	fc 01       	movw	r30, r24
    214a:	15 82       	std	Z+5, r1	; 0x05
    214c:	89 81       	ldd	r24, Y+1	; 0x01
   GError = FT_OK;
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	fc 01       	movw	r30, r24
    2152:	17 82       	std	Z+7, r1	; 0x07
    2154:	10 86       	std	Z+8, r1	; 0x08
    2156:	11 86       	std	Z+9, r1	; 0x09
    2158:	12 86       	std	Z+10, r1	; 0x0a
    215a:	89 81       	ldd	r24, Y+1	; 0x01
   IntPin = -1;
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	2f ef       	ldi	r18, 0xFF	; 255
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	fc 01       	movw	r30, r24
    2164:	34 87       	std	Z+12, r19	; 0x0c
    2166:	23 87       	std	Z+11, r18	; 0x0b
    2168:	89 81       	ldd	r24, Y+1	; 0x01
   CmdFifoWp = 0;
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	fc 01       	movw	r30, r24
    216e:	11 8a       	std	Z+17, r1	; 0x11
    2170:	10 8a       	std	Z+16, r1	; 0x10
    2172:	89 81       	ldd	r24, Y+1	; 0x01
   FreeSpace = FT_CMDFIFO_SIZE - 4;
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	2c ef       	ldi	r18, 0xFC	; 252
    2178:	3f e0       	ldi	r19, 0x0F	; 15
    217a:	fc 01       	movw	r30, r24
    217c:	33 8b       	std	Z+19, r19	; 0x13
    217e:	22 8b       	std	Z+18, r18	; 0x12
    2180:	89 81       	ldd	r24, Y+1	; 0x01
   DispGpioPin = FT_GPIO7;
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	27 e0       	ldi	r18, 0x07	; 7
    2186:	fc 01       	movw	r30, r24
    2188:	25 87       	std	Z+13, r18	; 0x0d
    218a:	89 81       	ldd	r24, Y+1	; 0x01
   AudioGpioPin = FT_GPIO1;
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	21 e0       	ldi	r18, 0x01	; 1
    2190:	fc 01       	movw	r30, r24
    2192:	26 87       	std	Z+14, r18	; 0x0e
    2194:	89 81       	ldd	r24, Y+1	; 0x01
   TrnsFlag = 0;
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	fc 01       	movw	r30, r24
    219a:	16 82       	std	Z+6, r1	; 0x06
    219c:	84 e2       	ldi	r24, 0x24	; 36

   //redundant call
   FT_GC<FT_Trans>::SetCSpin((volatile uint8_t *) FT_CS_PORT,
      (volatile uint8_t *) FT_CS_DDR, FT_CS_PIN);
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	fc 01       	movw	r30, r24
    21a2:	80 81       	ld	r24, Z
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	ac 01       	movw	r20, r24
    21aa:	85 e2       	ldi	r24, 0x25	; 37
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	fc 01       	movw	r30, r24
    21b0:	80 81       	ld	r24, Z
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	bc 01       	movw	r22, r24
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	20 e0       	ldi	r18, 0x00	; 0
   DispGpioPin = FT_GPIO7;
   AudioGpioPin = FT_GPIO1;
   TrnsFlag = 0;

   //redundant call
   FT_GC<FT_Trans>::SetCSpin((volatile uint8_t *) FT_CS_PORT,
    21be:	8b da       	rcall	.-2794   	; 0x16d6 <_ZN16FT_Transport_SPI8SetCSpinEPVhS1_h>
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
      (volatile uint8_t *) FT_CS_DDR, FT_CS_PIN);
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <_ZN5FT_GCI16FT_Transport_SPIED1Ev>:

template<class FT_Trans>
FT_GC<FT_Trans>::~FT_GC() {
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <_ZN5FT_GCI16FT_Transport_SPIED1Ev+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
}	//do nothing
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	a9 da       	rcall	.-2734   	; 0x1730 <_ZN16FT_Transport_SPID1Ev>
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	08 95       	ret

000021e8 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj>:

/* API to initialize the display wrt input configuration */
template<class FT_Trans>
FT_Status FT_GC<FT_Trans>::Init(uint8_t ResType, uint16_t options1 = 0) {
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x8>
    21f0:	1f 92       	push	r1
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	6b 83       	std	Y+3, r22	; 0x03
    21fc:	5d 83       	std	Y+5, r21	; 0x05
    21fe:	4c 83       	std	Y+4, r20	; 0x04
   /* assign the pdn */
   //pinMode(PDNPin, OUTPUT);
   //digitalWrite(PDNPin, HIGH);    	
   /*attempt to initialize interrupt pin*/
   if (IntPin != -1) {
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	fc 01       	movw	r30, r24
    2206:	83 85       	ldd	r24, Z+11	; 0x0b
    2208:	94 85       	ldd	r25, Z+12	; 0x0c
    220a:	8f 3f       	cpi	r24, 0xFF	; 255
    220c:	ff ef       	ldi	r31, 0xFF	; 255
    220e:	9f 07       	cpc	r25, r31
    2210:	49 f0       	breq	.+18     	; 0x2224 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x3c>
      //pinMode(IntPin, INPUT);
      FT_INT_DDR &= ~FT_INT_PIN;
    2212:	8d e2       	ldi	r24, 0x2D	; 45
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	2d e2       	ldi	r18, 0x2D	; 45
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	f9 01       	movw	r30, r18
    221c:	20 81       	ld	r18, Z
    221e:	28 7f       	andi	r18, 0xF8	; 248
    2220:	fc 01       	movw	r30, r24
    2222:	20 83       	st	Z, r18
   }

   /* Initialize SPI channel */
   FT_Trans::Init();
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	8f da       	rcall	.-2786   	; 0x1748 <_ZN16FT_Transport_SPI4InitEv>
    222a:	89 81       	ldd	r24, Y+1	; 0x01

   /* Bootup of graphics controller */
   Reset();
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	3d d1       	rcall	.+634    	; 0x24aa <_ZN5FT_GCI16FT_Transport_SPIE5ResetEv>
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	9a 81       	ldd	r25, Y+2	; 0x02
   /* Set the display configurations followed by external clock set, spi clock change wrt FT80x */
   DisplayConfigExternalClock(ResType);
    2234:	6b 81       	ldd	r22, Y+3	; 0x03
    2236:	48 d1       	rcall	.+656    	; 0x24c8 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh>
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	9d 81       	ldd	r25, Y+5	; 0x05
    223c:	81 70       	andi	r24, 0x01	; 1

   if ((options1 & FT_INTERNAL_CLOCK_SOURCE) == FT_INTERNAL_CLOCK_SOURCE) {
    223e:	99 27       	eor	r25, r25
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	41 f0       	breq	.+16     	; 0x2254 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x6c>
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	48 e4       	ldi	r20, 0x48	; 72
      /* Set to use internal clock source */
      HostCommand(FT_CLKINT);
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	b3 d2       	rcall	.+1382   	; 0x27b8 <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>
    2252:	07 c0       	rjmp	.+14     	; 0x2262 <_ZN5FT_GCI16FT_Transport_SPIE4InitEhj+0x7a>
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	44 e4       	ldi	r20, 0x44	; 68
    225a:	50 e0       	ldi	r21, 0x00	; 0
   } else {
      /* Set to use external clock */
      HostCommand(FT_CLKEXT);
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	ab d2       	rcall	.+1366   	; 0x27b8 <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	40 e4       	ldi	r20, 0x40	; 64
    2268:	5f e6       	ldi	r21, 0x6F	; 111
    226a:	60 e4       	ldi	r22, 0x40	; 64
   }

   /* change the clock to maximum SPI operating frequency */
   FT_Trans::ChangeClock(FT_SPI_CLK_FREQ_MAX); //change the clock to normal operating frequency - harcoded wrt due	
    226c:	71 e0       	ldi	r23, 0x01	; 1
    226e:	a5 da       	rcall	.-2742   	; 0x17ba <_ZN16FT_Transport_SPI11ChangeClockEm>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0

   return FT_OK;
    227c:	df 91       	pop	r29
}
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <_ZN5FT_GCI16FT_Transport_SPIE11Cmd_DLStartEv>:
   Status = WriteCmd(Val);

   return Status;
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_DLStart(void) {
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	00 d0       	rcall	.+0      	; 0x2288 <_ZN5FT_GCI16FT_Transport_SPIE11Cmd_DLStartEv+0x6>
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd(CMD_DLSTART));
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	5f ef       	ldi	r21, 0xFF	; 255
    2298:	6f ef       	ldi	r22, 0xFF	; 255
    229a:	7f ef       	ldi	r23, 0xFF	; 255
    229c:	38 d0       	rcall	.+112    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    229e:	0f 90       	pop	r0
}
    22a0:	0f 90       	pop	r0
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::ClearColorRGB(uint32_t rgb) {
   return (WriteCmd((2UL << 24) | (rgb & 0xFFFFFFL)));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Clear(uint8_t c, uint8_t s, uint8_t t) {
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh+0x6>
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh+0x8>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <_ZN5FT_GCI16FT_Transport_SPIE5ClearEhhh+0xa>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	9b 83       	std	Y+3, r25	; 0x03
    22b8:	8a 83       	std	Y+2, r24	; 0x02
    22ba:	6c 83       	std	Y+4, r22	; 0x04
    22bc:	4d 83       	std	Y+5, r20	; 0x05
    22be:	2e 83       	std	Y+6, r18	; 0x06
   uint8_t m = (c << 2) | (s << 1) | t;
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	28 2f       	mov	r18, r24
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	92 2f       	mov	r25, r18
    22dc:	98 2b       	or	r25, r24
    22de:	8e 81       	ldd	r24, Y+6	; 0x06
    22e0:	89 2b       	or	r24, r25
    22e2:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd((38UL << 24) | m));
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e0       	ldi	r26, 0x00	; 0
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	b6 62       	ori	r27, 0x26	; 38
    22f0:	2a 81       	ldd	r18, Y+2	; 0x02
    22f2:	3b 81       	ldd	r19, Y+3	; 0x03
    22f4:	ac 01       	movw	r20, r24
    22f6:	bd 01       	movw	r22, r26
    22f8:	c9 01       	movw	r24, r18
    22fa:	09 d0       	rcall	.+18     	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    22fc:	26 96       	adiw	r28, 0x06	; 6
}
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	08 95       	ret

0000230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>:
   FT_Trans::Write32(REG_CMD_WRITE, CmdFifoWp);
   TrnsFlag = 0;
}
template<class FT_Trans>

FT_GEStatus FT_GC<FT_Trans>::WriteCmd(uint32_t Cmd) {
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	27 97       	sbiw	r28, 0x07	; 7
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	9b 83       	std	Y+3, r25	; 0x03
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	4c 83       	std	Y+4, r20	; 0x04
    2328:	5d 83       	std	Y+5, r21	; 0x05
    232a:	6e 83       	std	Y+6, r22	; 0x06
    232c:	7f 83       	std	Y+7, r23	; 0x07
   StartTransferCmd();
   Status = TransferCmd(Cmd);
   if(0 == TrnsFlag)
   EndTransferCmd();
#else
   if (0 == TrnsFlag) {
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	fc 01       	movw	r30, r24
    2334:	86 81       	ldd	r24, Z+6	; 0x06
    2336:	88 23       	and	r24, r24
    2338:	91 f4       	brne	.+36     	; 0x235e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm+0x50>
      StartTransferCmd();
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	9b 81       	ldd	r25, Y+3	; 0x03
    233e:	70 d2       	rcall	.+1248   	; 0x2820 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
      Status = TransferCmd(Cmd);
    2342:	9d 81       	ldd	r25, Y+5	; 0x05
    2344:	ae 81       	ldd	r26, Y+6	; 0x06
    2346:	bf 81       	ldd	r27, Y+7	; 0x07
    2348:	2a 81       	ldd	r18, Y+2	; 0x02
    234a:	3b 81       	ldd	r19, Y+3	; 0x03
    234c:	ac 01       	movw	r20, r24
    234e:	bd 01       	movw	r22, r26
    2350:	c9 01       	movw	r24, r18
    2352:	89 d2       	rcall	.+1298   	; 0x2866 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm>
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
      EndTransferCmd();
    235a:	7e d0       	rcall	.+252    	; 0x2458 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    235c:	0b c0       	rjmp	.+22     	; 0x2374 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm+0x66>
    235e:	8c 81       	ldd	r24, Y+4	; 0x04
    2360:	9d 81       	ldd	r25, Y+5	; 0x05
    2362:	ae 81       	ldd	r26, Y+6	; 0x06
   } else {
      Status = TransferCmd(Cmd);
    2364:	bf 81       	ldd	r27, Y+7	; 0x07
    2366:	2a 81       	ldd	r18, Y+2	; 0x02
    2368:	3b 81       	ldd	r19, Y+3	; 0x03
    236a:	ac 01       	movw	r20, r24
    236c:	bd 01       	movw	r22, r26
    236e:	c9 01       	movw	r24, r18
    2370:	7a d2       	rcall	.+1268   	; 0x2866 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm>
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	27 96       	adiw	r28, 0x07	; 7
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
   }

#endif
   return Status;
    237c:	de bf       	out	0x3e, r29	; 62
}
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret

00002388 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm>:
 TransferCmd(Str,strlen(Str)+1);
 EndTransferCmd();
 }*/
template<class FT_Trans>
//api to send N bytes to command buffer, this api pads with 0's at the end 
FT_GEStatus FT_GC<FT_Trans>::WriteCmd(uint8_t *Src, uint32_t NBytes) {
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	29 97       	sbiw	r28, 0x09	; 9
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	9b 83       	std	Y+3, r25	; 0x03
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	7d 83       	std	Y+5, r23	; 0x05
    23a2:	6c 83       	std	Y+4, r22	; 0x04
    23a4:	2e 83       	std	Y+6, r18	; 0x06
    23a6:	3f 83       	std	Y+7, r19	; 0x07
    23a8:	48 87       	std	Y+8, r20	; 0x08
    23aa:	59 87       	std	Y+9, r21	; 0x09
   FT_GEStatus Status;
   if (0 == TrnsFlag) {
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	fc 01       	movw	r30, r24
    23b2:	86 81       	ldd	r24, Z+6	; 0x06
    23b4:	88 23       	and	r24, r24
    23b6:	a1 f4       	brne	.+40     	; 0x23e0 <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm+0x58>
      StartTransferCmd();
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	31 d2       	rcall	.+1122   	; 0x2820 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    23be:	8e 81       	ldd	r24, Y+6	; 0x06
      Status = TransferCmd(Src, NBytes);
    23c0:	9f 81       	ldd	r25, Y+7	; 0x07
    23c2:	a8 85       	ldd	r26, Y+8	; 0x08
    23c4:	b9 85       	ldd	r27, Y+9	; 0x09
    23c6:	6c 81       	ldd	r22, Y+4	; 0x04
    23c8:	7d 81       	ldd	r23, Y+5	; 0x05
    23ca:	ea 81       	ldd	r30, Y+2	; 0x02
    23cc:	fb 81       	ldd	r31, Y+3	; 0x03
    23ce:	9c 01       	movw	r18, r24
    23d0:	ad 01       	movw	r20, r26
    23d2:	cf 01       	movw	r24, r30
    23d4:	99 d2       	rcall	.+1330   	; 0x2908 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm>
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
      EndTransferCmd();  //here transflag is made to 0
    23dc:	3d d0       	rcall	.+122    	; 0x2458 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    23de:	0d c0       	rjmp	.+26     	; 0x23fa <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEPhm+0x72>
    23e0:	8e 81       	ldd	r24, Y+6	; 0x06
    23e2:	9f 81       	ldd	r25, Y+7	; 0x07
    23e4:	a8 85       	ldd	r26, Y+8	; 0x08
   } else
      Status = TransferCmd(Src, NBytes);
    23e6:	b9 85       	ldd	r27, Y+9	; 0x09
    23e8:	6c 81       	ldd	r22, Y+4	; 0x04
    23ea:	7d 81       	ldd	r23, Y+5	; 0x05
    23ec:	ea 81       	ldd	r30, Y+2	; 0x02
    23ee:	fb 81       	ldd	r31, Y+3	; 0x03
    23f0:	9c 01       	movw	r18, r24
    23f2:	ad 01       	movw	r20, r26
    23f4:	cf 01       	movw	r24, r30
    23f6:	88 d2       	rcall	.+1296   	; 0x2908 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm>
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	29 96       	adiw	r28, 0x09	; 9
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli

   return Status;
    2402:	de bf       	out	0x3e, r29	; 62
}
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <_ZN5FT_GCI16FT_Transport_SPIE7DisplayEv>:
   A[2] = red;
   A[3] = 4;
   return (WriteCmd(UUInt32));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Display(void) {
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	00 d0       	rcall	.+0      	; 0x2414 <_ZN5FT_GCI16FT_Transport_SPIE7DisplayEv+0x6>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd((0UL << 24)));
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	9a 81       	ldd	r25, Y+2	; 0x02
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	ba 01       	movw	r22, r20
    2426:	73 df       	rcall	.-282    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    2428:	0f 90       	pop	r0
}
    242a:	0f 90       	pop	r0
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_SwapEv>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Stop(void) {
   return (WriteCmd(CMD_STOP));
}
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::Cmd_Swap(void) {
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	00 d0       	rcall	.+0      	; 0x2438 <_ZN5FT_GCI16FT_Transport_SPIE8Cmd_SwapEv+0x6>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
   return (WriteCmd(CMD_SWAP));
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	41 e0       	ldi	r20, 0x01	; 1
    2446:	5f ef       	ldi	r21, 0xFF	; 255
    2448:	6f ef       	ldi	r22, 0xFF	; 255
    244a:	7f ef       	ldi	r23, 0xFF	; 255
    244c:	60 df       	rcall	.-320    	; 0x230e <_ZN5FT_GCI16FT_Transport_SPIE8WriteCmdEm>
    244e:	0f 90       	pop	r0
}
    2450:	0f 90       	pop	r0
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>:
   }
   return FT_GE_OK;
}
template<class FT_Trans>
//end the command transfer
void FT_GC<FT_Trans>::EndTransferCmd(void) {
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	00 d0       	rcall	.+0      	; 0x2462 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv+0xa>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
   FT_Trans::EndTransfer();
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	c8 db       	rcall	.-2160   	; 0x1c00 <_ZN16FT_Transport_SPI11EndTransferEv>
    2470:	89 81       	ldd	r24, Y+1	; 0x01
   //update the write pointer of fifo
   FT_Trans::Write32(REG_CMD_WRITE, CmdFifoWp);
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	fc 01       	movw	r30, r24
    2476:	80 89       	ldd	r24, Z+16	; 0x10
    2478:	91 89       	ldd	r25, Z+17	; 0x11
    247a:	cc 01       	movw	r24, r24
    247c:	a0 e0       	ldi	r26, 0x00	; 0
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e9 81       	ldd	r30, Y+1	; 0x01
    2482:	fa 81       	ldd	r31, Y+2	; 0x02
    2484:	8c 01       	movw	r16, r24
    2486:	9d 01       	movw	r18, r26
    2488:	48 ee       	ldi	r20, 0xE8	; 232
    248a:	54 e2       	ldi	r21, 0x24	; 36
    248c:	60 e1       	ldi	r22, 0x10	; 16
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	cf 01       	movw	r24, r30
    2492:	1d db       	rcall	.-2502   	; 0x1ace <_ZN16FT_Transport_SPI7Write32Emm>
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
   TrnsFlag = 0;
    2498:	fc 01       	movw	r30, r24
    249a:	16 82       	std	Z+6, r1	; 0x06
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
}
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	08 95       	ret

000024aa <_ZN5FT_GCI16FT_Transport_SPIE5ResetEv>:
   FT_Trans::Write(REG_CPURESET, FT_RESET_RELEASE_COPROCESSOR);
   /* ideally delay of 25ms is required for audio engine to playback mute sound to avoid pop sound */
}
template<class FT_Trans>
//api to reset whole FT_GC via pdn - if pdn is not assigned then reset is not successful
void FT_GC<FT_Trans>::Reset(void) {
    24aa:	cf 93       	push	r28
    24ac:	df 93       	push	r29
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <_ZN5FT_GCI16FT_Transport_SPIE5ResetEv+0x6>
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	9a 83       	std	Y+2, r25	; 0x02
    24b6:	89 83       	std	Y+1, r24	; 0x01

   /* Reset of whole graphics controller */
   /* send active command to enable SPI, followed by download of default DL into graphics engine, followed by SPI settings wrt internal clock requirements during bootup stage */
   ActiveInternalClock();
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	6d d3       	rcall	.+1754   	; 0x2b98 <_ZN5FT_GCI16FT_Transport_SPIE19ActiveInternalClockEv>
    24be:	0f 90       	pop	r0
}
    24c0:	0f 90       	pop	r0
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	08 95       	ret

000024c8 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh>:
   CmdFifoWp = 0;
   FreeSpace = FT_CMDFIFO_SIZE - 4;
}
template<class FT_Trans>
/* API to configure the display and set to external clock */
void FT_GC<FT_Trans>::DisplayConfigExternalClock(uint8_t ResType) {
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x6>
    24ce:	1f 92       	push	r1
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	6b 83       	std	Y+3, r22	; 0x03
   /* Presently supporting two types of resolutions, qvga and wqvga */
   if (ResType == FT_DISPLAY_QVGA_320x240) {
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	88 23       	and	r24, r24
    24de:	09 f0       	breq	.+2      	; 0x24e2 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x1a>
    24e0:	76 c0       	rjmp	.+236    	; 0x25ce <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x106>
      FT_Trans::Write16(REG_VSYNC0, FT_DISPLAY_VSYNC0_QVGA);
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	48 e4       	ldi	r20, 0x48	; 72
    24ec:	54 e2       	ldi	r21, 0x24	; 36
    24ee:	60 e1       	ldi	r22, 0x10	; 16
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	bd da       	rcall	.-2694   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_VSYNC1, FT_DISPLAY_VSYNC1_QVGA);
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	22 e0       	ldi	r18, 0x02	; 2
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4c e4       	ldi	r20, 0x4C	; 76
    24fe:	54 e2       	ldi	r21, 0x24	; 36
    2500:	60 e1       	ldi	r22, 0x10	; 16
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	b4 da       	rcall	.-2712   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_VOFFSET, FT_DISPLAY_VOFFSET_QVGA);
    250a:	2d e0       	ldi	r18, 0x0D	; 13
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e4       	ldi	r20, 0x40	; 64
    2510:	54 e2       	ldi	r21, 0x24	; 36
    2512:	60 e1       	ldi	r22, 0x10	; 16
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	ab da       	rcall	.-2730   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	27 e0       	ldi	r18, 0x07	; 7
      FT_Trans::Write16(REG_VCYCLE, FT_DISPLAY_VCYCLE_QVGA);
    251e:	31 e0       	ldi	r19, 0x01	; 1
    2520:	4c e3       	ldi	r20, 0x3C	; 60
    2522:	54 e2       	ldi	r21, 0x24	; 36
    2524:	60 e1       	ldi	r22, 0x10	; 16
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	a2 da       	rcall	.-2748   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
      FT_Trans::Write16(REG_HSYNC0, FT_DISPLAY_HSYNC0_QVGA);
    2532:	44 e3       	ldi	r20, 0x34	; 52
    2534:	54 e2       	ldi	r21, 0x24	; 36
    2536:	60 e1       	ldi	r22, 0x10	; 16
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	99 da       	rcall	.-2766   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	2a e0       	ldi	r18, 0x0A	; 10
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	48 e3       	ldi	r20, 0x38	; 56
      FT_Trans::Write16(REG_HSYNC1, FT_DISPLAY_HSYNC1_QVGA);
    2546:	54 e2       	ldi	r21, 0x24	; 36
    2548:	60 e1       	ldi	r22, 0x10	; 16
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	90 da       	rcall	.-2784   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	26 e4       	ldi	r18, 0x46	; 70
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4c e2       	ldi	r20, 0x2C	; 44
    2558:	54 e2       	ldi	r21, 0x24	; 36
      FT_Trans::Write16(REG_HOFFSET, FT_DISPLAY_HOFFSET_QVGA);
    255a:	60 e1       	ldi	r22, 0x10	; 16
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	87 da       	rcall	.-2802   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	28 e9       	ldi	r18, 0x98	; 152
    2566:	31 e0       	ldi	r19, 0x01	; 1
    2568:	48 e2       	ldi	r20, 0x28	; 40
    256a:	54 e2       	ldi	r21, 0x24	; 36
    256c:	60 e1       	ldi	r22, 0x10	; 16
      FT_Trans::Write16(REG_HCYCLE, FT_DISPLAY_HCYCLE_QVGA);
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	7e da       	rcall	.-2820   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	20 e4       	ldi	r18, 0x40	; 64
    2578:	31 e0       	ldi	r19, 0x01	; 1
    257a:	40 e3       	ldi	r20, 0x30	; 48
    257c:	54 e2       	ldi	r21, 0x24	; 36
    257e:	60 e1       	ldi	r22, 0x10	; 16
    2580:	70 e0       	ldi	r23, 0x00	; 0
      FT_Trans::Write16(REG_HSIZE, FT_DISPLAY_HSIZE_QVGA);
    2582:	75 da       	rcall	.-2838   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	20 ef       	ldi	r18, 0xF0	; 240
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	44 e4       	ldi	r20, 0x44	; 68
    258e:	54 e2       	ldi	r21, 0x24	; 36
    2590:	60 e1       	ldi	r22, 0x10	; 16
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	6c da       	rcall	.-2856   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
      FT_Trans::Write16(REG_VSIZE, FT_DISPLAY_VSIZE_QVGA);
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	48 e6       	ldi	r20, 0x68	; 104
    25a0:	54 e2       	ldi	r21, 0x24	; 36
    25a2:	60 e1       	ldi	r22, 0x10	; 16
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	63 da       	rcall	.-2874   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_PCLK_POL, FT_DISPLAY_PCLKPOL_QVGA);
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	22 e0       	ldi	r18, 0x02	; 2
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e6       	ldi	r20, 0x60	; 96
    25b2:	54 e2       	ldi	r21, 0x24	; 36
    25b4:	60 e1       	ldi	r22, 0x10	; 16
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	5a da       	rcall	.-2892   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_SWIZZLE, FT_DISPLAY_SWIZZLE_QVGA);
    25be:	28 e0       	ldi	r18, 0x08	; 8
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4c e6       	ldi	r20, 0x6C	; 108
    25c4:	54 e2       	ldi	r21, 0x24	; 36
    25c6:	60 e1       	ldi	r22, 0x10	; 16
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	51 da       	rcall	.-2910   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    25cc:	ef c0       	rjmp	.+478    	; 0x27ac <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x2e4>
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	81 30       	cpi	r24, 0x01	; 1
      /* after configuring display parameters, configure pclk */
      FT_Trans::Write16(REG_PCLK, FT_DISPLAY_PCLK_QVGA);
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x10e>
    25d4:	76 c0       	rjmp	.+236    	; 0x26c2 <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x1fa>
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	48 e4       	ldi	r20, 0x48	; 72
    25e0:	54 e2       	ldi	r21, 0x24	; 36
    25e2:	60 e1       	ldi	r22, 0x10	; 16
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	43 da       	rcall	.-2938   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
   } else if (ResType == FT_DISPLAY_WQVGA_480x272) {
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	2a e0       	ldi	r18, 0x0A	; 10
    25ee:	30 e0       	ldi	r19, 0x00	; 0
      FT_Trans::Write16(REG_VSYNC0, FT_DISPLAY_VSYNC0_WQVGA);
    25f0:	4c e4       	ldi	r20, 0x4C	; 76
    25f2:	54 e2       	ldi	r21, 0x24	; 36
    25f4:	60 e1       	ldi	r22, 0x10	; 16
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	3a da       	rcall	.-2956   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	2c e0       	ldi	r18, 0x0C	; 12
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e4       	ldi	r20, 0x40	; 64
      FT_Trans::Write16(REG_VSYNC1, FT_DISPLAY_VSYNC1_WQVGA);
    2604:	54 e2       	ldi	r21, 0x24	; 36
    2606:	60 e1       	ldi	r22, 0x10	; 16
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	31 da       	rcall	.-2974   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	24 e2       	ldi	r18, 0x24	; 36
    2612:	31 e0       	ldi	r19, 0x01	; 1
    2614:	4c e3       	ldi	r20, 0x3C	; 60
    2616:	54 e2       	ldi	r21, 0x24	; 36
      FT_Trans::Write16(REG_VOFFSET, FT_DISPLAY_VOFFSET_WQVGA);
    2618:	60 e1       	ldi	r22, 0x10	; 16
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	28 da       	rcall	.-2992   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	9a 81       	ldd	r25, Y+2	; 0x02
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	44 e3       	ldi	r20, 0x34	; 52
    2628:	54 e2       	ldi	r21, 0x24	; 36
    262a:	60 e1       	ldi	r22, 0x10	; 16
      FT_Trans::Write16(REG_VCYCLE, FT_DISPLAY_VCYCLE_WQVGA);
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	1f da       	rcall	.-3010   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	29 e2       	ldi	r18, 0x29	; 41
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	48 e3       	ldi	r20, 0x38	; 56
    263a:	54 e2       	ldi	r21, 0x24	; 36
    263c:	60 e1       	ldi	r22, 0x10	; 16
    263e:	70 e0       	ldi	r23, 0x00	; 0
      FT_Trans::Write16(REG_HSYNC0, FT_DISPLAY_HSYNC0_WQVGA);
    2640:	16 da       	rcall	.-3028   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	2b e2       	ldi	r18, 0x2B	; 43
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4c e2       	ldi	r20, 0x2C	; 44
    264c:	54 e2       	ldi	r21, 0x24	; 36
    264e:	60 e1       	ldi	r22, 0x10	; 16
    2650:	70 e0       	ldi	r23, 0x00	; 0
    2652:	0d da       	rcall	.-3046   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
      FT_Trans::Write16(REG_HSYNC1, FT_DISPLAY_HSYNC1_WQVGA);
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	24 e2       	ldi	r18, 0x24	; 36
    265a:	32 e0       	ldi	r19, 0x02	; 2
    265c:	48 e2       	ldi	r20, 0x28	; 40
    265e:	54 e2       	ldi	r21, 0x24	; 36
    2660:	60 e1       	ldi	r22, 0x10	; 16
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	04 da       	rcall	.-3064   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2666:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_HOFFSET, FT_DISPLAY_HOFFSET_WQVGA);
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	20 ee       	ldi	r18, 0xE0	; 224
    266c:	31 e0       	ldi	r19, 0x01	; 1
    266e:	40 e3       	ldi	r20, 0x30	; 48
    2670:	54 e2       	ldi	r21, 0x24	; 36
    2672:	60 e1       	ldi	r22, 0x10	; 16
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	fb d9       	rcall	.-3082   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_HCYCLE, FT_DISPLAY_HCYCLE_WQVGA);
    267c:	20 e1       	ldi	r18, 0x10	; 16
    267e:	31 e0       	ldi	r19, 0x01	; 1
    2680:	44 e4       	ldi	r20, 0x44	; 68
    2682:	54 e2       	ldi	r21, 0x24	; 36
    2684:	60 e1       	ldi	r22, 0x10	; 16
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	f2 d9       	rcall	.-3100   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	21 e0       	ldi	r18, 0x01	; 1
      FT_Trans::Write16(REG_HSIZE, FT_DISPLAY_HSIZE_WQVGA);
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	48 e6       	ldi	r20, 0x68	; 104
    2694:	54 e2       	ldi	r21, 0x24	; 36
    2696:	60 e1       	ldi	r22, 0x10	; 16
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	e9 d9       	rcall	.-3118   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
      FT_Trans::Write16(REG_VSIZE, FT_DISPLAY_VSIZE_WQVGA);
    26a4:	40 e6       	ldi	r20, 0x60	; 96
    26a6:	54 e2       	ldi	r21, 0x24	; 36
    26a8:	60 e1       	ldi	r22, 0x10	; 16
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	e0 d9       	rcall	.-3136   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	25 e0       	ldi	r18, 0x05	; 5
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4c e6       	ldi	r20, 0x6C	; 108
      FT_Trans::Write16(REG_PCLK_POL, FT_DISPLAY_PCLKPOL_WQVGA);
    26b8:	54 e2       	ldi	r21, 0x24	; 36
    26ba:	60 e1       	ldi	r22, 0x10	; 16
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	d7 d9       	rcall	.-3154   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    26c0:	75 c0       	rjmp	.+234    	; 0x27ac <_ZN5FT_GCI16FT_Transport_SPIE26DisplayConfigExternalClockEh+0x2e4>
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	9a 81       	ldd	r25, Y+2	; 0x02
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	48 e4       	ldi	r20, 0x48	; 72
      FT_Trans::Write16(REG_SWIZZLE, FT_DISPLAY_SWIZZLE_WQVGA);
    26cc:	54 e2       	ldi	r21, 0x24	; 36
    26ce:	60 e1       	ldi	r22, 0x10	; 16
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	cd d9       	rcall	.-3174   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	2a e0       	ldi	r18, 0x0A	; 10
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4c e4       	ldi	r20, 0x4C	; 76
    26de:	54 e2       	ldi	r21, 0x24	; 36
      /* after configuring display parameters, configure pclk */
      FT_Trans::Write16(REG_PCLK, FT_DISPLAY_PCLK_WQVGA);
    26e0:	60 e1       	ldi	r22, 0x10	; 16
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	c4 d9       	rcall	.-3192   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	2c e0       	ldi	r18, 0x0C	; 12
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e4       	ldi	r20, 0x40	; 64
    26f0:	54 e2       	ldi	r21, 0x24	; 36
    26f2:	60 e1       	ldi	r22, 0x10	; 16
    26f4:	70 e0       	ldi	r23, 0x00	; 0
   } else {
      FT_Trans::Write16(REG_VSYNC0, FT_DISPLAY_VSYNC0);
    26f6:	bb d9       	rcall	.-3210   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	24 e2       	ldi	r18, 0x24	; 36
    26fe:	31 e0       	ldi	r19, 0x01	; 1
    2700:	4c e3       	ldi	r20, 0x3C	; 60
    2702:	54 e2       	ldi	r21, 0x24	; 36
    2704:	60 e1       	ldi	r22, 0x10	; 16
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	b2 d9       	rcall	.-3228   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
      FT_Trans::Write16(REG_VSYNC1, FT_DISPLAY_VSYNC1);
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	44 e3       	ldi	r20, 0x34	; 52
    2714:	54 e2       	ldi	r21, 0x24	; 36
    2716:	60 e1       	ldi	r22, 0x10	; 16
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	a9 d9       	rcall	.-3246   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    271c:	89 81       	ldd	r24, Y+1	; 0x01
      FT_Trans::Write16(REG_VOFFSET, FT_DISPLAY_VOFFSET);
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	29 e2       	ldi	r18, 0x29	; 41
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	48 e3       	ldi	r20, 0x38	; 56
    2726:	54 e2       	ldi	r21, 0x24	; 36
    2728:	60 e1       	ldi	r22, 0x10	; 16
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	a0 d9       	rcall	.-3264   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
      FT_Trans::Write16(REG_VCYCLE, FT_DISPLAY_VCYCLE);
    2732:	2b e2       	ldi	r18, 0x2B	; 43
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4c e2       	ldi	r20, 0x2C	; 44
    2738:	54 e2       	ldi	r21, 0x24	; 36
    273a:	60 e1       	ldi	r22, 0x10	; 16
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	97 d9       	rcall	.-3282   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	24 e2       	ldi	r18, 0x24	; 36
      FT_Trans::Write16(REG_HSYNC0, FT_DISPLAY_HSYNC0);
    2746:	32 e0       	ldi	r19, 0x02	; 2
    2748:	48 e2       	ldi	r20, 0x28	; 40
    274a:	54 e2       	ldi	r21, 0x24	; 36
    274c:	60 e1       	ldi	r22, 0x10	; 16
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	8e d9       	rcall	.-3300   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	20 ee       	ldi	r18, 0xE0	; 224
    2758:	31 e0       	ldi	r19, 0x01	; 1
      FT_Trans::Write16(REG_HSYNC1, FT_DISPLAY_HSYNC1);
    275a:	40 e3       	ldi	r20, 0x30	; 48
    275c:	54 e2       	ldi	r21, 0x24	; 36
    275e:	60 e1       	ldi	r22, 0x10	; 16
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	85 d9       	rcall	.-3318   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	20 e1       	ldi	r18, 0x10	; 16
    276a:	31 e0       	ldi	r19, 0x01	; 1
    276c:	44 e4       	ldi	r20, 0x44	; 68
      FT_Trans::Write16(REG_HOFFSET, FT_DISPLAY_HOFFSET);
    276e:	54 e2       	ldi	r21, 0x24	; 36
    2770:	60 e1       	ldi	r22, 0x10	; 16
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	7c d9       	rcall	.-3336   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	21 e0       	ldi	r18, 0x01	; 1
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	48 e6       	ldi	r20, 0x68	; 104
    2780:	54 e2       	ldi	r21, 0x24	; 36
      FT_Trans::Write16(REG_HCYCLE, FT_DISPLAY_HCYCLE);
    2782:	60 e1       	ldi	r22, 0x10	; 16
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	73 d9       	rcall	.-3354   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e6       	ldi	r20, 0x60	; 96
    2792:	54 e2       	ldi	r21, 0x24	; 36
    2794:	60 e1       	ldi	r22, 0x10	; 16
      FT_Trans::Write16(REG_HSIZE, FT_DISPLAY_HSIZE);
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	6a d9       	rcall	.-3372   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	25 e0       	ldi	r18, 0x05	; 5
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4c e6       	ldi	r20, 0x6C	; 108
    27a4:	54 e2       	ldi	r21, 0x24	; 36
    27a6:	60 e1       	ldi	r22, 0x10	; 16
    27a8:	70 e0       	ldi	r23, 0x00	; 0
      FT_Trans::Write16(REG_VSIZE, FT_DISPLAY_VSIZE);
    27aa:	61 d9       	rcall	.-3390   	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	08 95       	ret

000027b8 <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>:
   *ptr = FT_Trans::Read32(REG_TRACKER);
}

template<class FT_Trans>
/* APIS related to power modes */
void FT_GC<FT_Trans>::HostCommand(uint32_t HostCommand) {
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	2a 97       	sbiw	r28, 0x0a	; 10
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	4f 83       	std	Y+7, r20	; 0x07
    27d2:	58 87       	std	Y+8, r21	; 0x08
    27d4:	69 87       	std	Y+9, r22	; 0x09
    27d6:	7a 87       	std	Y+10, r23	; 0x0a
   uint32_t Addr;
   /* construct host command and send to graphics controller */
   Addr = HostCommand << 16;
    27d8:	8f 81       	ldd	r24, Y+7	; 0x07
    27da:	98 85       	ldd	r25, Y+8	; 0x08
    27dc:	a9 85       	ldd	r26, Y+9	; 0x09
    27de:	ba 85       	ldd	r27, Y+10	; 0x0a
    27e0:	dc 01       	movw	r26, r24
    27e2:	99 27       	eor	r25, r25
    27e4:	88 27       	eor	r24, r24
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	ab 83       	std	Y+3, r26	; 0x03
    27ec:	bc 83       	std	Y+4, r27	; 0x04
   FT_Trans::Read(Addr);  //ideally sending 3 bytes is sufficient
    27ee:	2d 81       	ldd	r18, Y+5	; 0x05
    27f0:	3e 81       	ldd	r19, Y+6	; 0x06
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	ab 81       	ldd	r26, Y+3	; 0x03
    27f8:	bc 81       	ldd	r27, Y+4	; 0x04
    27fa:	ac 01       	movw	r20, r24
    27fc:	bd 01       	movw	r22, r26
    27fe:	c9 01       	movw	r24, r18
    2800:	7d d8       	rcall	.-3846   	; 0x18fc <_ZN16FT_Transport_SPI4ReadEm>
    2802:	64 e1       	ldi	r22, 0x14	; 20
   delay(20);  //worst scenario
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <delay>
    280e:	2a 96       	adiw	r28, 0x0a	; 10
}
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	08 95       	ret

00002820 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>:
   return FT_GE_OK;
}
template<class FT_Trans>

//assert CSpin and send write command
FT_GEStatus FT_GC<FT_Trans>::StartTransferCmd() {
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
    2824:	00 d0       	rcall	.+0      	; 0x2826 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv+0x6>
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 83       	std	Y+1, r24	; 0x01
   //start write transaction
   FT_Trans::StartWrite(FT_RAM_CMD + CmdFifoWp);
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	fc 01       	movw	r30, r24
    2834:	80 89       	ldd	r24, Z+16	; 0x10
    2836:	91 89       	ldd	r25, Z+17	; 0x11
    2838:	cc 01       	movw	r24, r24
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	90 58       	subi	r25, 0x80	; 128
    2840:	af 4e       	sbci	r26, 0xEF	; 239
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	29 81       	ldd	r18, Y+1	; 0x01
    2846:	3a 81       	ldd	r19, Y+2	; 0x02
    2848:	ac 01       	movw	r20, r24
    284a:	bd 01       	movw	r22, r26
    284c:	c9 01       	movw	r24, r18
    284e:	19 d8       	rcall	.-4046   	; 0x1882 <_ZN16FT_Transport_SPI10StartWriteEm>
    2850:	89 81       	ldd	r24, Y+1	; 0x01
   TrnsFlag = 1;
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	21 e0       	ldi	r18, 0x01	; 1
    2856:	fc 01       	movw	r30, r24
    2858:	26 83       	std	Z+6, r18	; 0x06
    285a:	80 e0       	ldi	r24, 0x00	; 0
   return FT_GE_OK;
    285c:	0f 90       	pop	r0
}
    285e:	0f 90       	pop	r0
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm>:
template<class FT_Trans>

FT_GEStatus FT_GC<FT_Trans>::TransferCmd(uint32_t Cmd) {
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	00 d0       	rcall	.+0      	; 0x286c <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x6>
    286c:	00 d0       	rcall	.+0      	; 0x286e <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x8>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0xa>
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	9a 83       	std	Y+2, r25	; 0x02
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	4b 83       	std	Y+3, r20	; 0x03
    287a:	5c 83       	std	Y+4, r21	; 0x04
    287c:	6d 83       	std	Y+5, r22	; 0x05
    287e:	7e 83       	std	Y+6, r23	; 0x06
   if (FreeSpace < 4) {
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	fc 01       	movw	r30, r24
    2886:	82 89       	ldd	r24, Z+18	; 0x12
    2888:	93 89       	ldd	r25, Z+19	; 0x13
    288a:	84 30       	cpi	r24, 0x04	; 4
    288c:	91 05       	cpc	r25, r1
    288e:	70 f4       	brcc	.+28     	; 0x28ac <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x46>
      //blocking call till freespace is available
      if (FT_GE_ERROR == ChkGetFreeSpace(4)) {
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	64 e0       	ldi	r22, 0x04	; 4
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	df d1       	rcall	.+958    	; 0x2c58 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj>
    289a:	98 2f       	mov	r25, r24
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	92 33       	cpi	r25, 0x32	; 50
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x3e>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	88 23       	and	r24, r24
    28a6:	11 f0       	breq	.+4      	; 0x28ac <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x46>
    28a8:	82 e3       	ldi	r24, 0x32	; 50
         return FT_GE_ERROR;
    28aa:	25 c0       	rjmp	.+74     	; 0x28f6 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEm+0x90>
    28ac:	29 81       	ldd	r18, Y+1	; 0x01
      }
   }
   FT_Trans::Transfer32(Cmd);
    28ae:	3a 81       	ldd	r19, Y+2	; 0x02
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	ad 81       	ldd	r26, Y+5	; 0x05
    28b6:	be 81       	ldd	r27, Y+6	; 0x06
    28b8:	ac 01       	movw	r20, r24
    28ba:	bd 01       	movw	r22, r26
    28bc:	c9 01       	movw	r24, r18
    28be:	d0 d9       	rcall	.-3168   	; 0x1c60 <_ZN16FT_Transport_SPI10Transfer32Em>
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
   CmdFifoWp = (CmdFifoWp + 4) & 0xfff;
    28c4:	fc 01       	movw	r30, r24
    28c6:	80 89       	ldd	r24, Z+16	; 0x10
    28c8:	91 89       	ldd	r25, Z+17	; 0x11
    28ca:	04 96       	adiw	r24, 0x04	; 4
    28cc:	9c 01       	movw	r18, r24
    28ce:	3f 70       	andi	r19, 0x0F	; 15
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	fc 01       	movw	r30, r24
    28d6:	31 8b       	std	Z+17, r19	; 0x11
    28d8:	20 8b       	std	Z+16, r18	; 0x10
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
   FreeSpace -= 4;
    28de:	fc 01       	movw	r30, r24
    28e0:	82 89       	ldd	r24, Z+18	; 0x12
    28e2:	93 89       	ldd	r25, Z+19	; 0x13
    28e4:	9c 01       	movw	r18, r24
    28e6:	24 50       	subi	r18, 0x04	; 4
    28e8:	31 09       	sbc	r19, r1
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	fc 01       	movw	r30, r24
    28f0:	33 8b       	std	Z+19, r19	; 0x13
    28f2:	22 8b       	std	Z+18, r18	; 0x12
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	26 96       	adiw	r28, 0x06	; 6

   return FT_GE_OK;
    28f8:	0f b6       	in	r0, 0x3f	; 63
}
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	08 95       	ret

00002908 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm>:
template<class FT_Trans>
FT_GEStatus FT_GC<FT_Trans>::TransferCmd(uint8_t *Src, uint32_t NBytes) {
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	60 97       	sbiw	r28, 0x10	; 16
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	9a 87       	std	Y+10, r25	; 0x0a
    2926:	89 87       	std	Y+9, r24	; 0x09
    2928:	7c 87       	std	Y+12, r23	; 0x0c
    292a:	6b 87       	std	Y+11, r22	; 0x0b
    292c:	2d 87       	std	Y+13, r18	; 0x0d
    292e:	3e 87       	std	Y+14, r19	; 0x0e
    2930:	4f 87       	std	Y+15, r20	; 0x0f
    2932:	58 8b       	std	Y+16, r21	; 0x10
   uint32_t i, Count;
   //align the NBytes to multiple of 4
   NBytes = (NBytes + 3) & (~3);
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	af 85       	ldd	r26, Y+15	; 0x0f
    293a:	b8 89       	ldd	r27, Y+16	; 0x10
    293c:	03 96       	adiw	r24, 0x03	; 3
    293e:	a1 1d       	adc	r26, r1
    2940:	b1 1d       	adc	r27, r1
    2942:	8c 7f       	andi	r24, 0xFC	; 252
    2944:	8d 87       	std	Y+13, r24	; 0x0d
    2946:	9e 87       	std	Y+14, r25	; 0x0e
    2948:	af 87       	std	Y+15, r26	; 0x0f
    294a:	b8 8b       	std	Y+16, r27	; 0x10
   //transfer the whole buffer into command buffer
   while (NBytes) {
    294c:	0e c1       	rjmp	.+540    	; 0x2b6a <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x262>
      Count = NBytes;
    294e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2950:	9e 85       	ldd	r25, Y+14	; 0x0e
    2952:	af 85       	ldd	r26, Y+15	; 0x0f
    2954:	b8 89       	ldd	r27, Y+16	; 0x10
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	af 83       	std	Y+7, r26	; 0x07
    295c:	b8 87       	std	Y+8, r27	; 0x08
      if (Count > FreeSpace) {
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	fc 01       	movw	r30, r24
    2964:	82 89       	ldd	r24, Z+18	; 0x12
    2966:	93 89       	ldd	r25, Z+19	; 0x13
    2968:	9c 01       	movw	r18, r24
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	af 81       	ldd	r26, Y+7	; 0x07
    2974:	b8 85       	ldd	r27, Y+8	; 0x08
    2976:	28 17       	cp	r18, r24
    2978:	39 07       	cpc	r19, r25
    297a:	4a 07       	cpc	r20, r26
    297c:	5b 07       	cpc	r21, r27
    297e:	08 f0       	brcs	.+2      	; 0x2982 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x7a>
    2980:	98 c0       	rjmp	.+304    	; 0x2ab2 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1aa>
         //first update the free space
         UpdateFreeSpace();
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	ea d1       	rcall	.+980    	; 0x2d5c <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv>
    2988:	89 85       	ldd	r24, Y+9	; 0x09
         //then transfer the data
         Count = min(FreeSpace, Count);
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	fc 01       	movw	r30, r24
    298e:	82 89       	ldd	r24, Z+18	; 0x12
    2990:	93 89       	ldd	r25, Z+19	; 0x13
    2992:	cc 01       	movw	r24, r24
    2994:	a0 e0       	ldi	r26, 0x00	; 0
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	2d 81       	ldd	r18, Y+5	; 0x05
    299a:	3e 81       	ldd	r19, Y+6	; 0x06
    299c:	4f 81       	ldd	r20, Y+7	; 0x07
    299e:	58 85       	ldd	r21, Y+8	; 0x08
    29a0:	28 17       	cp	r18, r24
    29a2:	39 07       	cpc	r19, r25
    29a4:	4a 07       	cpc	r20, r26
    29a6:	5b 07       	cpc	r21, r27
    29a8:	10 f4       	brcc	.+4      	; 0x29ae <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0xa6>
    29aa:	da 01       	movw	r26, r20
    29ac:	c9 01       	movw	r24, r18
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	af 83       	std	Y+7, r26	; 0x07
    29b4:	b8 87       	std	Y+8, r27	; 0x08
    29b6:	19 82       	std	Y+1, r1	; 0x01
         for (i = 0; i < Count; i++)
    29b8:	1a 82       	std	Y+2, r1	; 0x02
    29ba:	1b 82       	std	Y+3, r1	; 0x03
    29bc:	1c 82       	std	Y+4, r1	; 0x04
    29be:	18 c0       	rjmp	.+48     	; 0x29f0 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0xe8>
    29c0:	8b 85       	ldd	r24, Y+11	; 0x0b
            FT_Trans::Transfer(*Src++);
    29c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    29c4:	9c 01       	movw	r18, r24
    29c6:	2f 5f       	subi	r18, 0xFF	; 255
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	3c 87       	std	Y+12, r19	; 0x0c
    29cc:	2b 87       	std	Y+11, r18	; 0x0b
    29ce:	fc 01       	movw	r30, r24
    29d0:	20 81       	ld	r18, Z
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	62 2f       	mov	r22, r18
    29d8:	32 d9       	rcall	.-3484   	; 0x1c3e <_ZN16FT_Transport_SPI8TransferEh>
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
      if (Count > FreeSpace) {
         //first update the free space
         UpdateFreeSpace();
         //then transfer the data
         Count = min(FreeSpace, Count);
         for (i = 0; i < Count; i++)
    29de:	ab 81       	ldd	r26, Y+3	; 0x03
    29e0:	bc 81       	ldd	r27, Y+4	; 0x04
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	a1 1d       	adc	r26, r1
    29e6:	b1 1d       	adc	r27, r1
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	ab 83       	std	Y+3, r26	; 0x03
    29ee:	bc 83       	std	Y+4, r27	; 0x04
    29f0:	29 81       	ldd	r18, Y+1	; 0x01
    29f2:	3a 81       	ldd	r19, Y+2	; 0x02
    29f4:	4b 81       	ldd	r20, Y+3	; 0x03
    29f6:	5c 81       	ldd	r21, Y+4	; 0x04
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	af 81       	ldd	r26, Y+7	; 0x07
    29fe:	b8 85       	ldd	r27, Y+8	; 0x08
    2a00:	28 17       	cp	r18, r24
    2a02:	39 07       	cpc	r19, r25
    2a04:	4a 07       	cpc	r20, r26
    2a06:	5b 07       	cpc	r21, r27
    2a08:	d8 f2       	brcs	.-74     	; 0x29c0 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0xb8>
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
            FT_Trans::Transfer(*Src++);
         CmdFifoWp = (CmdFifoWp + Count) & 0xfff;
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 89       	ldd	r18, Z+16	; 0x10
    2a12:	31 89       	ldd	r19, Z+17	; 0x11
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	82 0f       	add	r24, r18
    2a1a:	93 1f       	adc	r25, r19
    2a1c:	9c 01       	movw	r18, r24
    2a1e:	3f 70       	andi	r19, 0x0F	; 15
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	fc 01       	movw	r30, r24
    2a26:	31 8b       	std	Z+17, r19	; 0x11
    2a28:	20 8b       	std	Z+16, r18	; 0x10
    2a2a:	89 85       	ldd	r24, Y+9	; 0x09
    2a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
         FreeSpace -= Count;
    2a2e:	fc 01       	movw	r30, r24
    2a30:	22 89       	ldd	r18, Z+18	; 0x12
    2a32:	33 89       	ldd	r19, Z+19	; 0x13
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	28 1b       	sub	r18, r24
    2a3a:	39 0b       	sbc	r19, r25
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	fc 01       	movw	r30, r24
    2a42:	33 8b       	std	Z+19, r19	; 0x13
    2a44:	22 8b       	std	Z+18, r18	; 0x12
    2a46:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a48:	3e 85       	ldd	r19, Y+14	; 0x0e
         //get the free space
         NBytes -= Count;
    2a4a:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a4c:	58 89       	ldd	r21, Y+16	; 0x10
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	af 81       	ldd	r26, Y+7	; 0x07
    2a54:	b8 85       	ldd	r27, Y+8	; 0x08
    2a56:	79 01       	movw	r14, r18
    2a58:	8a 01       	movw	r16, r20
    2a5a:	e8 1a       	sub	r14, r24
    2a5c:	f9 0a       	sbc	r15, r25
    2a5e:	0a 0b       	sbc	r16, r26
    2a60:	1b 0b       	sbc	r17, r27
    2a62:	d8 01       	movw	r26, r16
    2a64:	c7 01       	movw	r24, r14
    2a66:	8d 87       	std	Y+13, r24	; 0x0d
    2a68:	9e 87       	std	Y+14, r25	; 0x0e
    2a6a:	af 87       	std	Y+15, r26	; 0x0f
    2a6c:	b8 8b       	std	Y+16, r27	; 0x10
    2a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a70:	9e 85       	ldd	r25, Y+14	; 0x0e
         Count = min(NBytes, FT_CMDFIFO_SIZE / 2); //atleast wait for half the buffer completion
    2a72:	af 85       	ldd	r26, Y+15	; 0x0f
    2a74:	b8 89       	ldd	r27, Y+16	; 0x10
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	08 e0       	ldi	r16, 0x08	; 8
    2a7a:	90 07       	cpc	r25, r16
    2a7c:	a1 05       	cpc	r26, r1
    2a7e:	b1 05       	cpc	r27, r1
    2a80:	20 f0       	brcs	.+8      	; 0x2a8a <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x182>
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	98 e0       	ldi	r25, 0x08	; 8
    2a86:	a0 e0       	ldi	r26, 0x00	; 0
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	af 83       	std	Y+7, r26	; 0x07
    2a90:	b8 87       	std	Y+8, r27	; 0x08
    2a92:	2d 81       	ldd	r18, Y+5	; 0x05
    2a94:	3e 81       	ldd	r19, Y+6	; 0x06
         if (FT_GE_ERROR == ChkGetFreeSpace(Count)) {
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9a:	b9 01       	movw	r22, r18
    2a9c:	dd d0       	rcall	.+442    	; 0x2c58 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj>
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	92 33       	cpi	r25, 0x32	; 50
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1a0>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	88 23       	and	r24, r24
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1a6>
    2aac:	5e c0       	rjmp	.+188    	; 0x2b6a <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x262>
    2aae:	82 e3       	ldi	r24, 0x32	; 50
    2ab0:	66 c0       	rjmp	.+204    	; 0x2b7e <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x276>
    2ab2:	19 82       	std	Y+1, r1	; 0x01
            return FT_GE_ERROR;
    2ab4:	1a 82       	std	Y+2, r1	; 0x02
    2ab6:	1b 82       	std	Y+3, r1	; 0x03
         }
      } else {
         //transfer of data to command buffer
         for (i = 0; i < Count; i++)
    2ab8:	1c 82       	std	Y+4, r1	; 0x04
    2aba:	18 c0       	rjmp	.+48     	; 0x2aec <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1e4>
    2abc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2abe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ac0:	9c 01       	movw	r18, r24
            FT_Trans::Transfer(*Src++);
    2ac2:	2f 5f       	subi	r18, 0xFF	; 255
    2ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac6:	3c 87       	std	Y+12, r19	; 0x0c
    2ac8:	2b 87       	std	Y+11, r18	; 0x0b
    2aca:	fc 01       	movw	r30, r24
    2acc:	20 81       	ld	r18, Z
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	62 2f       	mov	r22, r18
    2ad4:	b4 d8       	rcall	.-3736   	; 0x1c3e <_ZN16FT_Transport_SPI8TransferEh>
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	ab 81       	ldd	r26, Y+3	; 0x03
    2adc:	bc 81       	ldd	r27, Y+4	; 0x04
         if (FT_GE_ERROR == ChkGetFreeSpace(Count)) {
            return FT_GE_ERROR;
         }
      } else {
         //transfer of data to command buffer
         for (i = 0; i < Count; i++)
    2ade:	01 96       	adiw	r24, 0x01	; 1
    2ae0:	a1 1d       	adc	r26, r1
    2ae2:	b1 1d       	adc	r27, r1
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	ab 83       	std	Y+3, r26	; 0x03
    2aea:	bc 83       	std	Y+4, r27	; 0x04
    2aec:	29 81       	ldd	r18, Y+1	; 0x01
    2aee:	3a 81       	ldd	r19, Y+2	; 0x02
    2af0:	4b 81       	ldd	r20, Y+3	; 0x03
    2af2:	5c 81       	ldd	r21, Y+4	; 0x04
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	af 81       	ldd	r26, Y+7	; 0x07
    2afa:	b8 85       	ldd	r27, Y+8	; 0x08
    2afc:	28 17       	cp	r18, r24
    2afe:	39 07       	cpc	r19, r25
    2b00:	4a 07       	cpc	r20, r26
    2b02:	5b 07       	cpc	r21, r27
    2b04:	d8 f2       	brcs	.-74     	; 0x2abc <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x1b4>
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	20 89       	ldd	r18, Z+16	; 0x10
            FT_Trans::Transfer(*Src++);
         CmdFifoWp = (CmdFifoWp + Count) & 0xfff;
    2b0e:	31 89       	ldd	r19, Z+17	; 0x11
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	9e 81       	ldd	r25, Y+6	; 0x06
    2b14:	82 0f       	add	r24, r18
    2b16:	93 1f       	adc	r25, r19
    2b18:	9c 01       	movw	r18, r24
    2b1a:	3f 70       	andi	r19, 0x0F	; 15
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b20:	fc 01       	movw	r30, r24
    2b22:	31 8b       	std	Z+17, r19	; 0x11
    2b24:	20 8b       	std	Z+16, r18	; 0x10
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	22 89       	ldd	r18, Z+18	; 0x12
         FreeSpace -= Count;
    2b2e:	33 89       	ldd	r19, Z+19	; 0x13
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	28 1b       	sub	r18, r24
    2b36:	39 0b       	sbc	r19, r25
    2b38:	89 85       	ldd	r24, Y+9	; 0x09
    2b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	33 8b       	std	Z+19, r19	; 0x13
    2b40:	22 8b       	std	Z+18, r18	; 0x12
    2b42:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b44:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b46:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b48:	58 89       	ldd	r21, Y+16	; 0x10
         NBytes -= Count;
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	af 81       	ldd	r26, Y+7	; 0x07
    2b50:	b8 85       	ldd	r27, Y+8	; 0x08
    2b52:	79 01       	movw	r14, r18
    2b54:	8a 01       	movw	r16, r20
    2b56:	e8 1a       	sub	r14, r24
    2b58:	f9 0a       	sbc	r15, r25
    2b5a:	0a 0b       	sbc	r16, r26
    2b5c:	1b 0b       	sbc	r17, r27
    2b5e:	d8 01       	movw	r26, r16
    2b60:	c7 01       	movw	r24, r14
    2b62:	8d 87       	std	Y+13, r24	; 0x0d
    2b64:	9e 87       	std	Y+14, r25	; 0x0e
    2b66:	af 87       	std	Y+15, r26	; 0x0f
    2b68:	b8 8b       	std	Y+16, r27	; 0x10
    2b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6e:	af 85       	ldd	r26, Y+15	; 0x0f
    2b70:	b8 89       	ldd	r27, Y+16	; 0x10
FT_GEStatus FT_GC<FT_Trans>::TransferCmd(uint8_t *Src, uint32_t NBytes) {
   uint32_t i, Count;
   //align the NBytes to multiple of 4
   NBytes = (NBytes + 3) & (~3);
   //transfer the whole buffer into command buffer
   while (NBytes) {
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	a1 05       	cpc	r26, r1
    2b76:	b1 05       	cpc	r27, r1
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x274>
    2b7a:	e9 ce       	rjmp	.-558    	; 0x294e <_ZN5FT_GCI16FT_Transport_SPIE11TransferCmdEPhm+0x46>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	60 96       	adiw	r28, 0x10	; 16
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
         CmdFifoWp = (CmdFifoWp + Count) & 0xfff;
         FreeSpace -= Count;
         NBytes -= Count;
      }
   }
   return FT_GE_OK;
    2b84:	de bf       	out	0x3e, r29	; 62
}
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	08 95       	ret

00002b98 <_ZN5FT_GCI16FT_Transport_SPIE19ActiveInternalClockEv>:
//delay(20);
//
//}
template<class FT_Trans>
/* API to set active command, set internal clock and download first DL */
void FT_GC<FT_Trans>::ActiveInternalClock(void) {
    2b98:	ef 92       	push	r14
    2b9a:	ff 92       	push	r15
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	2e 97       	sbiw	r28, 0x0e	; 14
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	9e 87       	std	Y+14, r25	; 0x0e
    2bb6:	8d 87       	std	Y+13, r24	; 0x0d
   uint8_t FT_DLCODE_BOOTUP[12] = { 0, 0, 0, 2,	//GPU instruction CLEAR_COLOR_RGB - black color
      7, 0, 0, 38, //GPU instruction CLEAR
      0, 0, 0, 0,  //GPU instruction DISPLAY
      };
    2bb8:	2c e0       	ldi	r18, 0x0C	; 12
    2bba:	e1 e6       	ldi	r30, 0x61	; 97
    2bbc:	f1 e0       	ldi	r31, 0x01	; 1
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	01 90       	ld	r0, Z+
    2bc6:	0d 92       	st	X+, r0
    2bc8:	2a 95       	dec	r18
    2bca:	e1 f7       	brne	.-8      	; 0x2bc4 <_ZN5FT_GCI16FT_Transport_SPIE19ActiveInternalClockEv+0x2c>
   /* change the SPI clock to <11MHz */
   FT_Trans::ChangeClock(FT_SPI_CLK_FREQ_MIN);
    2bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	52 e1       	ldi	r21, 0x12	; 18
    2bd4:	6a e7       	ldi	r22, 0x7A	; 122
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN16FT_Transport_SPI11ChangeClockEm>
   HostCommand(FT_ACTIVE);  //wake up the processor from sleep state
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	ba 01       	movw	r22, r20
    2be6:	e8 dd       	rcall	.-1072   	; 0x27b8 <_ZN5FT_GCI16FT_Transport_SPIE11HostCommandEm>
    2be8:	64 e1       	ldi	r22, 0x14	; 20
   delay(20);
    2bea:	70 e0       	ldi	r23, 0x00	; 0
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <delay>
    2bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
   /* download the first display list */
   FT_Trans::Write(FT_RAM_DL, FT_DLCODE_BOOTUP, 12);
    2bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf8:	1c e0       	ldi	r17, 0x0C	; 12
    2bfa:	e1 2e       	mov	r14, r17
    2bfc:	f1 2c       	mov	r15, r1
    2bfe:	00 e0       	ldi	r16, 0x00	; 0
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	9e 01       	movw	r18, r28
    2c04:	2f 5f       	subi	r18, 0xFF	; 255
    2c06:	3f 4f       	sbci	r19, 0xFF	; 255
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	50 e0       	ldi	r21, 0x00	; 0
    2c0c:	60 e1       	ldi	r22, 0x10	; 16
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_ZN16FT_Transport_SPI5WriteEmPhm>
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
   /* perform first swap command */
   FT_Trans::Write(REG_DLSWAP, FT_DLSWAP_FRAME);
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	22 e0       	ldi	r18, 0x02	; 2
    2c1a:	40 e5       	ldi	r20, 0x50	; 80
    2c1c:	54 e2       	ldi	r21, 0x24	; 36
    2c1e:	60 e1       	ldi	r22, 0x10	; 16
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN16FT_Transport_SPI5WriteEmh>
    2c26:	8d 85       	ldd	r24, Y+13	; 0x0d
   //make the cmd read write pointers to 0
   CmdFifoWp = 0;
    2c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	11 8a       	std	Z+17, r1	; 0x11
    2c2e:	10 8a       	std	Z+16, r1	; 0x10
    2c30:	8d 85       	ldd	r24, Y+13	; 0x0d
   FreeSpace = FT_CMDFIFO_SIZE - 4;
    2c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c34:	2c ef       	ldi	r18, 0xFC	; 252
    2c36:	3f e0       	ldi	r19, 0x0F	; 15
    2c38:	fc 01       	movw	r30, r24
    2c3a:	33 8b       	std	Z+19, r19	; 0x13
    2c3c:	22 8b       	std	Z+18, r18	; 0x12
    2c3e:	2e 96       	adiw	r28, 0x0e	; 14
}
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	08 95       	ret

00002c58 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj>:
   }
   return FT_GE_OK;
}
template<class FT_Trans>
/* API related to coprocessor fifo write command */
FT_GEStatus FT_GC<FT_Trans>::ChkGetFreeSpace(uint16_t NBytes) {
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x6>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x8>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xa>
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
    2c6a:	7e 83       	std	Y+6, r23	; 0x06
    2c6c:	6d 83       	std	Y+5, r22	; 0x05
   //return busy if no space
   if (FreeSpace < NBytes) {
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	fc 01       	movw	r30, r24
    2c74:	22 89       	ldd	r18, Z+18	; 0x12
    2c76:	33 89       	ldd	r19, Z+19	; 0x13
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	28 17       	cp	r18, r24
    2c7e:	39 07       	cpc	r19, r25
    2c80:	08 f0       	brcs	.+2      	; 0x2c84 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x2c>
    2c82:	62 c0       	rjmp	.+196    	; 0x2d48 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xf0>
      if (TrnsFlag) {
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04
    2c88:	fc 01       	movw	r30, r24
    2c8a:	86 81       	ldd	r24, Z+6	; 0x06
    2c8c:	88 23       	and	r24, r24
    2c8e:	41 f0       	breq	.+16     	; 0x2ca0 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x48>
         EndTransferCmd();
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	9c 81       	ldd	r25, Y+4	; 0x04
    2c94:	e1 db       	rcall	.-2110   	; 0x2458 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
         TrnsFlag = 1;  //coz EndTransferCmd will make it 0
    2c98:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9a:	21 e0       	ldi	r18, 0x01	; 1
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	26 83       	std	Z+6, r18	; 0x06
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
      }
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	20 89       	ldd	r18, Z+16	; 0x10
    2ca8:	31 89       	ldd	r19, Z+17	; 0x11
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	48 ee       	ldi	r20, 0xE8	; 232
    2cb0:	54 e2       	ldi	r21, 0x24	; 36
    2cb2:	60 e1       	ldi	r22, 0x10	; 16
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2cba:	33 c0       	rjmp	.+102    	; 0x2d22 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xca>
      while (FreeSpace < NBytes) {
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
         uint16_t rdptr = FT_Trans::Read16(REG_CMD_READ);
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	44 ee       	ldi	r20, 0xE4	; 228
    2cc2:	54 e2       	ldi	r21, 0x24	; 36
    2cc4:	60 e1       	ldi	r22, 0x10	; 16
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN16FT_Transport_SPI6Read16Em>
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
         if (rdptr == FT_COPRO_ERROR) {
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd6:	ff e0       	ldi	r31, 0x0F	; 15
    2cd8:	9f 07       	cpc	r25, r31
    2cda:	11 f4       	brne	.+4      	; 0x2ce0 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x88>
    2cdc:	82 e3       	ldi	r24, 0x32	; 50
            return FT_GE_ERROR;
    2cde:	35 c0       	rjmp	.+106    	; 0x2d4a <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xf2>
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
         }
         //update the freespace by reading the register
         FreeSpace = ((CmdFifoWp - rdptr) & 0xffc);
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	20 89       	ldd	r18, Z+16	; 0x10
    2ce8:	31 89       	ldd	r19, Z+17	; 0x11
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	a9 01       	movw	r20, r18
    2cf0:	48 1b       	sub	r20, r24
    2cf2:	59 0b       	sbc	r21, r25
    2cf4:	ca 01       	movw	r24, r20
    2cf6:	9c 01       	movw	r18, r24
    2cf8:	2c 7f       	andi	r18, 0xFC	; 252
    2cfa:	3f 70       	andi	r19, 0x0F	; 15
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	fc 01       	movw	r30, r24
    2d02:	33 8b       	std	Z+19, r19	; 0x13
    2d04:	22 8b       	std	Z+18, r18	; 0x12
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
         FreeSpace = (FT_CMDFIFO_SIZE - 4) - FreeSpace;
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	82 89       	ldd	r24, Z+18	; 0x12
    2d0e:	93 89       	ldd	r25, Z+19	; 0x13
    2d10:	2c ef       	ldi	r18, 0xFC	; 252
    2d12:	3f e0       	ldi	r19, 0x0F	; 15
    2d14:	28 1b       	sub	r18, r24
    2d16:	39 0b       	sbc	r19, r25
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	33 8b       	std	Z+19, r19	; 0x13
    2d20:	22 8b       	std	Z+18, r18	; 0x12
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
         EndTransferCmd();
         TrnsFlag = 1;  //coz EndTransferCmd will make it 0
      }
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
      while (FreeSpace < NBytes) {
    2d24:	9c 81       	ldd	r25, Y+4	; 0x04
    2d26:	fc 01       	movw	r30, r24
    2d28:	22 89       	ldd	r18, Z+18	; 0x12
    2d2a:	33 89       	ldd	r19, Z+19	; 0x13
    2d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d30:	28 17       	cp	r18, r24
    2d32:	39 07       	cpc	r19, r25
    2d34:	18 f2       	brcs	.-122    	; 0x2cbc <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0x64>
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
         }
         //update the freespace by reading the register
         FreeSpace = ((CmdFifoWp - rdptr) & 0xffc);
         FreeSpace = (FT_CMDFIFO_SIZE - 4) - FreeSpace;
      }
      if (TrnsFlag) {
    2d38:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	86 81       	ldd	r24, Z+6	; 0x06
    2d3e:	88 23       	and	r24, r24
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <_ZN5FT_GCI16FT_Transport_SPIE15ChkGetFreeSpaceEj+0xf0>
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
         StartTransferCmd();
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	6c dd       	rcall	.-1320   	; 0x2820 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	26 96       	adiw	r28, 0x06	; 6
      }
   }
   return FT_GE_OK;
    2d4c:	0f b6       	in	r0, 0x3f	; 63
}
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	08 95       	ret

00002d5c <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv>:
   FT_Trans::Read(Addr);  //ideally sending 3 bytes is sufficient
   delay(20);  //worst scenario
}
template<class FT_Trans>
//void FT_GC<FT_Trans>::CheckIntFlag(uint8_t IntFlag){}
FT_GEStatus FT_GC<FT_Trans>::UpdateFreeSpace() {
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv+0x6>
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
   if (TrnsFlag) {
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	fc 01       	movw	r30, r24
    2d70:	86 81       	ldd	r24, Z+6	; 0x06
    2d72:	88 23       	and	r24, r24
    2d74:	a1 f0       	breq	.+40     	; 0x2d9e <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv+0x42>
      EndTransferCmd();
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7a:	6e db       	rcall	.-2340   	; 0x2458 <_ZN5FT_GCI16FT_Transport_SPIE14EndTransferCmdEv>
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	fc 01       	movw	r30, r24
    2d82:	20 89       	ldd	r18, Z+16	; 0x10
    2d84:	31 89       	ldd	r19, Z+17	; 0x11
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8a:	48 ee       	ldi	r20, 0xE8	; 232
    2d8c:	54 e2       	ldi	r21, 0x24	; 36
    2d8e:	60 e1       	ldi	r22, 0x10	; 16
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
      StartTransferCmd();
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	42 dd       	rcall	.-1404   	; 0x2820 <_ZN5FT_GCI16FT_Transport_SPIE16StartTransferCmdEv>
    2d9c:	0d c0       	rjmp	.+26     	; 0x2db8 <_ZN5FT_GCI16FT_Transport_SPIE15UpdateFreeSpaceEv+0x5c>
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
   } else {
      //update the write pointer
      FT_Trans::Write16(REG_CMD_WRITE, CmdFifoWp);
    2da2:	fc 01       	movw	r30, r24
    2da4:	20 89       	ldd	r18, Z+16	; 0x10
    2da6:	31 89       	ldd	r19, Z+17	; 0x11
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dac:	48 ee       	ldi	r20, 0xE8	; 232
    2dae:	54 e2       	ldi	r21, 0x24	; 36
    2db0:	60 e1       	ldi	r22, 0x10	; 16
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN16FT_Transport_SPI7Write16Emj>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	0f 90       	pop	r0
   }
   return FT_GE_OK;
    2dbc:	0f 90       	pop	r0
}
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	08 95       	ret

00002dc4 <_Z41__static_initialization_and_destruction_0ii>:

   while (1)
      ;
}
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <_Z41__static_initialization_and_destruction_0ii+0x6>
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <_Z41__static_initialization_and_destruction_0ii+0x8>
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	7c 83       	std	Y+4, r23	; 0x04
    2dd6:	6b 83       	std	Y+3, r22	; 0x03
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	9a 81       	ldd	r25, Y+2	; 0x02
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	91 05       	cpc	r25, r1
    2de0:	59 f4       	brne	.+22     	; 0x2df8 <_Z41__static_initialization_and_destruction_0ii+0x34>
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	9c 81       	ldd	r25, Y+4	; 0x04
    2de6:	8f 3f       	cpi	r24, 0xFF	; 255
    2de8:	2f ef       	ldi	r18, 0xFF	; 255
    2dea:	92 07       	cpc	r25, r18
    2dec:	29 f4       	brne	.+10     	; 0x2df8 <_Z41__static_initialization_and_destruction_0ii+0x34>

#include "FT_VM801P43_50.h"

#include "arduino/Arduino.h"

FT801IMPL_SPI FTImpl(FT_CS_PIN, FT_INT_PIN);
    2dee:	47 e0       	ldi	r20, 0x07	; 7
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	82 ef       	ldi	r24, 0xF2	; 242
    2df4:	92 e0       	ldi	r25, 0x02	; 2
    2df6:	19 d8       	rcall	.-4046   	; 0x1e2a <_ZN9FT801ImplI16FT_Transport_SPIEC1Ehh>
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	49 f4       	brne	.+18     	; 0x2e12 <_Z41__static_initialization_and_destruction_0ii+0x4e>
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	8f 3f       	cpi	r24, 0xFF	; 255
    2e06:	2f ef       	ldi	r18, 0xFF	; 255
    2e08:	92 07       	cpc	r25, r18
    2e0a:	19 f4       	brne	.+6      	; 0x2e12 <_Z41__static_initialization_and_destruction_0ii+0x4e>
    2e0c:	82 ef       	ldi	r24, 0xF2	; 242
    2e0e:	92 e0       	ldi	r25, 0x02	; 2
    2e10:	07 d0       	rcall	.+14     	; 0x2e20 <_ZN9FT801ImplI16FT_Transport_SPIED1Ev>
    2e12:	0f 90       	pop	r0
    2e14:	0f 90       	pop	r0

   FTImpl.Clear();

   while (1)
      ;
}
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	08 95       	ret

00002e20 <_ZN9FT801ImplI16FT_Transport_SPIED1Ev>:
	//all the three pins will be utilized
	FT_GC<FT_Trans>::CSPin = csPin;
	FT_GC<FT_Trans>::IntPin = IntPin;
}
template<class FT_Trans>
FT801Impl<FT_Trans>::~FT801Impl()
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <_ZN9FT801ImplI16FT_Transport_SPIED1Ev+0x6>
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
{
	//do nothing
}
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	cb d9       	rcall	.-3178   	; 0x21ca <_ZN5FT_GCI16FT_Transport_SPIED1Ev>
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	08 95       	ret

00002e3e <_GLOBAL__sub_I_FTImpl>:
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	6f ef       	ldi	r22, 0xFF	; 255
    2e48:	7f ef       	ldi	r23, 0xFF	; 255
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	ba df       	rcall	.-140    	; 0x2dc4 <_Z41__static_initialization_and_destruction_0ii>
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	08 95       	ret

00002e56 <_GLOBAL__sub_D_FTImpl>:
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	6f ef       	ldi	r22, 0xFF	; 255
    2e60:	7f ef       	ldi	r23, 0xFF	; 255
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	ae df       	rcall	.-164    	; 0x2dc4 <_Z41__static_initialization_and_destruction_0ii>
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	08 95       	ret

00002e6e <__udivmodsi4>:
    2e6e:	a1 e2       	ldi	r26, 0x21	; 33
    2e70:	1a 2e       	mov	r1, r26
    2e72:	aa 1b       	sub	r26, r26
    2e74:	bb 1b       	sub	r27, r27
    2e76:	fd 01       	movw	r30, r26
    2e78:	0d c0       	rjmp	.+26     	; 0x2e94 <__udivmodsi4_ep>

00002e7a <__udivmodsi4_loop>:
    2e7a:	aa 1f       	adc	r26, r26
    2e7c:	bb 1f       	adc	r27, r27
    2e7e:	ee 1f       	adc	r30, r30
    2e80:	ff 1f       	adc	r31, r31
    2e82:	a2 17       	cp	r26, r18
    2e84:	b3 07       	cpc	r27, r19
    2e86:	e4 07       	cpc	r30, r20
    2e88:	f5 07       	cpc	r31, r21
    2e8a:	20 f0       	brcs	.+8      	; 0x2e94 <__udivmodsi4_ep>
    2e8c:	a2 1b       	sub	r26, r18
    2e8e:	b3 0b       	sbc	r27, r19
    2e90:	e4 0b       	sbc	r30, r20
    2e92:	f5 0b       	sbc	r31, r21

00002e94 <__udivmodsi4_ep>:
    2e94:	66 1f       	adc	r22, r22
    2e96:	77 1f       	adc	r23, r23
    2e98:	88 1f       	adc	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	1a 94       	dec	r1
    2e9e:	69 f7       	brne	.-38     	; 0x2e7a <__udivmodsi4_loop>
    2ea0:	60 95       	com	r22
    2ea2:	70 95       	com	r23
    2ea4:	80 95       	com	r24
    2ea6:	90 95       	com	r25
    2ea8:	9b 01       	movw	r18, r22
    2eaa:	ac 01       	movw	r20, r24
    2eac:	bd 01       	movw	r22, r26
    2eae:	cf 01       	movw	r24, r30
    2eb0:	08 95       	ret

00002eb2 <__muluhisi3>:
    2eb2:	0d d0       	rcall	.+26     	; 0x2ece <__umulhisi3>
    2eb4:	a5 9f       	mul	r26, r21
    2eb6:	90 0d       	add	r25, r0
    2eb8:	b4 9f       	mul	r27, r20
    2eba:	90 0d       	add	r25, r0
    2ebc:	a4 9f       	mul	r26, r20
    2ebe:	80 0d       	add	r24, r0
    2ec0:	91 1d       	adc	r25, r1
    2ec2:	11 24       	eor	r1, r1
    2ec4:	08 95       	ret

00002ec6 <__tablejump_elpm__>:
    2ec6:	07 90       	elpm	r0, Z+
    2ec8:	f6 91       	elpm	r31, Z
    2eca:	e0 2d       	mov	r30, r0
    2ecc:	09 94       	ijmp

00002ece <__umulhisi3>:
    2ece:	a2 9f       	mul	r26, r18
    2ed0:	b0 01       	movw	r22, r0
    2ed2:	b3 9f       	mul	r27, r19
    2ed4:	c0 01       	movw	r24, r0
    2ed6:	a3 9f       	mul	r26, r19
    2ed8:	70 0d       	add	r23, r0
    2eda:	81 1d       	adc	r24, r1
    2edc:	11 24       	eor	r1, r1
    2ede:	91 1d       	adc	r25, r1
    2ee0:	b2 9f       	mul	r27, r18
    2ee2:	70 0d       	add	r23, r0
    2ee4:	81 1d       	adc	r24, r1
    2ee6:	11 24       	eor	r1, r1
    2ee8:	91 1d       	adc	r25, r1
    2eea:	08 95       	ret

00002eec <strlen>:
    2eec:	fc 01       	movw	r30, r24
    2eee:	01 90       	ld	r0, Z+
    2ef0:	00 20       	and	r0, r0
    2ef2:	e9 f7       	brne	.-6      	; 0x2eee <strlen+0x2>
    2ef4:	80 95       	com	r24
    2ef6:	90 95       	com	r25
    2ef8:	8e 0f       	add	r24, r30
    2efa:	9f 1f       	adc	r25, r31
    2efc:	08 95       	ret

00002efe <__do_global_dtors>:
    2efe:	10 e0       	ldi	r17, 0x00	; 0
    2f00:	c8 e9       	ldi	r28, 0x98	; 152
    2f02:	d0 e0       	ldi	r29, 0x00	; 0
    2f04:	00 e0       	ldi	r16, 0x00	; 0
    2f06:	05 c0       	rjmp	.+10     	; 0x2f12 <__do_global_dtors+0x14>
    2f08:	22 97       	sbiw	r28, 0x02	; 2
    2f0a:	01 09       	sbc	r16, r1
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	0b bf       	out	0x3b, r16	; 59
    2f10:	da df       	rcall	.-76     	; 0x2ec6 <__tablejump_elpm__>
    2f12:	ca 39       	cpi	r28, 0x9A	; 154
    2f14:	d1 07       	cpc	r29, r17
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	08 07       	cpc	r16, r24
    2f1a:	b1 f7       	brne	.-20     	; 0x2f08 <__do_global_dtors+0xa>
    2f1c:	f8 94       	cli

00002f1e <__stop_program>:
    2f1e:	ff cf       	rjmp	.-2      	; 0x2f1e <__stop_program>
